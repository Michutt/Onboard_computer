
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a8  08007f78  08007f78  00017f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009020  08009020  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009028  08009028  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  08009030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000294  080092c4  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  080092c4  00020a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d30  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002934  00000000  00000000  00031ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  00034928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00026e24  00000000  00000000  00035708  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d685  00000000  00000000  0005c52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000e97bd  00000000  00000000  00069bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0015336e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c60  00000000  00000000  001533f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000432c  00000000  00000000  00154050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000294 	.word	0x20000294
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f60 	.word	0x08007f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000298 	.word	0x20000298
 80001cc:	08007f60 	.word	0x08007f60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b972 	b.w	8000f78 <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9e08      	ldr	r6, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	4688      	mov	r8, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14b      	bne.n	8000d52 <__udivmoddi4+0xa6>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4615      	mov	r5, r2
 8000cbe:	d967      	bls.n	8000d90 <__udivmoddi4+0xe4>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b14a      	cbz	r2, 8000cda <__udivmoddi4+0x2e>
 8000cc6:	f1c2 0720 	rsb	r7, r2, #32
 8000cca:	fa01 f302 	lsl.w	r3, r1, r2
 8000cce:	fa20 f707 	lsr.w	r7, r0, r7
 8000cd2:	4095      	lsls	r5, r2
 8000cd4:	ea47 0803 	orr.w	r8, r7, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce4:	fa1f fc85 	uxth.w	ip, r5
 8000ce8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x60>
 8000cf8:	18eb      	adds	r3, r5, r3
 8000cfa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfe:	f080 811b 	bcs.w	8000f38 <__udivmoddi4+0x28c>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 8118 	bls.w	8000f38 <__udivmoddi4+0x28c>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	442b      	add	r3, r5
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d20:	45a4      	cmp	ip, r4
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x8c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x290>
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x290>
 8000d34:	3802      	subs	r0, #2
 8000d36:	442c      	add	r4, r5
 8000d38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	2700      	movs	r7, #0
 8000d42:	b11e      	cbz	r6, 8000d4c <__udivmoddi4+0xa0>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xbe>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	f000 80eb 	beq.w	8000f32 <__udivmoddi4+0x286>
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d62:	4638      	mov	r0, r7
 8000d64:	4639      	mov	r1, r7
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f783 	clz	r7, r3
 8000d6e:	2f00      	cmp	r7, #0
 8000d70:	d147      	bne.n	8000e02 <__udivmoddi4+0x156>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd0>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80fa 	bhi.w	8000f70 <__udivmoddi4+0x2c4>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	4698      	mov	r8, r3
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa0>
 8000d8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa0>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xe8>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 808f 	bne.w	8000ebc <__udivmoddi4+0x210>
 8000d9e:	1b49      	subs	r1, r1, r5
 8000da0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da4:	fa1f f885 	uxth.w	r8, r5
 8000da8:	2701      	movs	r7, #1
 8000daa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dae:	0c23      	lsrs	r3, r4, #16
 8000db0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x124>
 8000dc0:	18eb      	adds	r3, r5, r3
 8000dc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x122>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	f200 80cd 	bhi.w	8000f68 <__udivmoddi4+0x2bc>
 8000dce:	4684      	mov	ip, r0
 8000dd0:	1a59      	subs	r1, r3, r1
 8000dd2:	b2a3      	uxth	r3, r4
 8000dd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ddc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000de0:	fb08 f800 	mul.w	r8, r8, r0
 8000de4:	45a0      	cmp	r8, r4
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x14c>
 8000de8:	192c      	adds	r4, r5, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x14a>
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	f200 80b6 	bhi.w	8000f62 <__udivmoddi4+0x2b6>
 8000df6:	4618      	mov	r0, r3
 8000df8:	eba4 0408 	sub.w	r4, r4, r8
 8000dfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e00:	e79f      	b.n	8000d42 <__udivmoddi4+0x96>
 8000e02:	f1c7 0c20 	rsb	ip, r7, #32
 8000e06:	40bb      	lsls	r3, r7
 8000e08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e10:	fa01 f407 	lsl.w	r4, r1, r7
 8000e14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e20:	4325      	orrs	r5, r4
 8000e22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e26:	0c2c      	lsrs	r4, r5, #16
 8000e28:	fb08 3319 	mls	r3, r8, r9, r3
 8000e2c:	fa1f fa8e 	uxth.w	sl, lr
 8000e30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e34:	fb09 f40a 	mul.w	r4, r9, sl
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e42:	d90b      	bls.n	8000e5c <__udivmoddi4+0x1b0>
 8000e44:	eb1e 0303 	adds.w	r3, lr, r3
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	f080 8087 	bcs.w	8000f5e <__udivmoddi4+0x2b2>
 8000e50:	429c      	cmp	r4, r3
 8000e52:	f240 8084 	bls.w	8000f5e <__udivmoddi4+0x2b2>
 8000e56:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5a:	4473      	add	r3, lr
 8000e5c:	1b1b      	subs	r3, r3, r4
 8000e5e:	b2ad      	uxth	r5, r5
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3310 	mls	r3, r8, r0, r3
 8000e68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e70:	45a2      	cmp	sl, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1da>
 8000e74:	eb1e 0404 	adds.w	r4, lr, r4
 8000e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e7c:	d26b      	bcs.n	8000f56 <__udivmoddi4+0x2aa>
 8000e7e:	45a2      	cmp	sl, r4
 8000e80:	d969      	bls.n	8000f56 <__udivmoddi4+0x2aa>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4474      	add	r4, lr
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	eba4 040a 	sub.w	r4, r4, sl
 8000e92:	454c      	cmp	r4, r9
 8000e94:	46c2      	mov	sl, r8
 8000e96:	464b      	mov	r3, r9
 8000e98:	d354      	bcc.n	8000f44 <__udivmoddi4+0x298>
 8000e9a:	d051      	beq.n	8000f40 <__udivmoddi4+0x294>
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d069      	beq.n	8000f74 <__udivmoddi4+0x2c8>
 8000ea0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eac:	40fd      	lsrs	r5, r7
 8000eae:	40fc      	lsrs	r4, r7
 8000eb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb8:	2700      	movs	r7, #0
 8000eba:	e747      	b.n	8000d4c <__udivmoddi4+0xa0>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec4:	4095      	lsls	r5, r2
 8000ec6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eca:	fa21 f303 	lsr.w	r3, r1, r3
 8000ece:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ed2:	4338      	orrs	r0, r7
 8000ed4:	0c01      	lsrs	r1, r0, #16
 8000ed6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eda:	fa1f f885 	uxth.w	r8, r5
 8000ede:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ee2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee6:	fb07 f308 	mul.w	r3, r7, r8
 8000eea:	428b      	cmp	r3, r1
 8000eec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x256>
 8000ef2:	1869      	adds	r1, r5, r1
 8000ef4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef8:	d22f      	bcs.n	8000f5a <__udivmoddi4+0x2ae>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d92d      	bls.n	8000f5a <__udivmoddi4+0x2ae>
 8000efe:	3f02      	subs	r7, #2
 8000f00:	4429      	add	r1, r5
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	b281      	uxth	r1, r0
 8000f06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb00 f308 	mul.w	r3, r0, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x27e>
 8000f1a:	1869      	adds	r1, r5, r1
 8000f1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f20:	d217      	bcs.n	8000f52 <__udivmoddi4+0x2a6>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d915      	bls.n	8000f52 <__udivmoddi4+0x2a6>
 8000f26:	3802      	subs	r0, #2
 8000f28:	4429      	add	r1, r5
 8000f2a:	1ac9      	subs	r1, r1, r3
 8000f2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f30:	e73b      	b.n	8000daa <__udivmoddi4+0xfe>
 8000f32:	4637      	mov	r7, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e709      	b.n	8000d4c <__udivmoddi4+0xa0>
 8000f38:	4607      	mov	r7, r0
 8000f3a:	e6e7      	b.n	8000d0c <__udivmoddi4+0x60>
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x8c>
 8000f40:	4541      	cmp	r1, r8
 8000f42:	d2ab      	bcs.n	8000e9c <__udivmoddi4+0x1f0>
 8000f44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f48:	eb69 020e 	sbc.w	r2, r9, lr
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	4613      	mov	r3, r2
 8000f50:	e7a4      	b.n	8000e9c <__udivmoddi4+0x1f0>
 8000f52:	4660      	mov	r0, ip
 8000f54:	e7e9      	b.n	8000f2a <__udivmoddi4+0x27e>
 8000f56:	4618      	mov	r0, r3
 8000f58:	e795      	b.n	8000e86 <__udivmoddi4+0x1da>
 8000f5a:	4667      	mov	r7, ip
 8000f5c:	e7d1      	b.n	8000f02 <__udivmoddi4+0x256>
 8000f5e:	4681      	mov	r9, r0
 8000f60:	e77c      	b.n	8000e5c <__udivmoddi4+0x1b0>
 8000f62:	3802      	subs	r0, #2
 8000f64:	442c      	add	r4, r5
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0x14c>
 8000f68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f6c:	442b      	add	r3, r5
 8000f6e:	e72f      	b.n	8000dd0 <__udivmoddi4+0x124>
 8000f70:	4638      	mov	r0, r7
 8000f72:	e708      	b.n	8000d86 <__udivmoddi4+0xda>
 8000f74:	4637      	mov	r7, r6
 8000f76:	e6e9      	b.n	8000d4c <__udivmoddi4+0xa0>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <MX_GPIO_Init+0xf0>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a35      	ldr	r2, [pc, #212]	; (800106c <MX_GPIO_Init+0xf0>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b33      	ldr	r3, [pc, #204]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a2f      	ldr	r2, [pc, #188]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_GPIO_Init+0xf0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f001 fd49 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_GPIO_Init+0xf4>)
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4818      	ldr	r0, [pc, #96]	; (8001074 <MX_GPIO_Init+0xf8>)
 8001014:	f001 fb7c 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001018:	2320      	movs	r3, #32
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f001 fb6d 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = button_previous_Pin|button_next_Pin|button_parrent_Pin|button_child_Pin;
 8001036:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f001 fb5f 	bl	8002710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2028      	movs	r0, #40	; 0x28
 8001058:	f001 fae3 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800105c:	2028      	movs	r0, #40	; 0x28
 800105e:	f001 fafc 	bl	800265a <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	10210000 	.word	0x10210000
 8001074:	48000800 	.word	0x48000800

08001078 <GPS_Init>:
uint8_t buff[512];
char *p = buff;


void GPS_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	4903      	ldr	r1, [pc, #12]	; (800108c <GPS_Init+0x14>)
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <GPS_Init+0x18>)
 8001082:	f003 fd23 	bl	8004acc <HAL_UART_Receive_IT>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200008f4 	.word	0x200008f4
 8001090:	2000098c 	.word	0x2000098c

08001094 <GPS_CallBack>:


void GPS_CallBack(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	if (rx_data != '\n')
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <GPS_CallBack+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b0a      	cmp	r3, #10
 800109e:	d00b      	beq.n	80010b8 <GPS_CallBack+0x24>
		buff[idx++] = rx_data;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <GPS_CallBack+0x64>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	b2d1      	uxtb	r1, r2
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <GPS_CallBack+0x64>)
 80010aa:	7011      	strb	r1, [r2, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <GPS_CallBack+0x60>)
 80010b0:	7819      	ldrb	r1, [r3, #0]
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <GPS_CallBack+0x68>)
 80010b4:	5499      	strb	r1, [r3, r2]
 80010b6:	e010      	b.n	80010da <GPS_CallBack+0x46>
	else
	{
		delete_commas(buff);
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <GPS_CallBack+0x68>)
 80010ba:	f000 f827 	bl	800110c <delete_commas>
		parse(p);
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <GPS_CallBack+0x6c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f838 	bl	8001138 <parse>
		idx = 0;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <GPS_CallBack+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
		memset(buff, 0, sizeof(buff));
 80010ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d2:	2100      	movs	r1, #0
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <GPS_CallBack+0x68>)
 80010d6:	f004 fcfd 	bl	8005ad4 <memset>
	}
	HAL_UART_Transmit(DEBUG_USART, &rx_data, 1, 100); // print all frames
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	2201      	movs	r2, #1
 80010de:	4905      	ldr	r1, [pc, #20]	; (80010f4 <GPS_CallBack+0x60>)
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <GPS_CallBack+0x70>)
 80010e2:	f003 fc5f 	bl	80049a4 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	4902      	ldr	r1, [pc, #8]	; (80010f4 <GPS_CallBack+0x60>)
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <GPS_CallBack+0x74>)
 80010ec:	f003 fcee 	bl	8004acc <HAL_UART_Receive_IT>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200008f4 	.word	0x200008f4
 80010f8:	200002b0 	.word	0x200002b0
 80010fc:	200006dc 	.word	0x200006dc
 8001100:	20000008 	.word	0x20000008
 8001104:	20000a0c 	.word	0x20000a0c
 8001108:	2000098c 	.word	0x2000098c

0800110c <delete_commas>:


void delete_commas(uint8_t *buff)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    while ((buff = strchr(buff, ','))) {
 8001114:	e004      	b.n	8001120 <delete_commas+0x14>
        *buff++ = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    while ((buff = strchr(buff, ','))) {
 8001120:	212c      	movs	r1, #44	; 0x2c
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f004 fcfe 	bl	8005b24 <strchr>
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f2      	bne.n	8001116 <delete_commas+0xa>
    }
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <parse>:


void parse(char *p)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    uint32_t UTC_Time;
    double latitude; // longitude as well
    char *ptr;

    if (!strcmp(p, "$GPRMC"))
 8001140:	4981      	ldr	r1, [pc, #516]	; (8001348 <parse+0x210>)
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f844 	bl	80001d0 <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80f1 	bne.w	8001332 <parse+0x1fa>
    {

        //frame name
        p += strlen(p) + 1;
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f847 	bl	80001e4 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	3301      	adds	r3, #1
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	607b      	str	r3, [r7, #4]

        //time
        UTC_Time = atoi(p);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f004 fc89 	bl	8005a78 <atoi>
 8001166:	4603      	mov	r3, r0
 8001168:	61fb      	str	r3, [r7, #28]
        GPS_data.UTC_Hour = UTC_Time / 10000;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4a77      	ldr	r2, [pc, #476]	; (800134c <parse+0x214>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0b5b      	lsrs	r3, r3, #13
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b76      	ldr	r3, [pc, #472]	; (8001350 <parse+0x218>)
 8001178:	701a      	strb	r2, [r3, #0]
        GPS_data.UTC_Min = UTC_Time % 10000 / 100;
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4b73      	ldr	r3, [pc, #460]	; (800134c <parse+0x214>)
 800117e:	fba3 1302 	umull	r1, r3, r3, r2
 8001182:	0b5b      	lsrs	r3, r3, #13
 8001184:	f242 7110 	movw	r1, #10000	; 0x2710
 8001188:	fb01 f303 	mul.w	r3, r1, r3
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	4a71      	ldr	r2, [pc, #452]	; (8001354 <parse+0x21c>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b6d      	ldr	r3, [pc, #436]	; (8001350 <parse+0x218>)
 800119a:	705a      	strb	r2, [r3, #1]
        GPS_data.UTC_Sec = UTC_Time % 100;
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <parse+0x21c>)
 80011a0:	fba3 1302 	umull	r1, r3, r3, r2
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	2164      	movs	r1, #100	; 0x64
 80011a8:	fb01 f303 	mul.w	r3, r1, r3
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b67      	ldr	r3, [pc, #412]	; (8001350 <parse+0x218>)
 80011b2:	709a      	strb	r2, [r3, #2]
        p += strlen(p) + 1;
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff f815 	bl	80001e4 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	3301      	adds	r3, #1
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	607b      	str	r3, [r7, #4]

        //receiver warning
        p += strlen(p) + 1;
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff f80d 	bl	80001e4 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	3301      	adds	r3, #1
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	607b      	str	r3, [r7, #4]

        //latitude
        latitude = strtod(p, &ptr);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f005 fac0 	bl	8006760 <strtod>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9ae 	bl	8000544 <__aeabi_i2d>
 80011e8:	4603      	mov	r3, r0
 80011ea:	460c      	mov	r4, r1
 80011ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
        GPS_data.latitude_min = latitude / 100;
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <parse+0x220>)
 80011f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011fa:	f7ff fb37 	bl	800086c <__aeabi_ddiv>
 80011fe:	4603      	mov	r3, r0
 8001200:	460c      	mov	r4, r1
 8001202:	4618      	mov	r0, r3
 8001204:	4621      	mov	r1, r4
 8001206:	f7ff fcc9 	bl	8000b9c <__aeabi_d2uiz>
 800120a:	4603      	mov	r3, r0
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b50      	ldr	r3, [pc, #320]	; (8001350 <parse+0x218>)
 8001210:	70da      	strb	r2, [r3, #3]
        GPS_data.latitude_deg = latitude - GPS_data.latitude_min * 100;
 8001212:	4b4f      	ldr	r3, [pc, #316]	; (8001350 <parse+0x218>)
 8001214:	78db      	ldrb	r3, [r3, #3]
 8001216:	461a      	mov	r2, r3
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	fb03 f302 	mul.w	r3, r3, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f990 	bl	8000544 <__aeabi_i2d>
 8001224:	4603      	mov	r3, r0
 8001226:	460c      	mov	r4, r1
 8001228:	461a      	mov	r2, r3
 800122a:	4623      	mov	r3, r4
 800122c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001230:	f7ff f83a 	bl	80002a8 <__aeabi_dsub>
 8001234:	4603      	mov	r3, r0
 8001236:	460c      	mov	r4, r1
 8001238:	4618      	mov	r0, r3
 800123a:	4621      	mov	r1, r4
 800123c:	f7ff fcce 	bl	8000bdc <__aeabi_d2f>
 8001240:	4602      	mov	r2, r0
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <parse+0x218>)
 8001244:	605a      	str	r2, [r3, #4]
        p += strlen(p) + 1;
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7fe ffcc 	bl	80001e4 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	3301      	adds	r3, #1
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	607b      	str	r3, [r7, #4]

        // latitude direction
        GPS_data.ns = *p;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <parse+0x218>)
 800125c:	721a      	strb	r2, [r3, #8]
        p += strlen(p) + 1;
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7fe ffc0 	bl	80001e4 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	3301      	adds	r3, #1
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	607b      	str	r3, [r7, #4]

        //longitude
        latitude = strtod(p, &ptr);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f005 fa73 	bl	8006760 <strtod>
 800127a:	4603      	mov	r3, r0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f961 	bl	8000544 <__aeabi_i2d>
 8001282:	4603      	mov	r3, r0
 8001284:	460c      	mov	r4, r1
 8001286:	e9c7 3404 	strd	r3, r4, [r7, #16]
        GPS_data.longitude_min = latitude / 100;
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <parse+0x220>)
 8001290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001294:	f7ff faea 	bl	800086c <__aeabi_ddiv>
 8001298:	4603      	mov	r3, r0
 800129a:	460c      	mov	r4, r1
 800129c:	4618      	mov	r0, r3
 800129e:	4621      	mov	r1, r4
 80012a0:	f7ff fc7c 	bl	8000b9c <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <parse+0x218>)
 80012aa:	725a      	strb	r2, [r3, #9]
        GPS_data.longitude_deg = latitude - GPS_data.longitude_min * 100;
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <parse+0x218>)
 80012ae:	7a5b      	ldrb	r3, [r3, #9]
 80012b0:	461a      	mov	r2, r3
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	fb03 f302 	mul.w	r3, r3, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f943 	bl	8000544 <__aeabi_i2d>
 80012be:	4603      	mov	r3, r0
 80012c0:	460c      	mov	r4, r1
 80012c2:	461a      	mov	r2, r3
 80012c4:	4623      	mov	r3, r4
 80012c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ca:	f7fe ffed 	bl	80002a8 <__aeabi_dsub>
 80012ce:	4603      	mov	r3, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	4618      	mov	r0, r3
 80012d4:	4621      	mov	r1, r4
 80012d6:	f7ff fc81 	bl	8000bdc <__aeabi_d2f>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <parse+0x218>)
 80012de:	60da      	str	r2, [r3, #12]
        p += strlen(p) + 1;
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7fe ff7f 	bl	80001e4 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	3301      	adds	r3, #1
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	607b      	str	r3, [r7, #4]

        // longitude direction
        GPS_data.ew = *p;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <parse+0x218>)
 80012f6:	741a      	strb	r2, [r3, #16]
        p += strlen(p) + 1;
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7fe ff73 	bl	80001e4 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	3301      	adds	r3, #1
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	607b      	str	r3, [r7, #4]

        // speed in knots
        GPS_data.speed = atof(p) * 1.852; //conversion to km per hour
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f004 fbb2 	bl	8005a72 <atof>
 800130e:	4603      	mov	r3, r0
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f917 	bl	8000544 <__aeabi_i2d>
 8001316:	a30a      	add	r3, pc, #40	; (adr r3, 8001340 <parse+0x208>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff f97c 	bl	8000618 <__aeabi_dmul>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4618      	mov	r0, r3
 8001326:	4621      	mov	r1, r4
 8001328:	f7ff fc58 	bl	8000bdc <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <parse+0x218>)
 8001330:	615a      	str	r2, [r3, #20]
    }
}
 8001332:	bf00      	nop
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	c083126f 	.word	0xc083126f
 8001344:	3ffda1ca 	.word	0x3ffda1ca
 8001348:	08007f78 	.word	0x08007f78
 800134c:	d1b71759 	.word	0xd1b71759
 8001350:	200008dc 	.word	0x200008dc
 8001354:	51eb851f 	.word	0x51eb851f
 8001358:	40590000 	.word	0x40590000

0800135c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001368:	f640 6214 	movw	r2, #3604	; 0xe14
 800136c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001376:	2201      	movs	r2, #1
 8001378:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_I2C1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_I2C1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_I2C1_Init+0x74>)
 800139a:	f001 fbb4 	bl	8002b06 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 faa8 	bl	80018f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013ac:	f001 ff16 	bl	80031dc <HAL_I2CEx_ConfigAnalogFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013b6:	f000 fa9f 	bl	80018f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013be:	f001 ff58 	bl	8003272 <HAL_I2CEx_ConfigDigitalFilter>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80013c8:	f000 fa96 	bl	80018f8 <Error_Handler>
  }

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200008f8 	.word	0x200008f8
 80013d4:	40005400 	.word	0x40005400

080013d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_I2C_MspInit+0x7c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d128      	bne.n	800144c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_I2C_MspInit+0x80>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a16      	ldr	r2, [pc, #88]	; (8001458 <HAL_I2C_MspInit+0x80>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_I2C_MspInit+0x80>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001412:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001418:	2312      	movs	r3, #18
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001424:	2304      	movs	r3, #4
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_I2C_MspInit+0x84>)
 8001430:	f001 f96e 	bl	8002710 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_I2C_MspInit+0x80>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_I2C_MspInit+0x80>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	6593      	str	r3, [r2, #88]	; 0x58
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_I2C_MspInit+0x80>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	b093      	sub	sp, #76	; 0x4c
 8001464:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001466:	f000 ff67 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146a:	f000 f82d 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146e:	f7ff fd85 	bl	8000f7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001472:	f000 fe51 	bl	8002118 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001476:	f000 fe7f 	bl	8002178 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800147a:	f7ff ff6f 	bl	800135c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800147e:	f7ff fdfb 	bl	8001078 <GPS_Init>
  ssd1306_Init(&hi2c1);
 8001482:	480f      	ldr	r0, [pc, #60]	; (80014c0 <main+0x60>)
 8001484:	f000 fab8 	bl	80019f8 <ssd1306_Init>
  menu_show(current_menu->name, hi2c1);
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <main+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4e0b      	ldr	r6, [pc, #44]	; (80014c0 <main+0x60>)
 8001492:	466d      	mov	r5, sp
 8001494:	f106 040c 	add.w	r4, r6, #12
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80014ac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fd33 	bl	8001f1c <menu_show>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button_check();
 80014b6:	f000 f8f1 	bl	800169c <button_check>
	  screen_refresh();
 80014ba:	f000 f8c1 	bl	8001640 <screen_refresh>
  {
 80014be:	e7fa      	b.n	80014b6 <main+0x56>
 80014c0:	200008f8 	.word	0x200008f8
 80014c4:	200000b4 	.word	0x200000b4

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0b8      	sub	sp, #224	; 0xe0
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d2:	2244      	movs	r2, #68	; 0x44
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 fafc 	bl	8005ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2288      	movs	r2, #136	; 0x88
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 faee 	bl	8005ad4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001506:	2310      	movs	r3, #16
 8001508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800151e:	230a      	movs	r3, #10
 8001520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001524:	2307      	movs	r3, #7
 8001526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800153a:	4618      	mov	r0, r3
 800153c:	f001 ff4a 	bl	80033d4 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001546:	f000 f9d7 	bl	80018f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001568:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800156c:	2104      	movs	r1, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fb16 	bl	8003ba0 <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800157a:	f000 f9bd 	bl	80018f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800157e:	2346      	movs	r3, #70	; 0x46
 8001580:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001586:	2300      	movs	r3, #0
 8001588:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800158a:	2300      	movs	r3, #0
 800158c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	4618      	mov	r0, r3
 8001592:	f002 fd09 	bl	8003fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800159c:	f000 f9ac 	bl	80018f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a4:	f001 fec0 	bl	8003328 <HAL_PWREx_ControlVoltageScaling>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80015ae:	f000 f9a3 	bl	80018f8 <Error_Handler>
  }
}
 80015b2:	bf00      	nop
 80015b4:	37e0      	adds	r7, #224	; 0xe0
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if(huart == GPS_USART)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_UART_RxCpltCallback+0x1c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_UART_RxCpltCallback+0x14>
	{
		GPS_CallBack();
 80015cc:	f7ff fd62 	bl	8001094 <GPS_CallBack>
	}
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000098c 	.word	0x2000098c

080015dc <debounce_button>:

uint8_t debounce_button(uint16_t GPIO_Pin)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(50);
 80015e6:	2032      	movs	r0, #50	; 0x32
 80015e8:	f000 ff1e 	bl	8002428 <HAL_Delay>
	if(!HAL_GPIO_ReadPin (GPIOA, GPIO_Pin))
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f001 fa34 	bl	8002a60 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <debounce_button+0x26>
		return 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <debounce_button+0x28>
	else
		return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <release_button>:

void release_button(uint16_t GPIO_Pin, uint8_t *state)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	80fb      	strh	r3, [r7, #6]
	if (*state && HAL_GPIO_ReadPin(GPIOA, GPIO_Pin))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <release_button+0x2c>
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f001 fa1a 	bl	8002a60 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <release_button+0x2c>
	{
		*state = 0;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
	}
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <screen_refresh>:

void screen_refresh(void)
{
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b091      	sub	sp, #68	; 0x44
 8001644:	af10      	add	r7, sp, #64	; 0x40
	if (data_display && (sec_status == GPS_data.UTC_Sec))
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <screen_refresh+0x48>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d018      	beq.n	8001680 <screen_refresh+0x40>
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <screen_refresh+0x4c>)
 8001650:	789a      	ldrb	r2, [r3, #2]
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <screen_refresh+0x50>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d112      	bne.n	8001680 <screen_refresh+0x40>
	{
		menu_show("***** ***", hi2c1);
 800165a:	4e0e      	ldr	r6, [pc, #56]	; (8001694 <screen_refresh+0x54>)
 800165c:	466d      	mov	r5, sp
 800165e:	f106 040c 	add.w	r4, r6, #12
 8001662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001672:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001676:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <screen_refresh+0x58>)
 800167c:	f000 fc4e 	bl	8001f1c <menu_show>
	}
}
 8001680:	bf00      	nop
 8001682:	3704      	adds	r7, #4
 8001684:	46bd      	mov	sp, r7
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001688:	200002b8 	.word	0x200002b8
 800168c:	200008dc 	.word	0x200008dc
 8001690:	20000988 	.word	0x20000988
 8001694:	200008f8 	.word	0x200008f8
 8001698:	08007f80 	.word	0x08007f80

0800169c <button_check>:

void button_check(void)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b093      	sub	sp, #76	; 0x4c
 80016a0:	af10      	add	r7, sp, #64	; 0x40
	if(!button_state[0] && !HAL_GPIO_ReadPin(GPIOA, button_child_Pin))
 80016a2:	4b8c      	ldr	r3, [pc, #560]	; (80018d4 <button_check+0x238>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d150      	bne.n	800174c <button_check+0xb0>
 80016aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f001 f9d5 	bl	8002a60 <HAL_GPIO_ReadPin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d147      	bne.n	800174c <button_check+0xb0>
	{
		sec_status = GPS_data.UTC_Sec;
 80016bc:	4b86      	ldr	r3, [pc, #536]	; (80018d8 <button_check+0x23c>)
 80016be:	789a      	ldrb	r2, [r3, #2]
 80016c0:	4b86      	ldr	r3, [pc, #536]	; (80018dc <button_check+0x240>)
 80016c2:	701a      	strb	r2, [r3, #0]
		button_state[0] = 1;
 80016c4:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <button_check+0x238>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
		if(debounce_button(button_child_Pin))
 80016ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016ce:	f7ff ff85 	bl	80015dc <debounce_button>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d039      	beq.n	800174c <button_check+0xb0>
		{
			if (current_menu->menu_f)
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <button_check+0x244>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01b      	beq.n	800171a <button_check+0x7e>
			{
				data_display = 1;
 80016e2:	4b80      	ldr	r3, [pc, #512]	; (80018e4 <button_check+0x248>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
				menu_show(current_menu->menu_f(), hi2c1);
 80016e8:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <button_check+0x244>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4798      	blx	r3
 80016f0:	4684      	mov	ip, r0
 80016f2:	4e7d      	ldr	r6, [pc, #500]	; (80018e8 <button_check+0x24c>)
 80016f4:	466d      	mov	r5, sp
 80016f6:	f106 040c 	add.w	r4, r6, #12
 80016fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001706:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800170a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800170e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001712:	4660      	mov	r0, ip
 8001714:	f000 fc02 	bl	8001f1c <menu_show>
 8001718:	e018      	b.n	800174c <button_check+0xb0>
			}
			else
			{
				menu_sw_child();
 800171a:	f000 f911 	bl	8001940 <menu_sw_child>
				menu_show(current_menu->name, hi2c1);
 800171e:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <button_check+0x244>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4e70      	ldr	r6, [pc, #448]	; (80018e8 <button_check+0x24c>)
 8001728:	466d      	mov	r5, sp
 800172a:	f106 040c 	add.w	r4, r6, #12
 800172e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800173e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001742:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fbe8 	bl	8001f1c <menu_show>
			}
		}
	}
	if(!button_state[1] && !HAL_GPIO_ReadPin(GPIOA, button_parrent_Pin))
 800174c:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <button_check+0x238>)
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d14a      	bne.n	80017ea <button_check+0x14e>
 8001754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f001 f980 	bl	8002a60 <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d141      	bne.n	80017ea <button_check+0x14e>
	{
		button_state[1] = 1;
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <button_check+0x238>)
 8001768:	2201      	movs	r2, #1
 800176a:	705a      	strb	r2, [r3, #1]
		if(debounce_button(button_parrent_Pin))
 800176c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001770:	f7ff ff34 	bl	80015dc <debounce_button>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d037      	beq.n	80017ea <button_check+0x14e>
		{
			if (data_display)
 800177a:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <button_check+0x248>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01a      	beq.n	80017b8 <button_check+0x11c>
			{
				data_display = 0;
 8001782:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <button_check+0x248>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
				menu_show(current_menu->name, hi2c1);
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <button_check+0x244>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	4e55      	ldr	r6, [pc, #340]	; (80018e8 <button_check+0x24c>)
 8001792:	466d      	mov	r5, sp
 8001794:	f106 040c 	add.w	r4, r6, #12
 8001798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017ac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fbb3 	bl	8001f1c <menu_show>
 80017b6:	e018      	b.n	80017ea <button_check+0x14e>
			}
			else
			{
				menu_sw_parent();
 80017b8:	f000 f8d6 	bl	8001968 <menu_sw_parent>
				menu_show(current_menu->name, hi2c1);
 80017bc:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <button_check+0x244>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4e48      	ldr	r6, [pc, #288]	; (80018e8 <button_check+0x24c>)
 80017c6:	466d      	mov	r5, sp
 80017c8:	f106 040c 	add.w	r4, r6, #12
 80017cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017e0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fb99 	bl	8001f1c <menu_show>
			}
		}
	}
	if(!button_state[2] && !HAL_GPIO_ReadPin(GPIOA, button_next_Pin))
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <button_check+0x238>)
 80017ec:	789b      	ldrb	r3, [r3, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d12b      	bne.n	800184a <button_check+0x1ae>
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f001 f931 	bl	8002a60 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d122      	bne.n	800184a <button_check+0x1ae>
	{
		button_state[2] = 1;
 8001804:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <button_check+0x238>)
 8001806:	2201      	movs	r2, #1
 8001808:	709a      	strb	r2, [r3, #2]
		if(debounce_button(button_next_Pin))
 800180a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800180e:	f7ff fee5 	bl	80015dc <debounce_button>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d018      	beq.n	800184a <button_check+0x1ae>
		{
			menu_sw_next();
 8001818:	f000 f876 	bl	8001908 <menu_sw_next>
			menu_show(current_menu->name, hi2c1);
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <button_check+0x244>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4e30      	ldr	r6, [pc, #192]	; (80018e8 <button_check+0x24c>)
 8001826:	466d      	mov	r5, sp
 8001828:	f106 040c 	add.w	r4, r6, #12
 800182c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800183c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001840:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fb69 	bl	8001f1c <menu_show>
		}
	}
	if(!button_state[3] && !HAL_GPIO_ReadPin(GPIOA, button_previous_Pin))
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <button_check+0x238>)
 800184c:	78db      	ldrb	r3, [r3, #3]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d129      	bne.n	80018a6 <button_check+0x20a>
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f001 f902 	bl	8002a60 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d121      	bne.n	80018a6 <button_check+0x20a>
	{
		button_state[3] = 1;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <button_check+0x238>)
 8001864:	2201      	movs	r2, #1
 8001866:	70da      	strb	r2, [r3, #3]
		if(debounce_button(button_previous_Pin))
 8001868:	2040      	movs	r0, #64	; 0x40
 800186a:	f7ff feb7 	bl	80015dc <debounce_button>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d018      	beq.n	80018a6 <button_check+0x20a>
		{
			menu_sw_previous();
 8001874:	f000 f856 	bl	8001924 <menu_sw_previous>
			menu_show(current_menu->name, hi2c1);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <button_check+0x244>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4e19      	ldr	r6, [pc, #100]	; (80018e8 <button_check+0x24c>)
 8001882:	466d      	mov	r5, sp
 8001884:	f106 040c 	add.w	r4, r6, #12
 8001888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001894:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800189c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fb3b 	bl	8001f1c <menu_show>
		}
	}

	release_button(button_child_Pin, &button_state[0]);
 80018a6:	490b      	ldr	r1, [pc, #44]	; (80018d4 <button_check+0x238>)
 80018a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018ac:	f7ff feae 	bl	800160c <release_button>
	release_button(button_parrent_Pin, &button_state[1]);
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <button_check+0x250>)
 80018b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018b6:	f7ff fea9 	bl	800160c <release_button>
	release_button(button_next_Pin, &button_state[2]);
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <button_check+0x254>)
 80018bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018c0:	f7ff fea4 	bl	800160c <release_button>
	release_button(button_previous_Pin, &button_state[3]);
 80018c4:	490b      	ldr	r1, [pc, #44]	; (80018f4 <button_check+0x258>)
 80018c6:	2040      	movs	r0, #64	; 0x40
 80018c8:	f7ff fea0 	bl	800160c <release_button>
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d4:	200002b4 	.word	0x200002b4
 80018d8:	200008dc 	.word	0x200008dc
 80018dc:	20000988 	.word	0x20000988
 80018e0:	200000b4 	.word	0x200000b4
 80018e4:	200002b8 	.word	0x200002b8
 80018e8:	200008f8 	.word	0x200008f8
 80018ec:	200002b5 	.word	0x200002b5
 80018f0:	200002b6 	.word	0x200002b6
 80018f4:	200002b7 	.word	0x200002b7

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <menu_sw_next>:
menu_t menu_speed = { "Speed", &menu_calendar, &menu_position, NULL, NULL, NULL };

menu_t *current_menu = &menu_calendar;

void menu_sw_next(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	current_menu = current_menu->next;
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <menu_sw_next+0x18>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a03      	ldr	r2, [pc, #12]	; (8001920 <menu_sw_next+0x18>)
 8001914:	6013      	str	r3, [r2, #0]
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	200000b4 	.word	0x200000b4

08001924 <menu_sw_previous>:

void menu_sw_previous(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	current_menu = current_menu->previous;
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <menu_sw_previous+0x18>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4a03      	ldr	r2, [pc, #12]	; (800193c <menu_sw_previous+0x18>)
 8001930:	6013      	str	r3, [r2, #0]
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	200000b4 	.word	0x200000b4

08001940 <menu_sw_child>:

void menu_sw_child(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	if (current_menu->child)
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <menu_sw_child+0x24>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <menu_sw_child+0x18>
	current_menu = current_menu->child;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <menu_sw_child+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <menu_sw_child+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200000b4 	.word	0x200000b4

08001968 <menu_sw_parent>:

void menu_sw_parent(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	if (current_menu->parent)
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <menu_sw_parent+0x24>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <menu_sw_parent+0x18>
		current_menu = current_menu->parent;
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <menu_sw_parent+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <menu_sw_parent+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	200000b4 	.word	0x200000b4

08001990 <display_time>:

const char *display_time(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af02      	add	r7, sp, #8
	static char data[10];
	sprintf((char *)data, "%i:%i:%i", GPS_data.UTC_Hour, GPS_data.UTC_Min, GPS_data.UTC_Sec);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <display_time+0x2c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <display_time+0x2c>)
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <display_time+0x2c>)
 80019a4:	789b      	ldrb	r3, [r3, #2]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	4905      	ldr	r1, [pc, #20]	; (80019c0 <display_time+0x30>)
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <display_time+0x34>)
 80019ae:	f004 f899 	bl	8005ae4 <siprintf>
	return &data[0];
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <display_time+0x34>)
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200008dc 	.word	0x200008dc
 80019c0:	08007fd4 	.word	0x08007fd4
 80019c4:	200002bc 	.word	0x200002bc

080019c8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af04      	add	r7, sp, #16
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80019d4:	230a      	movs	r3, #10
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	2301      	movs	r3, #1
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	1cfb      	adds	r3, r7, #3
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	2200      	movs	r2, #0
 80019e4:	2178      	movs	r1, #120	; 0x78
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f001 f91c 	bl	8002c24 <HAL_I2C_Mem_Write>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001a00:	2064      	movs	r0, #100	; 0x64
 8001a02:	f000 fd11 	bl	8002428 <HAL_Delay>
    int status = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001a0a:	21ae      	movs	r1, #174	; 0xae
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffdb 	bl	80019c8 <ssd1306_WriteCommand>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffd2 	bl	80019c8 <ssd1306_WriteCommand>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a2e:	2110      	movs	r1, #16
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffc9 	bl	80019c8 <ssd1306_WriteCommand>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001a40:	21b0      	movs	r1, #176	; 0xb0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffc0 	bl	80019c8 <ssd1306_WriteCommand>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001a52:	21c8      	movs	r1, #200	; 0xc8
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffb7 	bl	80019c8 <ssd1306_WriteCommand>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001a64:	2100      	movs	r1, #0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffae 	bl	80019c8 <ssd1306_WriteCommand>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001a76:	2110      	movs	r1, #16
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffa5 	bl	80019c8 <ssd1306_WriteCommand>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001a88:	2140      	movs	r1, #64	; 0x40
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff9c 	bl	80019c8 <ssd1306_WriteCommand>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001a9a:	2181      	movs	r1, #129	; 0x81
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff93 	bl	80019c8 <ssd1306_WriteCommand>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001aac:	21ff      	movs	r1, #255	; 0xff
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff8a 	bl	80019c8 <ssd1306_WriteCommand>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001abe:	21a1      	movs	r1, #161	; 0xa1
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff81 	bl	80019c8 <ssd1306_WriteCommand>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4413      	add	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001ad0:	21a6      	movs	r1, #166	; 0xa6
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff78 	bl	80019c8 <ssd1306_WriteCommand>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001ae2:	21a8      	movs	r1, #168	; 0xa8
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff6f 	bl	80019c8 <ssd1306_WriteCommand>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001af4:	213f      	movs	r1, #63	; 0x3f
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff66 	bl	80019c8 <ssd1306_WriteCommand>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b06:	21a4      	movs	r1, #164	; 0xa4
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff5d 	bl	80019c8 <ssd1306_WriteCommand>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001b18:	21d3      	movs	r1, #211	; 0xd3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff54 	bl	80019c8 <ssd1306_WriteCommand>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff4b 	bl	80019c8 <ssd1306_WriteCommand>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001b3c:	21d5      	movs	r1, #213	; 0xd5
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff42 	bl	80019c8 <ssd1306_WriteCommand>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001b4e:	21f0      	movs	r1, #240	; 0xf0
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff39 	bl	80019c8 <ssd1306_WriteCommand>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001b60:	21d9      	movs	r1, #217	; 0xd9
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff30 	bl	80019c8 <ssd1306_WriteCommand>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001b72:	2122      	movs	r1, #34	; 0x22
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff27 	bl	80019c8 <ssd1306_WriteCommand>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001b84:	21da      	movs	r1, #218	; 0xda
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff1e 	bl	80019c8 <ssd1306_WriteCommand>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001b96:	2112      	movs	r1, #18
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff15 	bl	80019c8 <ssd1306_WriteCommand>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001ba8:	21db      	movs	r1, #219	; 0xdb
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff0c 	bl	80019c8 <ssd1306_WriteCommand>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001bba:	2120      	movs	r1, #32
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff03 	bl	80019c8 <ssd1306_WriteCommand>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001bcc:	218d      	movs	r1, #141	; 0x8d
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fefa 	bl	80019c8 <ssd1306_WriteCommand>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001bde:	2114      	movs	r1, #20
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff fef1 	bl	80019c8 <ssd1306_WriteCommand>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001bf0:	21af      	movs	r1, #175	; 0xaf
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fee8 	bl	80019c8 <ssd1306_WriteCommand>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <ssd1306_Init+0x214>
        return 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00f      	b.n	8001c2c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f813 	bl	8001c38 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f832 	bl	8001c7c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <ssd1306_Init+0x23c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <ssd1306_Init+0x23c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <ssd1306_Init+0x23c>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	715a      	strb	r2, [r3, #5]

    return 0;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200006c8 	.word	0x200006c8

08001c38 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e00d      	b.n	8001c64 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <ssd1306_Fill+0x1a>
 8001c4e:	2100      	movs	r1, #0
 8001c50:	e000      	b.n	8001c54 <ssd1306_Fill+0x1c>
 8001c52:	21ff      	movs	r1, #255	; 0xff
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <ssd1306_Fill+0x40>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d3ed      	bcc.n	8001c48 <ssd1306_Fill+0x10>
    }
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	200002c8 	.word	0x200002c8

08001c7c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af04      	add	r7, sp, #16
 8001c82:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e020      	b.n	8001ccc <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	3b50      	subs	r3, #80	; 0x50
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fe98 	bl	80019c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fe94 	bl	80019c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fe90 	bl	80019c8 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	01db      	lsls	r3, r3, #7
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <ssd1306_UpdateScreen+0x60>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	2264      	movs	r2, #100	; 0x64
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2178      	movs	r1, #120	; 0x78
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 ffaf 	bl	8002c24 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b07      	cmp	r3, #7
 8001cd0:	d9db      	bls.n	8001c8a <ssd1306_UpdateScreen+0xe>
    }
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200002c8 	.word	0x200002c8

08001ce0 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	460b      	mov	r3, r1
 8001cec:	71bb      	strb	r3, [r7, #6]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db48      	blt.n	8001d8c <ssd1306_DrawPixel+0xac>
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	2b3f      	cmp	r3, #63	; 0x3f
 8001cfe:	d845      	bhi.n	8001d8c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <ssd1306_DrawPixel+0xb8>)
 8001d02:	791b      	ldrb	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001d08:	797b      	ldrb	r3, [r7, #5]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2301      	moveq	r3, #1
 8001d10:	2300      	movne	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001d16:	797b      	ldrb	r3, [r7, #5]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d11a      	bne.n	8001d52 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	b2d8      	uxtb	r0, r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <ssd1306_DrawPixel+0xbc>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	79bb      	ldrb	r3, [r7, #6]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b259      	sxtb	r1, r3
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	4603      	mov	r3, r0
 8001d46:	01db      	lsls	r3, r3, #7
 8001d48:	4413      	add	r3, r2
 8001d4a:	b2c9      	uxtb	r1, r1
 8001d4c:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <ssd1306_DrawPixel+0xbc>)
 8001d4e:	54d1      	strb	r1, [r2, r3]
 8001d50:	e01d      	b.n	8001d8e <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	79bb      	ldrb	r3, [r7, #6]
 8001d56:	08db      	lsrs	r3, r3, #3
 8001d58:	b2d8      	uxtb	r0, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	01db      	lsls	r3, r3, #7
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <ssd1306_DrawPixel+0xbc>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	b25a      	sxtb	r2, r3
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	b259      	sxtb	r1, r3
 8001d7c:	79fa      	ldrb	r2, [r7, #7]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	01db      	lsls	r3, r3, #7
 8001d82:	4413      	add	r3, r2
 8001d84:	b2c9      	uxtb	r1, r1
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <ssd1306_DrawPixel+0xbc>)
 8001d88:	54d1      	strb	r1, [r2, r3]
 8001d8a:	e000      	b.n	8001d8e <ssd1306_DrawPixel+0xae>
        return;
 8001d8c:	bf00      	nop
    }
}
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	200006c8 	.word	0x200006c8
 8001d9c:	200002c8 	.word	0x200002c8

08001da0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4604      	mov	r4, r0
 8001da8:	1d38      	adds	r0, r7, #4
 8001daa:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dae:	461a      	mov	r2, r3
 8001db0:	4623      	mov	r3, r4
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	4613      	mov	r3, r2
 8001db6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001db8:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	793b      	ldrb	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc4:	dc06      	bgt.n	8001dd4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001dc6:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001dc8:	885b      	ldrh	r3, [r3, #2]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	797b      	ldrb	r3, [r7, #5]
 8001dce:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001dd0:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd2:	dd01      	ble.n	8001dd8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e05d      	b.n	8001e94 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	e04c      	b.n	8001e78 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	3b20      	subs	r3, #32
 8001de4:	7979      	ldrb	r1, [r7, #5]
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	440b      	add	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	e034      	b.n	8001e68 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d012      	beq.n	8001e34 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	b2d8      	uxtb	r0, r3
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001e1e:	885b      	ldrh	r3, [r3, #2]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	7bba      	ldrb	r2, [r7, #14]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7ff ff57 	bl	8001ce0 <ssd1306_DrawPixel>
 8001e32:	e016      	b.n	8001e62 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	b2d8      	uxtb	r0, r3
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b2d9      	uxtb	r1, r3
 8001e50:	7bbb      	ldrb	r3, [r7, #14]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f7ff ff3f 	bl	8001ce0 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	793b      	ldrb	r3, [r7, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d3c5      	bcc.n	8001dfe <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	797b      	ldrb	r3, [r7, #5]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d3ad      	bcc.n	8001dde <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001e84:	881a      	ldrh	r2, [r3, #0]
 8001e86:	793b      	ldrb	r3, [r7, #4]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <ssd1306_WriteChar+0xfc>)
 8001e90:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3724      	adds	r7, #36	; 0x24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	200006c8 	.word	0x200006c8

08001ea0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	1d38      	adds	r0, r7, #4
 8001eaa:	e880 0006 	stmia.w	r0, {r1, r2}
 8001eae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001eb0:	e012      	b.n	8001ed8 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	7818      	ldrb	r0, [r3, #0]
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	1d3a      	adds	r2, r7, #4
 8001eba:	ca06      	ldmia	r2, {r1, r2}
 8001ebc:	f7ff ff70 	bl	8001da0 <ssd1306_WriteChar>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d002      	beq.n	8001ed2 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	e008      	b.n	8001ee4 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e8      	bne.n	8001eb2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <ssd1306_SetCursor+0x2c>)
 8001f02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <ssd1306_SetCursor+0x2c>)
 8001f0a:	805a      	strh	r2, [r3, #2]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	200006c8 	.word	0x200006c8

08001f1c <menu_show>:

void menu_show(char *word, I2C_HandleTypeDef hi2c)
{
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	f107 0014 	add.w	r0, r7, #20
 8001f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ssd1306_Fill(Black);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff fe82 	bl	8001c38 <ssd1306_Fill>
	ssd1306_SetCursor(0, 30);
 8001f34:	211e      	movs	r1, #30
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff ffd8 	bl	8001eec <ssd1306_SetCursor>
	ssd1306_WriteString(word, Font_11x18, White);
 8001f3c:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <menu_show+0x44>)
 8001f3e:	2301      	movs	r3, #1
 8001f40:	ca06      	ldmia	r2, {r1, r2}
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffac 	bl	8001ea0 <ssd1306_WriteString>
	ssd1306_UpdateScreen(&hi2c);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fe95 	bl	8001c7c <ssd1306_UpdateScreen>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f5c:	b004      	add	sp, #16
 8001f5e:	4770      	bx	lr
 8001f60:	20000000 	.word	0x20000000

08001f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6613      	str	r3, [r2, #96]	; 0x60
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_MspInit+0x44>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 f9f4 	bl	80023ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <USART2_IRQHandler+0x10>)
 800200e:	f002 fdff 	bl	8004c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000a0c 	.word	0x20000a0c

0800201c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <USART3_IRQHandler+0x10>)
 8002022:	f002 fdf5 	bl	8004c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000098c 	.word	0x2000098c

08002030 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002038:	f000 fd42 	bl	8002ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <_sbrk+0x5c>)
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <_sbrk+0x60>)
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x64>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_sbrk+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002070:	f003 fd06 	bl	8005a80 <__errno>
 8002074:	4602      	mov	r2, r0
 8002076:	230c      	movs	r3, #12
 8002078:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e009      	b.n	8002094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_sbrk+0x64>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20018000 	.word	0x20018000
 80020a0:	00000400 	.word	0x00000400
 80020a4:	200006d0 	.word	0x200006d0
 80020a8:	20000a98 	.word	0x20000a98

080020ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <SystemInit+0x64>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a16      	ldr	r2, [pc, #88]	; (8002110 <SystemInit+0x64>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <SystemInit+0x68>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <SystemInit+0x68>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <SystemInit+0x68>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <SystemInit+0x68>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <SystemInit+0x68>)
 80020d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <SystemInit+0x68>)
 80020e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <SystemInit+0x68>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <SystemInit+0x68>)
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <SystemInit+0x68>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SystemInit+0x64>)
 80020fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002102:	609a      	str	r2, [r3, #8]
#endif
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00
 8002114:	40021000 	.word	0x40021000

08002118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_USART2_UART_Init+0x5c>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800215c:	f002 fbd4 	bl	8004908 <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002166:	f7ff fbc7 	bl	80018f8 <Error_Handler>
  }

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000a0c 	.word	0x20000a0c
 8002174:	40004400 	.word	0x40004400

08002178 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <MX_USART3_UART_Init+0x5c>)
 8002180:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 8002184:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002188:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_USART3_UART_Init+0x58>)
 80021bc:	f002 fba4 	bl	8004908 <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021c6:	f7ff fb97 	bl	80018f8 <Error_Handler>
  }

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000098c 	.word	0x2000098c
 80021d4:	40004800 	.word	0x40004800

080021d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a37      	ldr	r2, [pc, #220]	; (80022d4 <HAL_UART_MspInit+0xfc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d131      	bne.n	800225e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_UART_MspInit+0x100>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	4a36      	ldr	r2, [pc, #216]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	6593      	str	r3, [r2, #88]	; 0x58
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800222a:	230c      	movs	r3, #12
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223a:	2307      	movs	r3, #7
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002248:	f000 fa62 	bl	8002710 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	2026      	movs	r0, #38	; 0x26
 8002252:	f000 f9e6 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002256:	2026      	movs	r0, #38	; 0x26
 8002258:	f000 f9ff 	bl	800265a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800225c:	e035      	b.n	80022ca <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <HAL_UART_MspInit+0x104>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d130      	bne.n	80022ca <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_UART_MspInit+0x100>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_UART_MspInit+0x100>)
 800226e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_UART_MspInit+0x100>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_UART_MspInit+0x100>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8002298:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a6:	2303      	movs	r3, #3
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022aa:	2307      	movs	r3, #7
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	480a      	ldr	r0, [pc, #40]	; (80022e0 <HAL_UART_MspInit+0x108>)
 80022b6:	f000 fa2b 	bl	8002710 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2027      	movs	r0, #39	; 0x27
 80022c0:	f000 f9af 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022c4:	2027      	movs	r0, #39	; 0x27
 80022c6:	f000 f9c8 	bl	800265a <HAL_NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3730      	adds	r7, #48	; 0x30
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40004800 	.word	0x40004800
 80022e0:	48000800 	.word	0x48000800

080022e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022ea:	e003      	b.n	80022f4 <LoopCopyDataInit>

080022ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022f2:	3104      	adds	r1, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <LoopForever+0xa>)
	ldr	r3, =_edata
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022fc:	d3f6      	bcc.n	80022ec <CopyDataInit>
	ldr	r2, =_sbss
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002300:	e002      	b.n	8002308 <LoopFillZerobss>

08002302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002302:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002304:	f842 3b04 	str.w	r3, [r2], #4

08002308 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <LoopForever+0x16>)
	cmp	r2, r3
 800230a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800230c:	d3f9      	bcc.n	8002302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800230e:	f7ff fecd 	bl	80020ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f003 fbbb 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002316:	f7ff f8a3 	bl	8001460 <main>

0800231a <LoopForever>:

LoopForever:
    b LoopForever
 800231a:	e7fe      	b.n	800231a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800231c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002320:	08009030 	.word	0x08009030
	ldr	r0, =_sdata
 8002324:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002328:	20000294 	.word	0x20000294
	ldr	r2, =_sbss
 800232c:	20000294 	.word	0x20000294
	ldr	r3, = _ebss
 8002330:	20000a94 	.word	0x20000a94

08002334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC1_2_IRQHandler>
	...

08002338 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_Init+0x3c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <HAL_Init+0x3c>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234e:	2003      	movs	r0, #3
 8002350:	f000 f95c 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002354:	2000      	movs	r0, #0
 8002356:	f000 f80f 	bl	8002378 <HAL_InitTick>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	e001      	b.n	800236a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002366:	f7ff fdfd 	bl	8001f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800236a:	79fb      	ldrb	r3, [r7, #7]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_InitTick+0x68>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d022      	beq.n	80023d2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_InitTick+0x6c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_InitTick+0x68>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002398:	fbb1 f3f3 	udiv	r3, r1, r3
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f968 	bl	8002676 <HAL_SYSTICK_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10f      	bne.n	80023cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	d809      	bhi.n	80023c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b2:	2200      	movs	r2, #0
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ba:	f000 f932 	bl	8002622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_InitTick+0x70>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	e007      	b.n	80023d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e004      	b.n	80023d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e001      	b.n	80023d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200000c0 	.word	0x200000c0
 80023e4:	200000b8 	.word	0x200000b8
 80023e8:	200000bc 	.word	0x200000bc

080023ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_IncTick+0x1c>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_IncTick+0x20>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a03      	ldr	r2, [pc, #12]	; (8002408 <HAL_IncTick+0x1c>)
 80023fc:	6013      	str	r3, [r2, #0]
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	20000a8c 	.word	0x20000a8c
 800240c:	200000c0 	.word	0x200000c0

08002410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return uwTick;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_GetTick+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000a8c 	.word	0x20000a8c

08002428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff ffee 	bl	8002410 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d004      	beq.n	800244c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_Delay+0x40>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244c:	bf00      	nop
 800244e:	f7ff ffdf 	bl	8002410 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	429a      	cmp	r2, r3
 800245c:	d8f7      	bhi.n	800244e <HAL_Delay+0x26>
  {
  }
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200000c0 	.word	0x200000c0

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d005      	beq.n	80026b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2204      	movs	r2, #4
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e029      	b.n	8002706 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 020e 	bic.w	r2, r2, #14
 80026c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f003 021c 	and.w	r2, r3, #28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
    }
  }
  return status;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271e:	e17f      	b.n	8002a20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8171 	beq.w	8002a1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d00b      	beq.n	8002758 <HAL_GPIO_Init+0x48>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d007      	beq.n	8002758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800274c:	2b11      	cmp	r3, #17
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b12      	cmp	r3, #18
 8002756:	d130      	bne.n	80027ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800278e:	2201      	movs	r2, #1
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0201 	and.w	r2, r3, #1
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d118      	bne.n	80027f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027cc:	2201      	movs	r2, #1
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	f003 0201 	and.w	r2, r3, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x128>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d123      	bne.n	8002880 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	6939      	ldr	r1, [r7, #16]
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80ac 	beq.w	8002a1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <HAL_GPIO_Init+0x32c>)
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	4a5d      	ldr	r2, [pc, #372]	; (8002a3c <HAL_GPIO_Init+0x32c>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6613      	str	r3, [r2, #96]	; 0x60
 80028ce:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <HAL_GPIO_Init+0x32c>)
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028da:	4a59      	ldr	r2, [pc, #356]	; (8002a40 <HAL_GPIO_Init+0x330>)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x242>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_GPIO_Init+0x334>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x23e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <HAL_GPIO_Init+0x338>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x23a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_GPIO_Init+0x33c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x236>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_GPIO_Init+0x340>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x232>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <HAL_GPIO_Init+0x344>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x22e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a49      	ldr	r2, [pc, #292]	; (8002a58 <HAL_GPIO_Init+0x348>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x22a>
 8002936:	2306      	movs	r3, #6
 8002938:	e00c      	b.n	8002954 <HAL_GPIO_Init+0x244>
 800293a:	2307      	movs	r3, #7
 800293c:	e00a      	b.n	8002954 <HAL_GPIO_Init+0x244>
 800293e:	2305      	movs	r3, #5
 8002940:	e008      	b.n	8002954 <HAL_GPIO_Init+0x244>
 8002942:	2304      	movs	r3, #4
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x244>
 8002946:	2303      	movs	r3, #3
 8002948:	e004      	b.n	8002954 <HAL_GPIO_Init+0x244>
 800294a:	2302      	movs	r3, #2
 800294c:	e002      	b.n	8002954 <HAL_GPIO_Init+0x244>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_GPIO_Init+0x244>
 8002952:	2300      	movs	r3, #0
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	f002 0203 	and.w	r2, r2, #3
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	4093      	lsls	r3, r2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002964:	4936      	ldr	r1, [pc, #216]	; (8002a40 <HAL_GPIO_Init+0x330>)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3302      	adds	r3, #2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002996:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029c0:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f47f ae78 	bne.w	8002720 <HAL_GPIO_Init+0x10>
  }
}
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010000 	.word	0x40010000
 8002a44:	48000400 	.word	0x48000400
 8002a48:	48000800 	.word	0x48000800
 8002a4c:	48000c00 	.word	0x48000c00
 8002a50:	48001000 	.word	0x48001000
 8002a54:	48001400 	.word	0x48001400
 8002a58:	48001800 	.word	0x48001800
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	e001      	b.n	8002a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad6:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f806 	bl	8002af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40010400 	.word	0x40010400

08002af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e081      	b.n	8002c1c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe fc53 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2224      	movs	r2, #36	; 0x24
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	e006      	b.n	8002b8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d104      	bne.n	8002ba0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	ea42 0103 	orr.w	r1, r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69d9      	ldr	r1, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	460b      	mov	r3, r1
 8002c38:	813b      	strh	r3, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	f040 80f9 	bne.w	8002e3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x34>
 8002c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0ed      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_Mem_Write+0x4e>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0e6      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c7a:	f7ff fbc9 	bl	8002410 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2319      	movs	r3, #25
 8002c86:	2201      	movs	r2, #1
 8002c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f955 	bl	8002f3c <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0d1      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2221      	movs	r2, #33	; 0x21
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc4:	88f8      	ldrh	r0, [r7, #6]
 8002cc6:	893a      	ldrh	r2, [r7, #8]
 8002cc8:	8979      	ldrh	r1, [r7, #10]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f8b9 	bl	8002e4c <I2C_RequestMemoryWrite>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0a9      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2bff      	cmp	r3, #255	; 0xff
 8002cf4:	d90e      	bls.n	8002d14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	22ff      	movs	r2, #255	; 0xff
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	8979      	ldrh	r1, [r7, #10]
 8002d04:	2300      	movs	r3, #0
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fa37 	bl	8003180 <I2C_TransferConfig>
 8002d12:	e00f      	b.n	8002d34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	8979      	ldrh	r1, [r7, #10]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa26 	bl	8003180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f93f 	bl	8002fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e07b      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d034      	beq.n	8002dec <HAL_I2C_Mem_Write+0x1c8>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d130      	bne.n	8002dec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f8d1 	bl	8002f3c <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e04d      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2bff      	cmp	r3, #255	; 0xff
 8002dac:	d90e      	bls.n	8002dcc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	22ff      	movs	r2, #255	; 0xff
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f9db 	bl	8003180 <I2C_TransferConfig>
 8002dca:	e00f      	b.n	8002dec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	2300      	movs	r3, #0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f9ca 	bl	8003180 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d19e      	bne.n	8002d34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f91e 	bl	800303c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e01a      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_I2C_Mem_Write+0x224>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	fe00e800 	.word	0xfe00e800

08002e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <I2C_RequestMemoryWrite+0xa4>)
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f983 	bl	8003180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f89c 	bl	8002fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02c      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9e:	e015      	b.n	8002ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f882 	bl	8002fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e012      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f830 	bl	8002f3c <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	80002000 	.word	0x80002000

08002ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d103      	bne.n	8002f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d007      	beq.n	8002f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	619a      	str	r2, [r3, #24]
  }
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4c:	e022      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d01e      	beq.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7ff fa5b 	bl	8002410 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d113      	bne.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e00f      	b.n	8002fb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d0cd      	beq.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fc8:	e02c      	b.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f870 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e02a      	b.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d01e      	beq.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7ff fa13 	bl	8002410 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d113      	bne.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e007      	b.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d1cb      	bne.n	8002fca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003048:	e028      	b.n	800309c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f830 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e026      	b.n	80030ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7ff f9d7 	bl	8002410 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d113      	bne.n	800309c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d1cf      	bne.n	800304a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d151      	bne.n	8003172 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ce:	e022      	b.n	8003116 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d01e      	beq.n	8003116 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d8:	f7ff f99a 	bl	8002410 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d302      	bcc.n	80030ee <I2C_IsAcknowledgeFailed+0x3a>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d113      	bne.n	8003116 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02e      	b.n	8003174 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d1d5      	bne.n	80030d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2210      	movs	r2, #16
 800312a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2220      	movs	r2, #32
 8003132:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff fedd 	bl	8002ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <I2C_IsAcknowledgeFailed+0xc8>)
 8003146:	400b      	ands	r3, r1
 8003148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	fe00e800 	.word	0xfe00e800

08003180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	4613      	mov	r3, r2
 8003190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	0d5b      	lsrs	r3, r3, #21
 800319c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <I2C_TransferConfig+0x58>)
 80031a2:	430b      	orrs	r3, r1
 80031a4:	43db      	mvns	r3, r3
 80031a6:	ea02 0103 	and.w	r1, r2, r3
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031b0:	7a7b      	ldrb	r3, [r7, #9]
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	431a      	orrs	r2, r3
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	03ff63ff 	.word	0x03ff63ff

080031dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d138      	bne.n	8003264 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e032      	b.n	8003266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800322e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b20      	cmp	r3, #32
 8003286:	d139      	bne.n	80032fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003292:	2302      	movs	r3, #2
 8003294:	e033      	b.n	80032fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2224      	movs	r2, #36	; 0x24
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_PWREx_GetVoltageRange+0x18>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40007000 	.word	0x40007000

08003328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003336:	d130      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003344:	d038      	beq.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2232      	movs	r2, #50	; 0x32
 800335c:	fb02 f303 	mul.w	r3, r2, r3
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	0c9b      	lsrs	r3, r3, #18
 8003368:	3301      	adds	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336c:	e002      	b.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3b01      	subs	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003380:	d102      	bne.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f2      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003394:	d110      	bne.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e00f      	b.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a6:	d007      	beq.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b0:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40007000 	.word	0x40007000
 80033cc:	200000b8 	.word	0x200000b8
 80033d0:	431bde83 	.word	0x431bde83

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e3d4      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e6:	4ba1      	ldr	r3, [pc, #644]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f0:	4b9e      	ldr	r3, [pc, #632]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80e4 	beq.w	80035d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_RCC_OscConfig+0x4a>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	f040 808b 	bne.w	800352c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 8087 	bne.w	800352c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800341e:	4b93      	ldr	r3, [pc, #588]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e3ac      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1a      	ldr	r2, [r3, #32]
 800343a:	4b8c      	ldr	r3, [pc, #560]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_RCC_OscConfig+0x7c>
 8003446:	4b89      	ldr	r3, [pc, #548]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344e:	e005      	b.n	800345c <HAL_RCC_OscConfig+0x88>
 8003450:	4b86      	ldr	r3, [pc, #536]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345c:	4293      	cmp	r3, r2
 800345e:	d223      	bcs.n	80034a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fd3f 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e38d      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4b7d      	ldr	r3, [pc, #500]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7c      	ldr	r2, [pc, #496]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b7a      	ldr	r3, [pc, #488]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4977      	ldr	r1, [pc, #476]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	4972      	ldr	r1, [pc, #456]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
 80034a6:	e025      	b.n	80034f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a8:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6f      	ldr	r2, [pc, #444]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034ae:	f043 0308 	orr.w	r3, r3, #8
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	496a      	ldr	r1, [pc, #424]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c6:	4b69      	ldr	r3, [pc, #420]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	4965      	ldr	r1, [pc, #404]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fcff 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e34d      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f4:	f000 fc36 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 80034f8:	4601      	mov	r1, r0
 80034fa:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	4a5a      	ldr	r2, [pc, #360]	; (8003670 <HAL_RCC_OscConfig+0x29c>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	fa21 f303 	lsr.w	r3, r1, r3
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_OscConfig+0x2a0>)
 8003512:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003514:	4b58      	ldr	r3, [pc, #352]	; (8003678 <HAL_RCC_OscConfig+0x2a4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe ff2d 	bl	8002378 <HAL_InitTick>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d052      	beq.n	80035ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	e331      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d032      	beq.n	800359a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003534:	4b4d      	ldr	r3, [pc, #308]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4c      	ldr	r2, [pc, #304]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003540:	f7fe ff66 	bl	8002410 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003548:	f7fe ff62 	bl	8002410 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e31a      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a40      	ldr	r2, [pc, #256]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b3e      	ldr	r3, [pc, #248]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	493b      	ldr	r1, [pc, #236]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003584:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	4936      	ldr	r1, [pc, #216]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
 8003598:	e01a      	b.n	80035d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800359a:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a33      	ldr	r2, [pc, #204]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035a6:	f7fe ff33 	bl	8002410 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ae:	f7fe ff2f 	bl	8002410 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e2e7      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x1da>
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d074      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d005      	beq.n	80035ee <HAL_RCC_OscConfig+0x21a>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d10e      	bne.n	8003606 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d10b      	bne.n	8003606 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_RCC_OscConfig+0x298>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d064      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d160      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e2c4      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x24a>
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	e01d      	b.n	800365a <HAL_RCC_OscConfig+0x286>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003626:	d10c      	bne.n	8003642 <HAL_RCC_OscConfig+0x26e>
 8003628:	4b10      	ldr	r3, [pc, #64]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0f      	ldr	r2, [pc, #60]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800362e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0c      	ldr	r2, [pc, #48]	; (800366c <HAL_RCC_OscConfig+0x298>)
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e00b      	b.n	800365a <HAL_RCC_OscConfig+0x286>
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a06      	ldr	r2, [pc, #24]	; (800366c <HAL_RCC_OscConfig+0x298>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01c      	beq.n	800369c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe fed5 	bl	8002410 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003668:	e011      	b.n	800368e <HAL_RCC_OscConfig+0x2ba>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	08008d3c 	.word	0x08008d3c
 8003674:	200000b8 	.word	0x200000b8
 8003678:	200000bc 	.word	0x200000bc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800367c:	f7fe fec8 	bl	8002410 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e280      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368e:	4baf      	ldr	r3, [pc, #700]	; (800394c <HAL_RCC_OscConfig+0x578>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x2a8>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe feb8 	bl	8002410 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a4:	f7fe feb4 	bl	8002410 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e26c      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b6:	4ba5      	ldr	r3, [pc, #660]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d0>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d060      	beq.n	8003794 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_OscConfig+0x310>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d116      	bne.n	8003712 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e4:	4b99      	ldr	r3, [pc, #612]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_OscConfig+0x328>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e249      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b93      	ldr	r3, [pc, #588]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	4990      	ldr	r1, [pc, #576]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003710:	e040      	b.n	8003794 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d023      	beq.n	8003762 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371a:	4b8c      	ldr	r3, [pc, #560]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a8b      	ldr	r2, [pc, #556]	; (800394c <HAL_RCC_OscConfig+0x578>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7fe fe73 	bl	8002410 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372e:	f7fe fe6f 	bl	8002410 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e227      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003740:	4b82      	ldr	r3, [pc, #520]	; (800394c <HAL_RCC_OscConfig+0x578>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	497c      	ldr	r1, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
 8003760:	e018      	b.n	8003794 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b7a      	ldr	r3, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x578>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a79      	ldr	r2, [pc, #484]	; (800394c <HAL_RCC_OscConfig+0x578>)
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fe fe4f 	bl	8002410 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7fe fe4b 	bl	8002410 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e203      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003788:	4b70      	ldr	r3, [pc, #448]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d03c      	beq.n	800381a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a8:	4b68      	ldr	r3, [pc, #416]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	4a67      	ldr	r2, [pc, #412]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fe fe2a 	bl	8002410 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c0:	f7fe fe26 	bl	8002410 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1de      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d2:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80037d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ef      	beq.n	80037c0 <HAL_RCC_OscConfig+0x3ec>
 80037e0:	e01b      	b.n	800381a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e2:	4b5a      	ldr	r3, [pc, #360]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe fe0d 	bl	8002410 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fe09 	bl	8002410 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1c1      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800380c:	4b4f      	ldr	r3, [pc, #316]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ef      	bne.n	80037fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80a6 	beq.w	8003974 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003838:	4b44      	ldr	r3, [pc, #272]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	4a43      	ldr	r2, [pc, #268]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003842:	6593      	str	r3, [r2, #88]	; 0x58
 8003844:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_OscConfig+0x578>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003850:	2301      	movs	r3, #1
 8003852:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003854:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <HAL_RCC_OscConfig+0x57c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d118      	bne.n	8003892 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003860:	4b3b      	ldr	r3, [pc, #236]	; (8003950 <HAL_RCC_OscConfig+0x57c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3a      	ldr	r2, [pc, #232]	; (8003950 <HAL_RCC_OscConfig+0x57c>)
 8003866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386c:	f7fe fdd0 	bl	8002410 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003874:	f7fe fdcc 	bl	8002410 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e184      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x57c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d108      	bne.n	80038ac <HAL_RCC_OscConfig+0x4d8>
 800389a:	4b2c      	ldr	r3, [pc, #176]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038aa:	e024      	b.n	80038f6 <HAL_RCC_OscConfig+0x522>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d110      	bne.n	80038d6 <HAL_RCC_OscConfig+0x502>
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c4:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	4a20      	ldr	r2, [pc, #128]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d4:	e00f      	b.n	80038f6 <HAL_RCC_OscConfig+0x522>
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e6:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_RCC_OscConfig+0x578>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fe fd87 	bl	8002410 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fe fd83 	bl	8002410 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e139      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_OscConfig+0x578>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ed      	beq.n	8003906 <HAL_RCC_OscConfig+0x532>
 800392a:	e01a      	b.n	8003962 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fe fd70 	bl	8002410 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003932:	e00f      	b.n	8003954 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7fe fd6c 	bl	8002410 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d906      	bls.n	8003954 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e122      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003954:	4b90      	ldr	r3, [pc, #576]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e8      	bne.n	8003934 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003962:	7ffb      	ldrb	r3, [r7, #31]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003968:	4b8b      	ldr	r3, [pc, #556]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	4a8a      	ldr	r2, [pc, #552]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 800396e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003972:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8108 	beq.w	8003b8e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	2b02      	cmp	r3, #2
 8003984:	f040 80d0 	bne.w	8003b28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003988:	4b83      	ldr	r3, [pc, #524]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0203 	and.w	r2, r3, #3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	429a      	cmp	r2, r3
 800399a:	d130      	bne.n	80039fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	3b01      	subs	r3, #1
 80039a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d127      	bne.n	80039fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d11f      	bne.n	80039fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c8:	2a07      	cmp	r2, #7
 80039ca:	bf14      	ite	ne
 80039cc:	2201      	movne	r2, #1
 80039ce:	2200      	moveq	r2, #0
 80039d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d113      	bne.n	80039fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	3b01      	subs	r3, #1
 80039e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	3b01      	subs	r3, #1
 80039f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d06e      	beq.n	8003adc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d069      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a04:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a10:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0b7      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a20:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2c:	f7fe fcf0 	bl	8002410 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fe fcec 	bl	8002410 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0a4      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a46:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a52:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <HAL_RCC_OscConfig+0x7c8>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a62:	3a01      	subs	r2, #1
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a6c:	0212      	lsls	r2, r2, #8
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a74:	0852      	lsrs	r2, r2, #1
 8003a76:	3a01      	subs	r2, #1
 8003a78:	0552      	lsls	r2, r2, #21
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0652      	lsls	r2, r2, #25
 8003a86:	4311      	orrs	r1, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a8c:	0912      	lsrs	r2, r2, #4
 8003a8e:	0452      	lsls	r2, r2, #17
 8003a90:	430a      	orrs	r2, r1
 8003a92:	4941      	ldr	r1, [pc, #260]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a98:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a3e      	ldr	r2, [pc, #248]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab0:	f7fe fcae 	bl	8002410 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fe fcaa 	bl	8002410 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e062      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad6:	e05a      	b.n	8003b8e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e059      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003adc:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d152      	bne.n	8003b8e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af4:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a27      	ldr	r2, [pc, #156]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b00:	f7fe fc86 	bl	8002410 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fe fc82 	bl	8002410 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e03a      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x734>
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d02d      	beq.n	8003b8a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b46:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b4c:	f023 0303 	bic.w	r3, r3, #3
 8003b50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe fc55 	bl	8002410 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fc51 	bl	8002410 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e009      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_OscConfig+0x7c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x796>
 8003b88:	e001      	b.n	8003b8e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	f99d808c 	.word	0xf99d808c

08003ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0c8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d910      	bls.n	8003be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 0207 	bic.w	r2, r3, #7
 8003bca:	4961      	ldr	r1, [pc, #388]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0b0      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d04c      	beq.n	8003c8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b56      	ldr	r3, [pc, #344]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d121      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e09e      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d115      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e092      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c28:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e086      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c38:	4b46      	ldr	r3, [pc, #280]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e07e      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c48:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 0203 	bic.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	493f      	ldr	r1, [pc, #252]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5a:	f7fe fbd9 	bl	8002410 <HAL_GetTick>
 8003c5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c62:	f7fe fbd5 	bl	8002410 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e066      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 020c 	and.w	r2, r3, #12
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d1eb      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	492c      	ldr	r1, [pc, #176]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d210      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0207 	bic.w	r2, r3, #7
 8003cbe:	4924      	ldr	r1, [pc, #144]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1b0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e036      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4918      	ldr	r1, [pc, #96]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4910      	ldr	r1, [pc, #64]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d16:	f000 f825 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_RCC_ClockConfig+0x1b4>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	5cd3      	ldrb	r3, [r2, r3]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fb1c 	bl	8002378 <HAL_InitTick>
 8003d40:	4603      	mov	r3, r0
 8003d42:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d44:	7afb      	ldrb	r3, [r7, #11]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08008d3c 	.word	0x08008d3c
 8003d5c:	200000b8 	.word	0x200000b8
 8003d60:	200000bc 	.word	0x200000bc

08003d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7c:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d121      	bne.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d11e      	bne.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d98:	4b33      	ldr	r3, [pc, #204]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d107      	bne.n	8003db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003da4:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e005      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003db4:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d102      	bne.n	8003de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ddc:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e004      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003de8:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d133      	bne.n	8003e5a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa4>
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0xaa>
 8003e06:	e005      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e0a:	617b      	str	r3, [r7, #20]
      break;
 8003e0c:	e005      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e10:	617b      	str	r3, [r7, #20]
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	617b      	str	r3, [r7, #20]
      break;
 8003e18:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	3301      	adds	r3, #1
 8003e26:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	fb02 f203 	mul.w	r2, r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	0e5b      	lsrs	r3, r3, #25
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3724      	adds	r7, #36	; 0x24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08008d54 	.word	0x08008d54
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	200000b8 	.word	0x200000b8

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e94:	f7ff fff0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	08008d4c 	.word	0x08008d4c

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ec0:	f7ff ffda 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0adb      	lsrs	r3, r3, #11
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	08008d4c 	.word	0x08008d4c

08003ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f00:	f7ff fa04 	bl	800330c <HAL_PWREx_GetVoltageRange>
 8003f04:	6178      	str	r0, [r7, #20]
 8003f06:	e014      	b.n	8003f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6593      	str	r3, [r2, #88]	; 0x58
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f20:	f7ff f9f4 	bl	800330c <HAL_PWREx_GetVoltageRange>
 8003f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f38:	d10b      	bne.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d919      	bls.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2ba0      	cmp	r3, #160	; 0xa0
 8003f44:	d902      	bls.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f46:	2302      	movs	r3, #2
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e013      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	e010      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d902      	bls.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f58:	2303      	movs	r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e00a      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d102      	bne.n	8003f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f64:	2302      	movs	r3, #2
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	e004      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d101      	bne.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f70:	2301      	movs	r3, #1
 8003f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 0207 	bic.w	r2, r3, #7
 8003f7c:	4909      	ldr	r1, [pc, #36]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40022000 	.word	0x40022000

08003fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03f      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d01c      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd2:	d802      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003fd8:	e01f      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fde:	d003      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fe4:	d01c      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003fe6:	e018      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe8:	4b85      	ldr	r3, [pc, #532]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a84      	ldr	r2, [pc, #528]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ff4:	e015      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fab9 	bl	8004574 <RCCEx_PLLSAI1_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004006:	e00c      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3320      	adds	r3, #32
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fba0 	bl	8004754 <RCCEx_PLLSAI2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	74fb      	strb	r3, [r7, #19]
      break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004028:	4b75      	ldr	r3, [pc, #468]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004036:	4972      	ldr	r1, [pc, #456]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d03f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004058:	d01c      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800405a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800405e:	d802      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00e      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004064:	e01f      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800406a:	d003      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800406c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004070:	d01c      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004072:	e018      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004074:	4b62      	ldr	r3, [pc, #392]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a61      	ldr	r2, [pc, #388]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800407a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004080:	e015      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fa73 	bl	8004574 <RCCEx_PLLSAI1_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004092:	e00c      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3320      	adds	r3, #32
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb5a 	bl	8004754 <RCCEx_PLLSAI2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	74fb      	strb	r3, [r7, #19]
      break;
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80040ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040b4:	4b52      	ldr	r3, [pc, #328]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c2:	494f      	ldr	r1, [pc, #316]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040ca:	e001      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a0 	beq.w	800421e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00d      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b41      	ldr	r3, [pc, #260]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	4a40      	ldr	r2, [pc, #256]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004102:	6593      	str	r3, [r2, #88]	; 0x58
 8004104:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004114:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a3a      	ldr	r2, [pc, #232]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004120:	f7fe f976 	bl	8002410 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004126:	e009      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004128:	f7fe f972 	bl	8002410 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	74fb      	strb	r3, [r7, #19]
        break;
 800413a:	e005      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800413c:	4b31      	ldr	r3, [pc, #196]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d15c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004158:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01f      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	429a      	cmp	r2, r3
 800416a:	d019      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800416c:	4b24      	ldr	r3, [pc, #144]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	4a20      	ldr	r2, [pc, #128]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fe f931 	bl	8002410 <HAL_GetTick>
 80041ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b0:	e00b      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fe f92d 	bl	8002410 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d902      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	74fb      	strb	r3, [r7, #19]
            break;
 80041c8:	e006      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ec      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ee:	4904      	ldr	r1, [pc, #16]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041f6:	e009      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
 80041fc:	e006      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x264>
 80041fe:	bf00      	nop
 8004200:	40021000 	.word	0x40021000
 8004204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420c:	7c7b      	ldrb	r3, [r7, #17]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b9e      	ldr	r3, [pc, #632]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	4a9d      	ldr	r2, [pc, #628]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800422a:	4b98      	ldr	r3, [pc, #608]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f023 0203 	bic.w	r2, r3, #3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	4994      	ldr	r1, [pc, #592]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800424c:	4b8f      	ldr	r3, [pc, #572]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f023 020c 	bic.w	r2, r3, #12
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	498c      	ldr	r1, [pc, #560]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800426e:	4b87      	ldr	r3, [pc, #540]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	4983      	ldr	r1, [pc, #524]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004290:	4b7e      	ldr	r3, [pc, #504]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	497b      	ldr	r1, [pc, #492]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042b2:	4b76      	ldr	r3, [pc, #472]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c0:	4972      	ldr	r1, [pc, #456]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042d4:	4b6d      	ldr	r3, [pc, #436]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	496a      	ldr	r1, [pc, #424]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f6:	4b65      	ldr	r3, [pc, #404]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	4961      	ldr	r1, [pc, #388]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004318:	4b5c      	ldr	r3, [pc, #368]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	4959      	ldr	r1, [pc, #356]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800433a:	4b54      	ldr	r3, [pc, #336]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004348:	4950      	ldr	r1, [pc, #320]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800435c:	4b4b      	ldr	r3, [pc, #300]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	4948      	ldr	r1, [pc, #288]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800437e:	4b43      	ldr	r3, [pc, #268]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	493f      	ldr	r1, [pc, #252]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d028      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a0:	4b3a      	ldr	r3, [pc, #232]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ae:	4937      	ldr	r1, [pc, #220]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043be:	d106      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c0:	4b32      	ldr	r3, [pc, #200]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a31      	ldr	r2, [pc, #196]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ca:	60d3      	str	r3, [r2, #12]
 80043cc:	e011      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043d6:	d10c      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	2101      	movs	r1, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f8c8 	bl	8004574 <RCCEx_PLLSAI1_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d028      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	491f      	ldr	r1, [pc, #124]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800441c:	d106      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a1a      	ldr	r2, [pc, #104]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004428:	60d3      	str	r3, [r2, #12]
 800442a:	e011      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004434:	d10c      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	2101      	movs	r1, #1
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f899 	bl	8004574 <RCCEx_PLLSAI1_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02b      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	4908      	ldr	r1, [pc, #32]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447a:	d109      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a02      	ldr	r2, [pc, #8]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004486:	60d3      	str	r3, [r2, #12]
 8004488:	e014      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	2101      	movs	r1, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f867 	bl	8004574 <RCCEx_PLLSAI1_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02f      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ce:	4928      	ldr	r1, [pc, #160]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044de:	d10d      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f844 	bl	8004574 <RCCEx_PLLSAI1_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d014      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80044f6:	7cfb      	ldrb	r3, [r7, #19]
 80044f8:	74bb      	strb	r3, [r7, #18]
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004504:	d10c      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3320      	adds	r3, #32
 800450a:	2102      	movs	r1, #2
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f921 	bl	8004754 <RCCEx_PLLSAI2_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800452c:	4b10      	ldr	r3, [pc, #64]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453a:	490d      	ldr	r1, [pc, #52]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800455e:	4904      	ldr	r1, [pc, #16]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004566:	7cbb      	ldrb	r3, [r7, #18]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000

08004574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004582:	4b73      	ldr	r3, [pc, #460]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800458e:	4b70      	ldr	r3, [pc, #448]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0203 	and.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d10d      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
       ||
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045a6:	4b6a      	ldr	r3, [pc, #424]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
       ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d044      	beq.n	8004644 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e041      	b.n	8004644 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d00c      	beq.n	80045e2 <RCCEx_PLLSAI1_Config+0x6e>
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d013      	beq.n	80045f4 <RCCEx_PLLSAI1_Config+0x80>
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d120      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045d0:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11d      	bne.n	8004618 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e0:	e01a      	b.n	8004618 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045e2:	4b5b      	ldr	r3, [pc, #364]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d116      	bne.n	800461c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f2:	e013      	b.n	800461c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045f4:	4b56      	ldr	r3, [pc, #344]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10f      	bne.n	8004620 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004610:	e006      	b.n	8004620 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      break;
 8004616:	e004      	b.n	8004622 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004618:	bf00      	nop
 800461a:	e002      	b.n	8004622 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004620:	bf00      	nop
    }

    if(status == HAL_OK)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10d      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004628:	4b49      	ldr	r3, [pc, #292]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	3b01      	subs	r3, #1
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	430b      	orrs	r3, r1
 800463e:	4944      	ldr	r1, [pc, #272]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d17d      	bne.n	8004746 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800464a:	4b41      	ldr	r3, [pc, #260]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a40      	ldr	r2, [pc, #256]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004656:	f7fd fedb 	bl	8002410 <HAL_GetTick>
 800465a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800465c:	e009      	b.n	8004672 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800465e:	f7fd fed7 	bl	8002410 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d902      	bls.n	8004672 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	73fb      	strb	r3, [r7, #15]
        break;
 8004670:	e005      	b.n	800467e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004672:	4b37      	ldr	r3, [pc, #220]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1ef      	bne.n	800465e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d160      	bne.n	8004746 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d111      	bne.n	80046ae <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800468a:	4b31      	ldr	r3, [pc, #196]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6892      	ldr	r2, [r2, #8]
 800469a:	0211      	lsls	r1, r2, #8
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68d2      	ldr	r2, [r2, #12]
 80046a0:	0912      	lsrs	r2, r2, #4
 80046a2:	0452      	lsls	r2, r2, #17
 80046a4:	430a      	orrs	r2, r1
 80046a6:	492a      	ldr	r1, [pc, #168]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	610b      	str	r3, [r1, #16]
 80046ac:	e027      	b.n	80046fe <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d112      	bne.n	80046da <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046b4:	4b26      	ldr	r3, [pc, #152]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6892      	ldr	r2, [r2, #8]
 80046c4:	0211      	lsls	r1, r2, #8
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6912      	ldr	r2, [r2, #16]
 80046ca:	0852      	lsrs	r2, r2, #1
 80046cc:	3a01      	subs	r2, #1
 80046ce:	0552      	lsls	r2, r2, #21
 80046d0:	430a      	orrs	r2, r1
 80046d2:	491f      	ldr	r1, [pc, #124]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	610b      	str	r3, [r1, #16]
 80046d8:	e011      	b.n	80046fe <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046da:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6892      	ldr	r2, [r2, #8]
 80046ea:	0211      	lsls	r1, r2, #8
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6952      	ldr	r2, [r2, #20]
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	3a01      	subs	r2, #1
 80046f4:	0652      	lsls	r2, r2, #25
 80046f6:	430a      	orrs	r2, r1
 80046f8:	4915      	ldr	r1, [pc, #84]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004708:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fd fe81 	bl	8002410 <HAL_GetTick>
 800470e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004710:	e009      	b.n	8004726 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004712:	f7fd fe7d 	bl	8002410 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d902      	bls.n	8004726 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	73fb      	strb	r3, [r7, #15]
          break;
 8004724:	e005      	b.n	8004732 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ef      	beq.n	8004712 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	4903      	ldr	r1, [pc, #12]	; (8004750 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004746:	7bfb      	ldrb	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000

08004754 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004762:	4b68      	ldr	r3, [pc, #416]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d018      	beq.n	80047a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800476e:	4b65      	ldr	r3, [pc, #404]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0203 	and.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d10d      	bne.n	800479a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
       ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004786:	4b5f      	ldr	r3, [pc, #380]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
       ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d044      	beq.n	8004824 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	e041      	b.n	8004824 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d00c      	beq.n	80047c2 <RCCEx_PLLSAI2_Config+0x6e>
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d013      	beq.n	80047d4 <RCCEx_PLLSAI2_Config+0x80>
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d120      	bne.n	80047f2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047b0:	4b54      	ldr	r3, [pc, #336]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11d      	bne.n	80047f8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c0:	e01a      	b.n	80047f8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047c2:	4b50      	ldr	r3, [pc, #320]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d2:	e013      	b.n	80047fc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047d4:	4b4b      	ldr	r3, [pc, #300]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10f      	bne.n	8004800 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047e0:	4b48      	ldr	r3, [pc, #288]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047f0:	e006      	b.n	8004800 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      break;
 80047f6:	e004      	b.n	8004802 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80047f8:	bf00      	nop
 80047fa:	e002      	b.n	8004802 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80047fc:	bf00      	nop
 80047fe:	e000      	b.n	8004802 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004800:	bf00      	nop
    }

    if(status == HAL_OK)
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004808:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	3b01      	subs	r3, #1
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	430b      	orrs	r3, r1
 800481e:	4939      	ldr	r1, [pc, #228]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d167      	bne.n	80048fa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a35      	ldr	r2, [pc, #212]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004836:	f7fd fdeb 	bl	8002410 <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800483c:	e009      	b.n	8004852 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800483e:	f7fd fde7 	bl	8002410 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d902      	bls.n	8004852 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	73fb      	strb	r3, [r7, #15]
        break;
 8004850:	e005      	b.n	800485e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004852:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ef      	bne.n	800483e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d14a      	bne.n	80048fa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d111      	bne.n	800488e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800486a:	4b26      	ldr	r3, [pc, #152]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6892      	ldr	r2, [r2, #8]
 800487a:	0211      	lsls	r1, r2, #8
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68d2      	ldr	r2, [r2, #12]
 8004880:	0912      	lsrs	r2, r2, #4
 8004882:	0452      	lsls	r2, r2, #17
 8004884:	430a      	orrs	r2, r1
 8004886:	491f      	ldr	r1, [pc, #124]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004888:	4313      	orrs	r3, r2
 800488a:	614b      	str	r3, [r1, #20]
 800488c:	e011      	b.n	80048b2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800488e:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004896:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6892      	ldr	r2, [r2, #8]
 800489e:	0211      	lsls	r1, r2, #8
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6912      	ldr	r2, [r2, #16]
 80048a4:	0852      	lsrs	r2, r2, #1
 80048a6:	3a01      	subs	r2, #1
 80048a8:	0652      	lsls	r2, r2, #25
 80048aa:	430a      	orrs	r2, r1
 80048ac:	4915      	ldr	r1, [pc, #84]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a13      	ldr	r2, [pc, #76]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048be:	f7fd fda7 	bl	8002410 <HAL_GetTick>
 80048c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048c4:	e009      	b.n	80048da <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048c6:	f7fd fda3 	bl	8002410 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d902      	bls.n	80048da <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	73fb      	strb	r3, [r7, #15]
          break;
 80048d8:	e005      	b.n	80048e6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ef      	beq.n	80048c6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	4903      	ldr	r1, [pc, #12]	; (8004904 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e040      	b.n	800499c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd fc54 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fabc 	bl	8004ec4 <UART_SetConfig>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e022      	b.n	800499c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fe22 	bl	80055a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fea9 	bl	80056ec <UART_CheckIdleState>
 800499a:	4603      	mov	r3, r0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	f040 8081 	bne.w	8004ac0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_UART_Transmit+0x26>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e079      	b.n	8004ac2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit+0x38>
 80049d8:	2302      	movs	r3, #2
 80049da:	e072      	b.n	8004ac2 <HAL_UART_Transmit+0x11e>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2221      	movs	r2, #33	; 0x21
 80049ee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80049f0:	f7fd fd0e 	bl	8002410 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d108      	bne.n	8004a22 <HAL_UART_Transmit+0x7e>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	e003      	b.n	8004a2a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004a32:	e02d      	b.n	8004a90 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fe99 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e039      	b.n	8004ac2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a60:	b292      	uxth	r2, r2
 8004a62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	3302      	adds	r3, #2
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e008      	b.n	8004a7e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	b292      	uxth	r2, r2
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1cb      	bne.n	8004a34 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fe65 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e005      	b.n	8004ac2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	f040 808a 	bne.w	8004bf8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_UART_Receive_IT+0x24>
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e082      	b.n	8004bfa <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Receive_IT+0x36>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e07b      	b.n	8004bfa <HAL_UART_Receive_IT+0x12e>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d10e      	bne.n	8004b4e <HAL_UART_Receive_IT+0x82>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_UART_Receive_IT+0x78>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b42:	e02d      	b.n	8004ba0 <HAL_UART_Receive_IT+0xd4>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	22ff      	movs	r2, #255	; 0xff
 8004b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b4c:	e028      	b.n	8004ba0 <HAL_UART_Receive_IT+0xd4>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_UART_Receive_IT+0xa6>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_UART_Receive_IT+0x9c>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	22ff      	movs	r2, #255	; 0xff
 8004b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b66:	e01b      	b.n	8004ba0 <HAL_UART_Receive_IT+0xd4>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	227f      	movs	r2, #127	; 0x7f
 8004b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b70:	e016      	b.n	8004ba0 <HAL_UART_Receive_IT+0xd4>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b7a:	d10d      	bne.n	8004b98 <HAL_UART_Receive_IT+0xcc>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_UART_Receive_IT+0xc2>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	227f      	movs	r2, #127	; 0x7f
 8004b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b8c:	e008      	b.n	8004ba0 <HAL_UART_Receive_IT+0xd4>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	223f      	movs	r2, #63	; 0x3f
 8004b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Receive_IT+0xd4>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2222      	movs	r2, #34	; 0x22
 8004baa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d107      	bne.n	8004bd6 <HAL_UART_Receive_IT+0x10a>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a0d      	ldr	r2, [pc, #52]	; (8004c08 <HAL_UART_Receive_IT+0x13c>)
 8004bd2:	661a      	str	r2, [r3, #96]	; 0x60
 8004bd4:	e002      	b.n	8004bdc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <HAL_UART_Receive_IT+0x140>)
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004bf2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e000      	b.n	8004bfa <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	080059b5 	.word	0x080059b5
 8004c0c:	0800590b 	.word	0x0800590b

08004c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d113      	bne.n	8004c68 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00e      	beq.n	8004c68 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8114 	beq.w	8004e86 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
      }
      return;
 8004c66:	e10e      	b.n	8004e86 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80d6 	beq.w	8004e1c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80cb 	beq.w	8004e1c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00e      	beq.n	8004cae <HAL_UART_IRQHandler+0x9e>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_UART_IRQHandler+0xc6>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <HAL_UART_IRQHandler+0xee>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2208      	movs	r2, #8
 8004d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d28:	f043 0208 	orr.w	r2, r3, #8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00f      	beq.n	8004d5a <HAL_UART_IRQHandler+0x14a>
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8093 	beq.w	8004e8a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d004      	beq.n	8004da6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d031      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fd60 	bl	800586c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d123      	bne.n	8004e02 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd6:	4a30      	ldr	r2, [pc, #192]	; (8004e98 <HAL_UART_IRQHandler+0x288>)
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd fc55 	bl	800268e <HAL_DMA_Abort_IT>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004df4:	4610      	mov	r0, r2
 8004df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	e00e      	b.n	8004e18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f858 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	e00a      	b.n	8004e18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f854 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	e006      	b.n	8004e18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f850 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004e16:	e038      	b.n	8004e8a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	bf00      	nop
    return;
 8004e1a:	e036      	b.n	8004e8a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <HAL_UART_IRQHandler+0x232>
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fe0f 	bl	8005a5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e40:	e026      	b.n	8004e90 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
    }
    return;
 8004e66:	e012      	b.n	8004e8e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00e      	beq.n	8004e90 <HAL_UART_IRQHandler+0x280>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fd2b 	bl	80058d8 <UART_EndTransmit_IT>
    return;
 8004e82:	bf00      	nop
 8004e84:	e004      	b.n	8004e90 <HAL_UART_IRQHandler+0x280>
      return;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <HAL_UART_IRQHandler+0x280>
    return;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <HAL_UART_IRQHandler+0x280>
    return;
 8004e8e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	080058ad 	.word	0x080058ad

08004e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ec8:	b08a      	sub	sp, #40	; 0x28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4bb8      	ldr	r3, [pc, #736]	; (80051dc <UART_SetConfig+0x318>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4aae      	ldr	r2, [pc, #696]	; (80051e0 <UART_SetConfig+0x31c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	4313      	orrs	r3, r2
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4aa5      	ldr	r2, [pc, #660]	; (80051e4 <UART_SetConfig+0x320>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d126      	bne.n	8004fa2 <UART_SetConfig+0xde>
 8004f54:	4ba4      	ldr	r3, [pc, #656]	; (80051e8 <UART_SetConfig+0x324>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d81a      	bhi.n	8004f98 <UART_SetConfig+0xd4>
 8004f62:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <UART_SetConfig+0xa4>)
 8004f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f89 	.word	0x08004f89
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7e:	e105      	b.n	800518c <UART_SetConfig+0x2c8>
 8004f80:	2302      	movs	r3, #2
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e101      	b.n	800518c <UART_SetConfig+0x2c8>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8e:	e0fd      	b.n	800518c <UART_SetConfig+0x2c8>
 8004f90:	2308      	movs	r3, #8
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f96:	e0f9      	b.n	800518c <UART_SetConfig+0x2c8>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9e:	bf00      	nop
 8004fa0:	e0f4      	b.n	800518c <UART_SetConfig+0x2c8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a91      	ldr	r2, [pc, #580]	; (80051ec <UART_SetConfig+0x328>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d138      	bne.n	800501e <UART_SetConfig+0x15a>
 8004fac:	4b8e      	ldr	r3, [pc, #568]	; (80051e8 <UART_SetConfig+0x324>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d82c      	bhi.n	8005014 <UART_SetConfig+0x150>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0xfc>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004ff5 	.word	0x08004ff5
 8004fc4:	08005015 	.word	0x08005015
 8004fc8:	08005015 	.word	0x08005015
 8004fcc:	08005015 	.word	0x08005015
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	08005015 	.word	0x08005015
 8004fd8:	08005015 	.word	0x08005015
 8004fdc:	08005015 	.word	0x08005015
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800500d 	.word	0x0800500d
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e0c7      	b.n	800518c <UART_SetConfig+0x2c8>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005002:	e0c3      	b.n	800518c <UART_SetConfig+0x2c8>
 8005004:	2304      	movs	r3, #4
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500a:	e0bf      	b.n	800518c <UART_SetConfig+0x2c8>
 800500c:	2308      	movs	r3, #8
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005012:	e0bb      	b.n	800518c <UART_SetConfig+0x2c8>
 8005014:	2310      	movs	r3, #16
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501a:	bf00      	nop
 800501c:	e0b6      	b.n	800518c <UART_SetConfig+0x2c8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a73      	ldr	r2, [pc, #460]	; (80051f0 <UART_SetConfig+0x32c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d125      	bne.n	8005074 <UART_SetConfig+0x1b0>
 8005028:	4b6f      	ldr	r3, [pc, #444]	; (80051e8 <UART_SetConfig+0x324>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005032:	2b10      	cmp	r3, #16
 8005034:	d011      	beq.n	800505a <UART_SetConfig+0x196>
 8005036:	2b10      	cmp	r3, #16
 8005038:	d802      	bhi.n	8005040 <UART_SetConfig+0x17c>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <UART_SetConfig+0x186>
 800503e:	e014      	b.n	800506a <UART_SetConfig+0x1a6>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d006      	beq.n	8005052 <UART_SetConfig+0x18e>
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	d00c      	beq.n	8005062 <UART_SetConfig+0x19e>
 8005048:	e00f      	b.n	800506a <UART_SetConfig+0x1a6>
 800504a:	2300      	movs	r3, #0
 800504c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005050:	e09c      	b.n	800518c <UART_SetConfig+0x2c8>
 8005052:	2302      	movs	r3, #2
 8005054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005058:	e098      	b.n	800518c <UART_SetConfig+0x2c8>
 800505a:	2304      	movs	r3, #4
 800505c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005060:	e094      	b.n	800518c <UART_SetConfig+0x2c8>
 8005062:	2308      	movs	r3, #8
 8005064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005068:	e090      	b.n	800518c <UART_SetConfig+0x2c8>
 800506a:	2310      	movs	r3, #16
 800506c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005070:	bf00      	nop
 8005072:	e08b      	b.n	800518c <UART_SetConfig+0x2c8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a5e      	ldr	r2, [pc, #376]	; (80051f4 <UART_SetConfig+0x330>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d125      	bne.n	80050ca <UART_SetConfig+0x206>
 800507e:	4b5a      	ldr	r3, [pc, #360]	; (80051e8 <UART_SetConfig+0x324>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d011      	beq.n	80050b0 <UART_SetConfig+0x1ec>
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d802      	bhi.n	8005096 <UART_SetConfig+0x1d2>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0x1dc>
 8005094:	e014      	b.n	80050c0 <UART_SetConfig+0x1fc>
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d006      	beq.n	80050a8 <UART_SetConfig+0x1e4>
 800509a:	2bc0      	cmp	r3, #192	; 0xc0
 800509c:	d00c      	beq.n	80050b8 <UART_SetConfig+0x1f4>
 800509e:	e00f      	b.n	80050c0 <UART_SetConfig+0x1fc>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e071      	b.n	800518c <UART_SetConfig+0x2c8>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e06d      	b.n	800518c <UART_SetConfig+0x2c8>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e069      	b.n	800518c <UART_SetConfig+0x2c8>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e065      	b.n	800518c <UART_SetConfig+0x2c8>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	bf00      	nop
 80050c8:	e060      	b.n	800518c <UART_SetConfig+0x2c8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a4a      	ldr	r2, [pc, #296]	; (80051f8 <UART_SetConfig+0x334>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d129      	bne.n	8005128 <UART_SetConfig+0x264>
 80050d4:	4b44      	ldr	r3, [pc, #272]	; (80051e8 <UART_SetConfig+0x324>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e2:	d014      	beq.n	800510e <UART_SetConfig+0x24a>
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e8:	d802      	bhi.n	80050f0 <UART_SetConfig+0x22c>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <UART_SetConfig+0x23a>
 80050ee:	e016      	b.n	800511e <UART_SetConfig+0x25a>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d007      	beq.n	8005106 <UART_SetConfig+0x242>
 80050f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fa:	d00c      	beq.n	8005116 <UART_SetConfig+0x252>
 80050fc:	e00f      	b.n	800511e <UART_SetConfig+0x25a>
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005104:	e042      	b.n	800518c <UART_SetConfig+0x2c8>
 8005106:	2302      	movs	r3, #2
 8005108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510c:	e03e      	b.n	800518c <UART_SetConfig+0x2c8>
 800510e:	2304      	movs	r3, #4
 8005110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005114:	e03a      	b.n	800518c <UART_SetConfig+0x2c8>
 8005116:	2308      	movs	r3, #8
 8005118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511c:	e036      	b.n	800518c <UART_SetConfig+0x2c8>
 800511e:	2310      	movs	r3, #16
 8005120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005124:	bf00      	nop
 8005126:	e031      	b.n	800518c <UART_SetConfig+0x2c8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2c      	ldr	r2, [pc, #176]	; (80051e0 <UART_SetConfig+0x31c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d129      	bne.n	8005186 <UART_SetConfig+0x2c2>
 8005132:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <UART_SetConfig+0x324>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	d014      	beq.n	800516c <UART_SetConfig+0x2a8>
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d802      	bhi.n	800514e <UART_SetConfig+0x28a>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <UART_SetConfig+0x298>
 800514c:	e016      	b.n	800517c <UART_SetConfig+0x2b8>
 800514e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005152:	d007      	beq.n	8005164 <UART_SetConfig+0x2a0>
 8005154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005158:	d00c      	beq.n	8005174 <UART_SetConfig+0x2b0>
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x2b8>
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e013      	b.n	800518c <UART_SetConfig+0x2c8>
 8005164:	2302      	movs	r3, #2
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e00f      	b.n	800518c <UART_SetConfig+0x2c8>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e00b      	b.n	800518c <UART_SetConfig+0x2c8>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e007      	b.n	800518c <UART_SetConfig+0x2c8>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <UART_SetConfig+0x2c8>
 8005186:	2310      	movs	r3, #16
 8005188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <UART_SetConfig+0x31c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	f040 80fe 	bne.w	8005394 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800519c:	2b08      	cmp	r3, #8
 800519e:	d837      	bhi.n	8005210 <UART_SetConfig+0x34c>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x2e4>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	08005211 	.word	0x08005211
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	08005211 	.word	0x08005211
 80051b8:	08005201 	.word	0x08005201
 80051bc:	08005211 	.word	0x08005211
 80051c0:	08005211 	.word	0x08005211
 80051c4:	08005211 	.word	0x08005211
 80051c8:	08005209 	.word	0x08005209
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fe fe60 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051d2:	e020      	b.n	8005216 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80051d4:	4b09      	ldr	r3, [pc, #36]	; (80051fc <UART_SetConfig+0x338>)
 80051d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051d8:	e01d      	b.n	8005216 <UART_SetConfig+0x352>
 80051da:	bf00      	nop
 80051dc:	efff69f3 	.word	0xefff69f3
 80051e0:	40008000 	.word	0x40008000
 80051e4:	40013800 	.word	0x40013800
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40004400 	.word	0x40004400
 80051f0:	40004800 	.word	0x40004800
 80051f4:	40004c00 	.word	0x40004c00
 80051f8:	40005000 	.word	0x40005000
 80051fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005200:	f7fe fdb0 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8005204:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005206:	e006      	b.n	8005216 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800520e:	e002      	b.n	8005216 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	76fb      	strb	r3, [r7, #27]
        break;
 8005214:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 81b9 	beq.w	8005590 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	429a      	cmp	r2, r3
 800522c:	d305      	bcc.n	800523a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	429a      	cmp	r2, r3
 8005238:	d902      	bls.n	8005240 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	76fb      	strb	r3, [r7, #27]
 800523e:	e1a7      	b.n	8005590 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005244:	2b08      	cmp	r3, #8
 8005246:	f200 8092 	bhi.w	800536e <UART_SetConfig+0x4aa>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <UART_SetConfig+0x38c>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005275 	.word	0x08005275
 8005254:	0800536f 	.word	0x0800536f
 8005258:	080052c3 	.word	0x080052c3
 800525c:	0800536f 	.word	0x0800536f
 8005260:	080052f7 	.word	0x080052f7
 8005264:	0800536f 	.word	0x0800536f
 8005268:	0800536f 	.word	0x0800536f
 800526c:	0800536f 	.word	0x0800536f
 8005270:	08005345 	.word	0x08005345
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005274:	f7fe fe0c 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8005278:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4619      	mov	r1, r3
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	0214      	lsls	r4, r2, #8
 800528c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005290:	020b      	lsls	r3, r1, #8
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6852      	ldr	r2, [r2, #4]
 8005296:	0852      	lsrs	r2, r2, #1
 8005298:	4611      	mov	r1, r2
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	eb13 0b01 	adds.w	fp, r3, r1
 80052a2:	eb44 0c02 	adc.w	ip, r4, r2
 80052a6:	4658      	mov	r0, fp
 80052a8:	4661      	mov	r1, ip
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f04f 0400 	mov.w	r4, #0
 80052b2:	461a      	mov	r2, r3
 80052b4:	4623      	mov	r3, r4
 80052b6:	f7fb fce1 	bl	8000c7c <__aeabi_uldivmod>
 80052ba:	4603      	mov	r3, r0
 80052bc:	460c      	mov	r4, r1
 80052be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80052c0:	e058      	b.n	8005374 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	49ae      	ldr	r1, [pc, #696]	; (8005588 <UART_SetConfig+0x6c4>)
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	eb13 0b01 	adds.w	fp, r3, r1
 80052d6:	eb44 0c02 	adc.w	ip, r4, r2
 80052da:	4658      	mov	r0, fp
 80052dc:	4661      	mov	r1, ip
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	461a      	mov	r2, r3
 80052e8:	4623      	mov	r3, r4
 80052ea:	f7fb fcc7 	bl	8000c7c <__aeabi_uldivmod>
 80052ee:	4603      	mov	r3, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80052f4:	e03e      	b.n	8005374 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7fe fd35 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 80052fa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4619      	mov	r1, r3
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	0214      	lsls	r4, r2, #8
 800530e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005312:	020b      	lsls	r3, r1, #8
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6852      	ldr	r2, [r2, #4]
 8005318:	0852      	lsrs	r2, r2, #1
 800531a:	4611      	mov	r1, r2
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	eb13 0b01 	adds.w	fp, r3, r1
 8005324:	eb44 0c02 	adc.w	ip, r4, r2
 8005328:	4658      	mov	r0, fp
 800532a:	4661      	mov	r1, ip
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	461a      	mov	r2, r3
 8005336:	4623      	mov	r3, r4
 8005338:	f7fb fca0 	bl	8000c7c <__aeabi_uldivmod>
 800533c:	4603      	mov	r3, r0
 800533e:	460c      	mov	r4, r1
 8005340:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005342:	e017      	b.n	8005374 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	f04f 0400 	mov.w	r4, #0
 800534e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005352:	f144 0100 	adc.w	r1, r4, #0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f04f 0400 	mov.w	r4, #0
 800535e:	461a      	mov	r2, r3
 8005360:	4623      	mov	r3, r4
 8005362:	f7fb fc8b 	bl	8000c7c <__aeabi_uldivmod>
 8005366:	4603      	mov	r3, r0
 8005368:	460c      	mov	r4, r1
 800536a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800536c:	e002      	b.n	8005374 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	76fb      	strb	r3, [r7, #27]
            break;
 8005372:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800537a:	d308      	bcc.n	800538e <UART_SetConfig+0x4ca>
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005382:	d204      	bcs.n	800538e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	60da      	str	r2, [r3, #12]
 800538c:	e100      	b.n	8005590 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	76fb      	strb	r3, [r7, #27]
 8005392:	e0fd      	b.n	8005590 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539c:	f040 8084 	bne.w	80054a8 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80053a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d85f      	bhi.n	8005468 <UART_SetConfig+0x5a4>
 80053a8:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0x4ec>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	08005415 	.word	0x08005415
 80053bc:	08005469 	.word	0x08005469
 80053c0:	08005431 	.word	0x08005431
 80053c4:	08005469 	.word	0x08005469
 80053c8:	08005469 	.word	0x08005469
 80053cc:	08005469 	.word	0x08005469
 80053d0:	08005451 	.word	0x08005451
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7fe fd5c 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 80053d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	005a      	lsls	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053f2:	e03c      	b.n	800546e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f4:	f7fe fd62 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 80053f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	005a      	lsls	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	441a      	add	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	b29b      	uxth	r3, r3
 8005410:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005412:	e02c      	b.n	800546e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800541e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6852      	ldr	r2, [r2, #4]
 8005426:	fbb3 f3f2 	udiv	r3, r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800542e:	e01e      	b.n	800546e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005430:	f7fe fc98 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8005434:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	005a      	lsls	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	441a      	add	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	fbb2 f3f3 	udiv	r3, r2, r3
 800544a:	b29b      	uxth	r3, r3
 800544c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800544e:	e00e      	b.n	800546e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005466:	e002      	b.n	800546e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	76fb      	strb	r3, [r7, #27]
        break;
 800546c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b0f      	cmp	r3, #15
 8005472:	d916      	bls.n	80054a2 <UART_SetConfig+0x5de>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d212      	bcs.n	80054a2 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f023 030f 	bic.w	r3, r3, #15
 8005484:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	b29a      	uxth	r2, r3
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	4313      	orrs	r3, r2
 8005496:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	89fa      	ldrh	r2, [r7, #14]
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	e076      	b.n	8005590 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	76fb      	strb	r3, [r7, #27]
 80054a6:	e073      	b.n	8005590 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80054a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d85c      	bhi.n	800556a <UART_SetConfig+0x6a6>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x5f4>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054fb 	.word	0x080054fb
 80054c0:	08005519 	.word	0x08005519
 80054c4:	0800556b 	.word	0x0800556b
 80054c8:	08005535 	.word	0x08005535
 80054cc:	0800556b 	.word	0x0800556b
 80054d0:	0800556b 	.word	0x0800556b
 80054d4:	0800556b 	.word	0x0800556b
 80054d8:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7fe fcd8 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 80054e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	085a      	lsrs	r2, r3, #1
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	441a      	add	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054f8:	e03a      	b.n	8005570 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054fa:	f7fe fcdf 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 80054fe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	085a      	lsrs	r2, r3, #1
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	b29b      	uxth	r3, r3
 8005514:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005516:	e02b      	b.n	8005570 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005522:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6852      	ldr	r2, [r2, #4]
 800552a:	fbb3 f3f2 	udiv	r3, r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005532:	e01d      	b.n	8005570 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005534:	f7fe fc16 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8005538:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	085a      	lsrs	r2, r3, #1
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	441a      	add	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	b29b      	uxth	r3, r3
 800554e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005550:	e00e      	b.n	8005570 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005568:	e002      	b.n	8005570 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	76fb      	strb	r3, [r7, #27]
        break;
 800556e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b0f      	cmp	r3, #15
 8005574:	d90a      	bls.n	800558c <UART_SetConfig+0x6c8>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557c:	d206      	bcs.n	800558c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	e003      	b.n	8005590 <UART_SetConfig+0x6cc>
 8005588:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800559c:	7efb      	ldrb	r3, [r7, #27]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080055a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01a      	beq.n	80056be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a6:	d10a      	bne.n	80056be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
  }
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80056fa:	f7fc fe89 	bl	8002410 <HAL_GetTick>
 80056fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b08      	cmp	r3, #8
 800570c:	d10e      	bne.n	800572c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f82a 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e020      	b.n	800576e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d10e      	bne.n	8005758 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800573a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f814 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e00a      	b.n	800576e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	e05d      	b.n	8005844 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d059      	beq.n	8005844 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005790:	f7fc fe3e 	bl	8002410 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d11b      	bne.n	80057de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e042      	b.n	8005864 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02b      	beq.n	8005844 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fa:	d123      	bne.n	8005844 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005804:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005814:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e00f      	b.n	8005864 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4013      	ands	r3, r2
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	429a      	cmp	r2, r3
 8005860:	d092      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005882:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	661a      	str	r2, [r3, #96]	; 0x60
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff faf0 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff facd 	bl	8004e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005918:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591e:	2b22      	cmp	r3, #34	; 0x22
 8005920:	d13a      	bne.n	8005998 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005928:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800592a:	89bb      	ldrh	r3, [r7, #12]
 800592c:	b2d9      	uxtb	r1, r3
 800592e:	89fb      	ldrh	r3, [r7, #14]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	400a      	ands	r2, r1
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d123      	bne.n	80059ac <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005972:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb fe13 	bl	80015bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005996:	e009      	b.n	80059ac <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	8b1b      	ldrh	r3, [r3, #24]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0208 	orr.w	r2, r2, #8
 80059a8:	b292      	uxth	r2, r2
 80059aa:	831a      	strh	r2, [r3, #24]
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c8:	2b22      	cmp	r3, #34	; 0x22
 80059ca:	d13a      	bne.n	8005a42 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059d2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80059da:	89ba      	ldrh	r2, [r7, #12]
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	4013      	ands	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	1c9a      	adds	r2, r3, #2
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d123      	bne.n	8005a56 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a1c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb fdbe 	bl	80015bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a40:	e009      	b.n	8005a56 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	8b1b      	ldrh	r3, [r3, #24]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	b292      	uxth	r2, r2
 8005a54:	831a      	strh	r2, [r3, #24]
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <atof>:
 8005a72:	2100      	movs	r1, #0
 8005a74:	f000 be74 	b.w	8006760 <strtod>

08005a78 <atoi>:
 8005a78:	220a      	movs	r2, #10
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	f000 bf00 	b.w	8006880 <strtol>

08005a80 <__errno>:
 8005a80:	4b01      	ldr	r3, [pc, #4]	; (8005a88 <__errno+0x8>)
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	200000c4 	.word	0x200000c4

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	4e0d      	ldr	r6, [pc, #52]	; (8005ac4 <__libc_init_array+0x38>)
 8005a90:	4c0d      	ldr	r4, [pc, #52]	; (8005ac8 <__libc_init_array+0x3c>)
 8005a92:	1ba4      	subs	r4, r4, r6
 8005a94:	10a4      	asrs	r4, r4, #2
 8005a96:	2500      	movs	r5, #0
 8005a98:	42a5      	cmp	r5, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	4e0b      	ldr	r6, [pc, #44]	; (8005acc <__libc_init_array+0x40>)
 8005a9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ad0 <__libc_init_array+0x44>)
 8005aa0:	f002 fa5e 	bl	8007f60 <_init>
 8005aa4:	1ba4      	subs	r4, r4, r6
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	42a5      	cmp	r5, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ab4:	4798      	blx	r3
 8005ab6:	3501      	adds	r5, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005abe:	4798      	blx	r3
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	08009028 	.word	0x08009028
 8005ac8:	08009028 	.word	0x08009028
 8005acc:	08009028 	.word	0x08009028
 8005ad0:	0800902c 	.word	0x0800902c

08005ad4 <memset>:
 8005ad4:	4402      	add	r2, r0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d100      	bne.n	8005ade <memset+0xa>
 8005adc:	4770      	bx	lr
 8005ade:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae2:	e7f9      	b.n	8005ad8 <memset+0x4>

08005ae4 <siprintf>:
 8005ae4:	b40e      	push	{r1, r2, r3}
 8005ae6:	b500      	push	{lr}
 8005ae8:	b09c      	sub	sp, #112	; 0x70
 8005aea:	ab1d      	add	r3, sp, #116	; 0x74
 8005aec:	9002      	str	r0, [sp, #8]
 8005aee:	9006      	str	r0, [sp, #24]
 8005af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005af4:	4809      	ldr	r0, [pc, #36]	; (8005b1c <siprintf+0x38>)
 8005af6:	9107      	str	r1, [sp, #28]
 8005af8:	9104      	str	r1, [sp, #16]
 8005afa:	4909      	ldr	r1, [pc, #36]	; (8005b20 <siprintf+0x3c>)
 8005afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b00:	9105      	str	r1, [sp, #20]
 8005b02:	6800      	ldr	r0, [r0, #0]
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	a902      	add	r1, sp, #8
 8005b08:	f001 feda 	bl	80078c0 <_svfiprintf_r>
 8005b0c:	9b02      	ldr	r3, [sp, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	b01c      	add	sp, #112	; 0x70
 8005b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b18:	b003      	add	sp, #12
 8005b1a:	4770      	bx	lr
 8005b1c:	200000c4 	.word	0x200000c4
 8005b20:	ffff0208 	.word	0xffff0208

08005b24 <strchr>:
 8005b24:	b2c9      	uxtb	r1, r1
 8005b26:	4603      	mov	r3, r0
 8005b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b2c:	b11a      	cbz	r2, 8005b36 <strchr+0x12>
 8005b2e:	428a      	cmp	r2, r1
 8005b30:	d1f9      	bne.n	8005b26 <strchr+0x2>
 8005b32:	4618      	mov	r0, r3
 8005b34:	4770      	bx	lr
 8005b36:	2900      	cmp	r1, #0
 8005b38:	bf18      	it	ne
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	e7f9      	b.n	8005b32 <strchr+0xe>

08005b3e <sulp>:
 8005b3e:	b570      	push	{r4, r5, r6, lr}
 8005b40:	4604      	mov	r4, r0
 8005b42:	460d      	mov	r5, r1
 8005b44:	ec45 4b10 	vmov	d0, r4, r5
 8005b48:	4616      	mov	r6, r2
 8005b4a:	f001 fcc3 	bl	80074d4 <__ulp>
 8005b4e:	ec51 0b10 	vmov	r0, r1, d0
 8005b52:	b17e      	cbz	r6, 8005b74 <sulp+0x36>
 8005b54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005b58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dd09      	ble.n	8005b74 <sulp+0x36>
 8005b60:	051b      	lsls	r3, r3, #20
 8005b62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b66:	2400      	movs	r4, #0
 8005b68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	462b      	mov	r3, r5
 8005b70:	f7fa fd52 	bl	8000618 <__aeabi_dmul>
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b78 <_strtod_l>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	461f      	mov	r7, r3
 8005b7e:	b0a1      	sub	sp, #132	; 0x84
 8005b80:	2300      	movs	r3, #0
 8005b82:	4681      	mov	r9, r0
 8005b84:	4638      	mov	r0, r7
 8005b86:	460e      	mov	r6, r1
 8005b88:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b8a:	931c      	str	r3, [sp, #112]	; 0x70
 8005b8c:	f001 f9b7 	bl	8006efe <__localeconv_l>
 8005b90:	4680      	mov	r8, r0
 8005b92:	6800      	ldr	r0, [r0, #0]
 8005b94:	f7fa fb26 	bl	80001e4 <strlen>
 8005b98:	f04f 0a00 	mov.w	sl, #0
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	f04f 0b00 	mov.w	fp, #0
 8005ba2:	961b      	str	r6, [sp, #108]	; 0x6c
 8005ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	2a0d      	cmp	r2, #13
 8005baa:	d832      	bhi.n	8005c12 <_strtod_l+0x9a>
 8005bac:	2a09      	cmp	r2, #9
 8005bae:	d236      	bcs.n	8005c1e <_strtod_l+0xa6>
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d03e      	beq.n	8005c32 <_strtod_l+0xba>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8005bb8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005bba:	782b      	ldrb	r3, [r5, #0]
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	f040 80ac 	bne.w	8005d1a <_strtod_l+0x1a2>
 8005bc2:	786b      	ldrb	r3, [r5, #1]
 8005bc4:	2b58      	cmp	r3, #88	; 0x58
 8005bc6:	d001      	beq.n	8005bcc <_strtod_l+0x54>
 8005bc8:	2b78      	cmp	r3, #120	; 0x78
 8005bca:	d167      	bne.n	8005c9c <_strtod_l+0x124>
 8005bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	ab1c      	add	r3, sp, #112	; 0x70
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	9702      	str	r7, [sp, #8]
 8005bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8005bd8:	4a88      	ldr	r2, [pc, #544]	; (8005dfc <_strtod_l+0x284>)
 8005bda:	a91b      	add	r1, sp, #108	; 0x6c
 8005bdc:	4648      	mov	r0, r9
 8005bde:	f000 feb4 	bl	800694a <__gethex>
 8005be2:	f010 0407 	ands.w	r4, r0, #7
 8005be6:	4606      	mov	r6, r0
 8005be8:	d005      	beq.n	8005bf6 <_strtod_l+0x7e>
 8005bea:	2c06      	cmp	r4, #6
 8005bec:	d12b      	bne.n	8005c46 <_strtod_l+0xce>
 8005bee:	3501      	adds	r5, #1
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	951b      	str	r5, [sp, #108]	; 0x6c
 8005bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8005bf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 859a 	bne.w	8006732 <_strtod_l+0xbba>
 8005bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c00:	b1e3      	cbz	r3, 8005c3c <_strtod_l+0xc4>
 8005c02:	4652      	mov	r2, sl
 8005c04:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c08:	ec43 2b10 	vmov	d0, r2, r3
 8005c0c:	b021      	add	sp, #132	; 0x84
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	2a2b      	cmp	r2, #43	; 0x2b
 8005c14:	d015      	beq.n	8005c42 <_strtod_l+0xca>
 8005c16:	2a2d      	cmp	r2, #45	; 0x2d
 8005c18:	d004      	beq.n	8005c24 <_strtod_l+0xac>
 8005c1a:	2a20      	cmp	r2, #32
 8005c1c:	d1ca      	bne.n	8005bb4 <_strtod_l+0x3c>
 8005c1e:	3301      	adds	r3, #1
 8005c20:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c22:	e7bf      	b.n	8005ba4 <_strtod_l+0x2c>
 8005c24:	2201      	movs	r2, #1
 8005c26:	920d      	str	r2, [sp, #52]	; 0x34
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1c2      	bne.n	8005bb8 <_strtod_l+0x40>
 8005c32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c34:	961b      	str	r6, [sp, #108]	; 0x6c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 8579 	bne.w	800672e <_strtod_l+0xbb6>
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	465b      	mov	r3, fp
 8005c40:	e7e2      	b.n	8005c08 <_strtod_l+0x90>
 8005c42:	2200      	movs	r2, #0
 8005c44:	e7ef      	b.n	8005c26 <_strtod_l+0xae>
 8005c46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c48:	b13a      	cbz	r2, 8005c5a <_strtod_l+0xe2>
 8005c4a:	2135      	movs	r1, #53	; 0x35
 8005c4c:	a81e      	add	r0, sp, #120	; 0x78
 8005c4e:	f001 fd39 	bl	80076c4 <__copybits>
 8005c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c54:	4648      	mov	r0, r9
 8005c56:	f001 f9a5 	bl	8006fa4 <_Bfree>
 8005c5a:	3c01      	subs	r4, #1
 8005c5c:	2c04      	cmp	r4, #4
 8005c5e:	d806      	bhi.n	8005c6e <_strtod_l+0xf6>
 8005c60:	e8df f004 	tbb	[pc, r4]
 8005c64:	1714030a 	.word	0x1714030a
 8005c68:	0a          	.byte	0x0a
 8005c69:	00          	.byte	0x00
 8005c6a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005c6e:	0730      	lsls	r0, r6, #28
 8005c70:	d5c1      	bpl.n	8005bf6 <_strtod_l+0x7e>
 8005c72:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005c76:	e7be      	b.n	8005bf6 <_strtod_l+0x7e>
 8005c78:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005c7c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c82:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c86:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005c8a:	e7f0      	b.n	8005c6e <_strtod_l+0xf6>
 8005c8c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005e00 <_strtod_l+0x288>
 8005c90:	e7ed      	b.n	8005c6e <_strtod_l+0xf6>
 8005c92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005c96:	f04f 3aff 	mov.w	sl, #4294967295
 8005c9a:	e7e8      	b.n	8005c6e <_strtod_l+0xf6>
 8005c9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b30      	cmp	r3, #48	; 0x30
 8005ca6:	d0f9      	beq.n	8005c9c <_strtod_l+0x124>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0a4      	beq.n	8005bf6 <_strtod_l+0x7e>
 8005cac:	2301      	movs	r3, #1
 8005cae:	2500      	movs	r5, #0
 8005cb0:	9306      	str	r3, [sp, #24]
 8005cb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cb4:	9308      	str	r3, [sp, #32]
 8005cb6:	9507      	str	r5, [sp, #28]
 8005cb8:	9505      	str	r5, [sp, #20]
 8005cba:	220a      	movs	r2, #10
 8005cbc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005cbe:	7807      	ldrb	r7, [r0, #0]
 8005cc0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005cc4:	b2d9      	uxtb	r1, r3
 8005cc6:	2909      	cmp	r1, #9
 8005cc8:	d929      	bls.n	8005d1e <_strtod_l+0x1a6>
 8005cca:	4622      	mov	r2, r4
 8005ccc:	f8d8 1000 	ldr.w	r1, [r8]
 8005cd0:	f002 f886 	bl	8007de0 <strncmp>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d031      	beq.n	8005d3c <_strtod_l+0x1c4>
 8005cd8:	2000      	movs	r0, #0
 8005cda:	9c05      	ldr	r4, [sp, #20]
 8005cdc:	9004      	str	r0, [sp, #16]
 8005cde:	463b      	mov	r3, r7
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	2b65      	cmp	r3, #101	; 0x65
 8005ce4:	d001      	beq.n	8005cea <_strtod_l+0x172>
 8005ce6:	2b45      	cmp	r3, #69	; 0x45
 8005ce8:	d114      	bne.n	8005d14 <_strtod_l+0x19c>
 8005cea:	b924      	cbnz	r4, 8005cf6 <_strtod_l+0x17e>
 8005cec:	b910      	cbnz	r0, 8005cf4 <_strtod_l+0x17c>
 8005cee:	9b06      	ldr	r3, [sp, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d09e      	beq.n	8005c32 <_strtod_l+0xba>
 8005cf4:	2400      	movs	r4, #0
 8005cf6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005cf8:	1c73      	adds	r3, r6, #1
 8005cfa:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cfc:	7873      	ldrb	r3, [r6, #1]
 8005cfe:	2b2b      	cmp	r3, #43	; 0x2b
 8005d00:	d078      	beq.n	8005df4 <_strtod_l+0x27c>
 8005d02:	2b2d      	cmp	r3, #45	; 0x2d
 8005d04:	d070      	beq.n	8005de8 <_strtod_l+0x270>
 8005d06:	f04f 0c00 	mov.w	ip, #0
 8005d0a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005d0e:	2f09      	cmp	r7, #9
 8005d10:	d97c      	bls.n	8005e0c <_strtod_l+0x294>
 8005d12:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d14:	f04f 0e00 	mov.w	lr, #0
 8005d18:	e09a      	b.n	8005e50 <_strtod_l+0x2d8>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e7c7      	b.n	8005cae <_strtod_l+0x136>
 8005d1e:	9905      	ldr	r1, [sp, #20]
 8005d20:	2908      	cmp	r1, #8
 8005d22:	bfdd      	ittte	le
 8005d24:	9907      	ldrle	r1, [sp, #28]
 8005d26:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d2a:	9307      	strle	r3, [sp, #28]
 8005d2c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005d30:	9b05      	ldr	r3, [sp, #20]
 8005d32:	3001      	adds	r0, #1
 8005d34:	3301      	adds	r3, #1
 8005d36:	9305      	str	r3, [sp, #20]
 8005d38:	901b      	str	r0, [sp, #108]	; 0x6c
 8005d3a:	e7bf      	b.n	8005cbc <_strtod_l+0x144>
 8005d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d3e:	191a      	adds	r2, r3, r4
 8005d40:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d42:	9a05      	ldr	r2, [sp, #20]
 8005d44:	5d1b      	ldrb	r3, [r3, r4]
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d037      	beq.n	8005dba <_strtod_l+0x242>
 8005d4a:	9c05      	ldr	r4, [sp, #20]
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005d52:	2909      	cmp	r1, #9
 8005d54:	d913      	bls.n	8005d7e <_strtod_l+0x206>
 8005d56:	2101      	movs	r1, #1
 8005d58:	9104      	str	r1, [sp, #16]
 8005d5a:	e7c2      	b.n	8005ce2 <_strtod_l+0x16a>
 8005d5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	3001      	adds	r0, #1
 8005d66:	2b30      	cmp	r3, #48	; 0x30
 8005d68:	d0f8      	beq.n	8005d5c <_strtod_l+0x1e4>
 8005d6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005d6e:	2a08      	cmp	r2, #8
 8005d70:	f200 84e4 	bhi.w	800673c <_strtod_l+0xbc4>
 8005d74:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d76:	9208      	str	r2, [sp, #32]
 8005d78:	4602      	mov	r2, r0
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005d82:	f100 0101 	add.w	r1, r0, #1
 8005d86:	d012      	beq.n	8005dae <_strtod_l+0x236>
 8005d88:	440a      	add	r2, r1
 8005d8a:	eb00 0c04 	add.w	ip, r0, r4
 8005d8e:	4621      	mov	r1, r4
 8005d90:	270a      	movs	r7, #10
 8005d92:	458c      	cmp	ip, r1
 8005d94:	d113      	bne.n	8005dbe <_strtod_l+0x246>
 8005d96:	1821      	adds	r1, r4, r0
 8005d98:	2908      	cmp	r1, #8
 8005d9a:	f104 0401 	add.w	r4, r4, #1
 8005d9e:	4404      	add	r4, r0
 8005da0:	dc19      	bgt.n	8005dd6 <_strtod_l+0x25e>
 8005da2:	9b07      	ldr	r3, [sp, #28]
 8005da4:	210a      	movs	r1, #10
 8005da6:	fb01 e303 	mla	r3, r1, r3, lr
 8005daa:	9307      	str	r3, [sp, #28]
 8005dac:	2100      	movs	r1, #0
 8005dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005db0:	1c58      	adds	r0, r3, #1
 8005db2:	901b      	str	r0, [sp, #108]	; 0x6c
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	4608      	mov	r0, r1
 8005db8:	e7c9      	b.n	8005d4e <_strtod_l+0x1d6>
 8005dba:	9805      	ldr	r0, [sp, #20]
 8005dbc:	e7d3      	b.n	8005d66 <_strtod_l+0x1ee>
 8005dbe:	2908      	cmp	r1, #8
 8005dc0:	f101 0101 	add.w	r1, r1, #1
 8005dc4:	dc03      	bgt.n	8005dce <_strtod_l+0x256>
 8005dc6:	9b07      	ldr	r3, [sp, #28]
 8005dc8:	437b      	muls	r3, r7
 8005dca:	9307      	str	r3, [sp, #28]
 8005dcc:	e7e1      	b.n	8005d92 <_strtod_l+0x21a>
 8005dce:	2910      	cmp	r1, #16
 8005dd0:	bfd8      	it	le
 8005dd2:	437d      	mulle	r5, r7
 8005dd4:	e7dd      	b.n	8005d92 <_strtod_l+0x21a>
 8005dd6:	2c10      	cmp	r4, #16
 8005dd8:	bfdc      	itt	le
 8005dda:	210a      	movle	r1, #10
 8005ddc:	fb01 e505 	mlale	r5, r1, r5, lr
 8005de0:	e7e4      	b.n	8005dac <_strtod_l+0x234>
 8005de2:	2301      	movs	r3, #1
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	e781      	b.n	8005cec <_strtod_l+0x174>
 8005de8:	f04f 0c01 	mov.w	ip, #1
 8005dec:	1cb3      	adds	r3, r6, #2
 8005dee:	931b      	str	r3, [sp, #108]	; 0x6c
 8005df0:	78b3      	ldrb	r3, [r6, #2]
 8005df2:	e78a      	b.n	8005d0a <_strtod_l+0x192>
 8005df4:	f04f 0c00 	mov.w	ip, #0
 8005df8:	e7f8      	b.n	8005dec <_strtod_l+0x274>
 8005dfa:	bf00      	nop
 8005dfc:	08008d90 	.word	0x08008d90
 8005e00:	7ff00000 	.word	0x7ff00000
 8005e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e06:	1c5f      	adds	r7, r3, #1
 8005e08:	971b      	str	r7, [sp, #108]	; 0x6c
 8005e0a:	785b      	ldrb	r3, [r3, #1]
 8005e0c:	2b30      	cmp	r3, #48	; 0x30
 8005e0e:	d0f9      	beq.n	8005e04 <_strtod_l+0x28c>
 8005e10:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005e14:	2f08      	cmp	r7, #8
 8005e16:	f63f af7d 	bhi.w	8005d14 <_strtod_l+0x19c>
 8005e1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005e1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e20:	930a      	str	r3, [sp, #40]	; 0x28
 8005e22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e24:	1c5f      	adds	r7, r3, #1
 8005e26:	971b      	str	r7, [sp, #108]	; 0x6c
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005e2e:	f1b8 0f09 	cmp.w	r8, #9
 8005e32:	d937      	bls.n	8005ea4 <_strtod_l+0x32c>
 8005e34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e36:	1a7f      	subs	r7, r7, r1
 8005e38:	2f08      	cmp	r7, #8
 8005e3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005e3e:	dc37      	bgt.n	8005eb0 <_strtod_l+0x338>
 8005e40:	45be      	cmp	lr, r7
 8005e42:	bfa8      	it	ge
 8005e44:	46be      	movge	lr, r7
 8005e46:	f1bc 0f00 	cmp.w	ip, #0
 8005e4a:	d001      	beq.n	8005e50 <_strtod_l+0x2d8>
 8005e4c:	f1ce 0e00 	rsb	lr, lr, #0
 8005e50:	2c00      	cmp	r4, #0
 8005e52:	d151      	bne.n	8005ef8 <_strtod_l+0x380>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f47f aece 	bne.w	8005bf6 <_strtod_l+0x7e>
 8005e5a:	9a06      	ldr	r2, [sp, #24]
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	f47f aeca 	bne.w	8005bf6 <_strtod_l+0x7e>
 8005e62:	9a04      	ldr	r2, [sp, #16]
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	f47f aee4 	bne.w	8005c32 <_strtod_l+0xba>
 8005e6a:	2b4e      	cmp	r3, #78	; 0x4e
 8005e6c:	d027      	beq.n	8005ebe <_strtod_l+0x346>
 8005e6e:	dc21      	bgt.n	8005eb4 <_strtod_l+0x33c>
 8005e70:	2b49      	cmp	r3, #73	; 0x49
 8005e72:	f47f aede 	bne.w	8005c32 <_strtod_l+0xba>
 8005e76:	49a0      	ldr	r1, [pc, #640]	; (80060f8 <_strtod_l+0x580>)
 8005e78:	a81b      	add	r0, sp, #108	; 0x6c
 8005e7a:	f000 ff99 	bl	8006db0 <__match>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f43f aed7 	beq.w	8005c32 <_strtod_l+0xba>
 8005e84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e86:	499d      	ldr	r1, [pc, #628]	; (80060fc <_strtod_l+0x584>)
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	a81b      	add	r0, sp, #108	; 0x6c
 8005e8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e8e:	f000 ff8f 	bl	8006db0 <__match>
 8005e92:	b910      	cbnz	r0, 8005e9a <_strtod_l+0x322>
 8005e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e96:	3301      	adds	r3, #1
 8005e98:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e9a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006110 <_strtod_l+0x598>
 8005e9e:	f04f 0a00 	mov.w	sl, #0
 8005ea2:	e6a8      	b.n	8005bf6 <_strtod_l+0x7e>
 8005ea4:	210a      	movs	r1, #10
 8005ea6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005eaa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005eae:	e7b8      	b.n	8005e22 <_strtod_l+0x2aa>
 8005eb0:	46be      	mov	lr, r7
 8005eb2:	e7c8      	b.n	8005e46 <_strtod_l+0x2ce>
 8005eb4:	2b69      	cmp	r3, #105	; 0x69
 8005eb6:	d0de      	beq.n	8005e76 <_strtod_l+0x2fe>
 8005eb8:	2b6e      	cmp	r3, #110	; 0x6e
 8005eba:	f47f aeba 	bne.w	8005c32 <_strtod_l+0xba>
 8005ebe:	4990      	ldr	r1, [pc, #576]	; (8006100 <_strtod_l+0x588>)
 8005ec0:	a81b      	add	r0, sp, #108	; 0x6c
 8005ec2:	f000 ff75 	bl	8006db0 <__match>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f43f aeb3 	beq.w	8005c32 <_strtod_l+0xba>
 8005ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b28      	cmp	r3, #40	; 0x28
 8005ed2:	d10e      	bne.n	8005ef2 <_strtod_l+0x37a>
 8005ed4:	aa1e      	add	r2, sp, #120	; 0x78
 8005ed6:	498b      	ldr	r1, [pc, #556]	; (8006104 <_strtod_l+0x58c>)
 8005ed8:	a81b      	add	r0, sp, #108	; 0x6c
 8005eda:	f000 ff7d 	bl	8006dd8 <__hexnan>
 8005ede:	2805      	cmp	r0, #5
 8005ee0:	d107      	bne.n	8005ef2 <_strtod_l+0x37a>
 8005ee2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ee4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005ee8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005eec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005ef0:	e681      	b.n	8005bf6 <_strtod_l+0x7e>
 8005ef2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006118 <_strtod_l+0x5a0>
 8005ef6:	e7d2      	b.n	8005e9e <_strtod_l+0x326>
 8005ef8:	ebae 0302 	sub.w	r3, lr, r2
 8005efc:	9306      	str	r3, [sp, #24]
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	9807      	ldr	r0, [sp, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf08      	it	eq
 8005f06:	4623      	moveq	r3, r4
 8005f08:	2c10      	cmp	r4, #16
 8005f0a:	9305      	str	r3, [sp, #20]
 8005f0c:	46a0      	mov	r8, r4
 8005f0e:	bfa8      	it	ge
 8005f10:	f04f 0810 	movge.w	r8, #16
 8005f14:	f7fa fb06 	bl	8000524 <__aeabi_ui2d>
 8005f18:	2c09      	cmp	r4, #9
 8005f1a:	4682      	mov	sl, r0
 8005f1c:	468b      	mov	fp, r1
 8005f1e:	dc13      	bgt.n	8005f48 <_strtod_l+0x3d0>
 8005f20:	9b06      	ldr	r3, [sp, #24]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f43f ae67 	beq.w	8005bf6 <_strtod_l+0x7e>
 8005f28:	9b06      	ldr	r3, [sp, #24]
 8005f2a:	dd7a      	ble.n	8006022 <_strtod_l+0x4aa>
 8005f2c:	2b16      	cmp	r3, #22
 8005f2e:	dc61      	bgt.n	8005ff4 <_strtod_l+0x47c>
 8005f30:	4a75      	ldr	r2, [pc, #468]	; (8006108 <_strtod_l+0x590>)
 8005f32:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005f36:	e9de 0100 	ldrd	r0, r1, [lr]
 8005f3a:	4652      	mov	r2, sl
 8005f3c:	465b      	mov	r3, fp
 8005f3e:	f7fa fb6b 	bl	8000618 <__aeabi_dmul>
 8005f42:	4682      	mov	sl, r0
 8005f44:	468b      	mov	fp, r1
 8005f46:	e656      	b.n	8005bf6 <_strtod_l+0x7e>
 8005f48:	4b6f      	ldr	r3, [pc, #444]	; (8006108 <_strtod_l+0x590>)
 8005f4a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005f4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f52:	f7fa fb61 	bl	8000618 <__aeabi_dmul>
 8005f56:	4606      	mov	r6, r0
 8005f58:	4628      	mov	r0, r5
 8005f5a:	460f      	mov	r7, r1
 8005f5c:	f7fa fae2 	bl	8000524 <__aeabi_ui2d>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4630      	mov	r0, r6
 8005f66:	4639      	mov	r1, r7
 8005f68:	f7fa f9a0 	bl	80002ac <__adddf3>
 8005f6c:	2c0f      	cmp	r4, #15
 8005f6e:	4682      	mov	sl, r0
 8005f70:	468b      	mov	fp, r1
 8005f72:	ddd5      	ble.n	8005f20 <_strtod_l+0x3a8>
 8005f74:	9b06      	ldr	r3, [sp, #24]
 8005f76:	eba4 0808 	sub.w	r8, r4, r8
 8005f7a:	4498      	add	r8, r3
 8005f7c:	f1b8 0f00 	cmp.w	r8, #0
 8005f80:	f340 8096 	ble.w	80060b0 <_strtod_l+0x538>
 8005f84:	f018 030f 	ands.w	r3, r8, #15
 8005f88:	d00a      	beq.n	8005fa0 <_strtod_l+0x428>
 8005f8a:	495f      	ldr	r1, [pc, #380]	; (8006108 <_strtod_l+0x590>)
 8005f8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f90:	4652      	mov	r2, sl
 8005f92:	465b      	mov	r3, fp
 8005f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f98:	f7fa fb3e 	bl	8000618 <__aeabi_dmul>
 8005f9c:	4682      	mov	sl, r0
 8005f9e:	468b      	mov	fp, r1
 8005fa0:	f038 080f 	bics.w	r8, r8, #15
 8005fa4:	d073      	beq.n	800608e <_strtod_l+0x516>
 8005fa6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005faa:	dd47      	ble.n	800603c <_strtod_l+0x4c4>
 8005fac:	2400      	movs	r4, #0
 8005fae:	46a0      	mov	r8, r4
 8005fb0:	9407      	str	r4, [sp, #28]
 8005fb2:	9405      	str	r4, [sp, #20]
 8005fb4:	2322      	movs	r3, #34	; 0x22
 8005fb6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006110 <_strtod_l+0x598>
 8005fba:	f8c9 3000 	str.w	r3, [r9]
 8005fbe:	f04f 0a00 	mov.w	sl, #0
 8005fc2:	9b07      	ldr	r3, [sp, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f43f ae16 	beq.w	8005bf6 <_strtod_l+0x7e>
 8005fca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fcc:	4648      	mov	r0, r9
 8005fce:	f000 ffe9 	bl	8006fa4 <_Bfree>
 8005fd2:	9905      	ldr	r1, [sp, #20]
 8005fd4:	4648      	mov	r0, r9
 8005fd6:	f000 ffe5 	bl	8006fa4 <_Bfree>
 8005fda:	4641      	mov	r1, r8
 8005fdc:	4648      	mov	r0, r9
 8005fde:	f000 ffe1 	bl	8006fa4 <_Bfree>
 8005fe2:	9907      	ldr	r1, [sp, #28]
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	f000 ffdd 	bl	8006fa4 <_Bfree>
 8005fea:	4621      	mov	r1, r4
 8005fec:	4648      	mov	r0, r9
 8005fee:	f000 ffd9 	bl	8006fa4 <_Bfree>
 8005ff2:	e600      	b.n	8005bf6 <_strtod_l+0x7e>
 8005ff4:	9a06      	ldr	r2, [sp, #24]
 8005ff6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	dbba      	blt.n	8005f74 <_strtod_l+0x3fc>
 8005ffe:	4d42      	ldr	r5, [pc, #264]	; (8006108 <_strtod_l+0x590>)
 8006000:	f1c4 040f 	rsb	r4, r4, #15
 8006004:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006008:	4652      	mov	r2, sl
 800600a:	465b      	mov	r3, fp
 800600c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006010:	f7fa fb02 	bl	8000618 <__aeabi_dmul>
 8006014:	9b06      	ldr	r3, [sp, #24]
 8006016:	1b1c      	subs	r4, r3, r4
 8006018:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800601c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006020:	e78d      	b.n	8005f3e <_strtod_l+0x3c6>
 8006022:	f113 0f16 	cmn.w	r3, #22
 8006026:	dba5      	blt.n	8005f74 <_strtod_l+0x3fc>
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <_strtod_l+0x590>)
 800602a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800602e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006032:	4650      	mov	r0, sl
 8006034:	4659      	mov	r1, fp
 8006036:	f7fa fc19 	bl	800086c <__aeabi_ddiv>
 800603a:	e782      	b.n	8005f42 <_strtod_l+0x3ca>
 800603c:	2300      	movs	r3, #0
 800603e:	4e33      	ldr	r6, [pc, #204]	; (800610c <_strtod_l+0x594>)
 8006040:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006044:	4650      	mov	r0, sl
 8006046:	4659      	mov	r1, fp
 8006048:	461d      	mov	r5, r3
 800604a:	f1b8 0f01 	cmp.w	r8, #1
 800604e:	dc21      	bgt.n	8006094 <_strtod_l+0x51c>
 8006050:	b10b      	cbz	r3, 8006056 <_strtod_l+0x4de>
 8006052:	4682      	mov	sl, r0
 8006054:	468b      	mov	fp, r1
 8006056:	4b2d      	ldr	r3, [pc, #180]	; (800610c <_strtod_l+0x594>)
 8006058:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800605c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006060:	4652      	mov	r2, sl
 8006062:	465b      	mov	r3, fp
 8006064:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006068:	f7fa fad6 	bl	8000618 <__aeabi_dmul>
 800606c:	4b28      	ldr	r3, [pc, #160]	; (8006110 <_strtod_l+0x598>)
 800606e:	460a      	mov	r2, r1
 8006070:	400b      	ands	r3, r1
 8006072:	4928      	ldr	r1, [pc, #160]	; (8006114 <_strtod_l+0x59c>)
 8006074:	428b      	cmp	r3, r1
 8006076:	4682      	mov	sl, r0
 8006078:	d898      	bhi.n	8005fac <_strtod_l+0x434>
 800607a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800607e:	428b      	cmp	r3, r1
 8006080:	bf86      	itte	hi
 8006082:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800611c <_strtod_l+0x5a4>
 8006086:	f04f 3aff 	movhi.w	sl, #4294967295
 800608a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800608e:	2300      	movs	r3, #0
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	e077      	b.n	8006184 <_strtod_l+0x60c>
 8006094:	f018 0f01 	tst.w	r8, #1
 8006098:	d006      	beq.n	80060a8 <_strtod_l+0x530>
 800609a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	f7fa fab9 	bl	8000618 <__aeabi_dmul>
 80060a6:	2301      	movs	r3, #1
 80060a8:	3501      	adds	r5, #1
 80060aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80060ae:	e7cc      	b.n	800604a <_strtod_l+0x4d2>
 80060b0:	d0ed      	beq.n	800608e <_strtod_l+0x516>
 80060b2:	f1c8 0800 	rsb	r8, r8, #0
 80060b6:	f018 020f 	ands.w	r2, r8, #15
 80060ba:	d00a      	beq.n	80060d2 <_strtod_l+0x55a>
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <_strtod_l+0x590>)
 80060be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c2:	4650      	mov	r0, sl
 80060c4:	4659      	mov	r1, fp
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa fbcf 	bl	800086c <__aeabi_ddiv>
 80060ce:	4682      	mov	sl, r0
 80060d0:	468b      	mov	fp, r1
 80060d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80060d6:	d0da      	beq.n	800608e <_strtod_l+0x516>
 80060d8:	f1b8 0f1f 	cmp.w	r8, #31
 80060dc:	dd20      	ble.n	8006120 <_strtod_l+0x5a8>
 80060de:	2400      	movs	r4, #0
 80060e0:	46a0      	mov	r8, r4
 80060e2:	9407      	str	r4, [sp, #28]
 80060e4:	9405      	str	r4, [sp, #20]
 80060e6:	2322      	movs	r3, #34	; 0x22
 80060e8:	f04f 0a00 	mov.w	sl, #0
 80060ec:	f04f 0b00 	mov.w	fp, #0
 80060f0:	f8c9 3000 	str.w	r3, [r9]
 80060f4:	e765      	b.n	8005fc2 <_strtod_l+0x44a>
 80060f6:	bf00      	nop
 80060f8:	08008d84 	.word	0x08008d84
 80060fc:	08008d87 	.word	0x08008d87
 8006100:	08008d8d 	.word	0x08008d8d
 8006104:	08008da4 	.word	0x08008da4
 8006108:	08008e18 	.word	0x08008e18
 800610c:	08008df0 	.word	0x08008df0
 8006110:	7ff00000 	.word	0x7ff00000
 8006114:	7ca00000 	.word	0x7ca00000
 8006118:	fff80000 	.word	0xfff80000
 800611c:	7fefffff 	.word	0x7fefffff
 8006120:	f018 0310 	ands.w	r3, r8, #16
 8006124:	bf18      	it	ne
 8006126:	236a      	movne	r3, #106	; 0x6a
 8006128:	4da0      	ldr	r5, [pc, #640]	; (80063ac <_strtod_l+0x834>)
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	4650      	mov	r0, sl
 800612e:	4659      	mov	r1, fp
 8006130:	2300      	movs	r3, #0
 8006132:	f1b8 0f00 	cmp.w	r8, #0
 8006136:	f300 810a 	bgt.w	800634e <_strtod_l+0x7d6>
 800613a:	b10b      	cbz	r3, 8006140 <_strtod_l+0x5c8>
 800613c:	4682      	mov	sl, r0
 800613e:	468b      	mov	fp, r1
 8006140:	9b04      	ldr	r3, [sp, #16]
 8006142:	b1bb      	cbz	r3, 8006174 <_strtod_l+0x5fc>
 8006144:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006148:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800614c:	2b00      	cmp	r3, #0
 800614e:	4659      	mov	r1, fp
 8006150:	dd10      	ble.n	8006174 <_strtod_l+0x5fc>
 8006152:	2b1f      	cmp	r3, #31
 8006154:	f340 8107 	ble.w	8006366 <_strtod_l+0x7ee>
 8006158:	2b34      	cmp	r3, #52	; 0x34
 800615a:	bfde      	ittt	le
 800615c:	3b20      	suble	r3, #32
 800615e:	f04f 32ff 	movle.w	r2, #4294967295
 8006162:	fa02 f303 	lslle.w	r3, r2, r3
 8006166:	f04f 0a00 	mov.w	sl, #0
 800616a:	bfcc      	ite	gt
 800616c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006170:	ea03 0b01 	andle.w	fp, r3, r1
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	4650      	mov	r0, sl
 800617a:	4659      	mov	r1, fp
 800617c:	f7fa fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006180:	2800      	cmp	r0, #0
 8006182:	d1ac      	bne.n	80060de <_strtod_l+0x566>
 8006184:	9b07      	ldr	r3, [sp, #28]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	9a05      	ldr	r2, [sp, #20]
 800618a:	9908      	ldr	r1, [sp, #32]
 800618c:	4623      	mov	r3, r4
 800618e:	4648      	mov	r0, r9
 8006190:	f000 ff5a 	bl	8007048 <__s2b>
 8006194:	9007      	str	r0, [sp, #28]
 8006196:	2800      	cmp	r0, #0
 8006198:	f43f af08 	beq.w	8005fac <_strtod_l+0x434>
 800619c:	9a06      	ldr	r2, [sp, #24]
 800619e:	9b06      	ldr	r3, [sp, #24]
 80061a0:	2a00      	cmp	r2, #0
 80061a2:	f1c3 0300 	rsb	r3, r3, #0
 80061a6:	bfa8      	it	ge
 80061a8:	2300      	movge	r3, #0
 80061aa:	930e      	str	r3, [sp, #56]	; 0x38
 80061ac:	2400      	movs	r4, #0
 80061ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80061b2:	9316      	str	r3, [sp, #88]	; 0x58
 80061b4:	46a0      	mov	r8, r4
 80061b6:	9b07      	ldr	r3, [sp, #28]
 80061b8:	4648      	mov	r0, r9
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	f000 febe 	bl	8006f3c <_Balloc>
 80061c0:	9005      	str	r0, [sp, #20]
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f43f aef6 	beq.w	8005fb4 <_strtod_l+0x43c>
 80061c8:	9b07      	ldr	r3, [sp, #28]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	3202      	adds	r2, #2
 80061ce:	f103 010c 	add.w	r1, r3, #12
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	300c      	adds	r0, #12
 80061d6:	f000 fea6 	bl	8006f26 <memcpy>
 80061da:	aa1e      	add	r2, sp, #120	; 0x78
 80061dc:	a91d      	add	r1, sp, #116	; 0x74
 80061de:	ec4b ab10 	vmov	d0, sl, fp
 80061e2:	4648      	mov	r0, r9
 80061e4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80061e8:	f001 f9ea 	bl	80075c0 <__d2b>
 80061ec:	901c      	str	r0, [sp, #112]	; 0x70
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f43f aee0 	beq.w	8005fb4 <_strtod_l+0x43c>
 80061f4:	2101      	movs	r1, #1
 80061f6:	4648      	mov	r0, r9
 80061f8:	f000 ffb2 	bl	8007160 <__i2b>
 80061fc:	4680      	mov	r8, r0
 80061fe:	2800      	cmp	r0, #0
 8006200:	f43f aed8 	beq.w	8005fb4 <_strtod_l+0x43c>
 8006204:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006206:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006208:	2e00      	cmp	r6, #0
 800620a:	bfab      	itete	ge
 800620c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800620e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006210:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006212:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006214:	bfac      	ite	ge
 8006216:	18f7      	addge	r7, r6, r3
 8006218:	1b9d      	sublt	r5, r3, r6
 800621a:	9b04      	ldr	r3, [sp, #16]
 800621c:	1af6      	subs	r6, r6, r3
 800621e:	4416      	add	r6, r2
 8006220:	4b63      	ldr	r3, [pc, #396]	; (80063b0 <_strtod_l+0x838>)
 8006222:	3e01      	subs	r6, #1
 8006224:	429e      	cmp	r6, r3
 8006226:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800622a:	f280 80af 	bge.w	800638c <_strtod_l+0x814>
 800622e:	1b9b      	subs	r3, r3, r6
 8006230:	2b1f      	cmp	r3, #31
 8006232:	eba2 0203 	sub.w	r2, r2, r3
 8006236:	f04f 0101 	mov.w	r1, #1
 800623a:	f300 809b 	bgt.w	8006374 <_strtod_l+0x7fc>
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	930f      	str	r3, [sp, #60]	; 0x3c
 8006244:	2300      	movs	r3, #0
 8006246:	930a      	str	r3, [sp, #40]	; 0x28
 8006248:	18be      	adds	r6, r7, r2
 800624a:	9b04      	ldr	r3, [sp, #16]
 800624c:	42b7      	cmp	r7, r6
 800624e:	4415      	add	r5, r2
 8006250:	441d      	add	r5, r3
 8006252:	463b      	mov	r3, r7
 8006254:	bfa8      	it	ge
 8006256:	4633      	movge	r3, r6
 8006258:	42ab      	cmp	r3, r5
 800625a:	bfa8      	it	ge
 800625c:	462b      	movge	r3, r5
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfc2      	ittt	gt
 8006262:	1af6      	subgt	r6, r6, r3
 8006264:	1aed      	subgt	r5, r5, r3
 8006266:	1aff      	subgt	r7, r7, r3
 8006268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800626a:	b1bb      	cbz	r3, 800629c <_strtod_l+0x724>
 800626c:	4641      	mov	r1, r8
 800626e:	461a      	mov	r2, r3
 8006270:	4648      	mov	r0, r9
 8006272:	f001 f815 	bl	80072a0 <__pow5mult>
 8006276:	4680      	mov	r8, r0
 8006278:	2800      	cmp	r0, #0
 800627a:	f43f ae9b 	beq.w	8005fb4 <_strtod_l+0x43c>
 800627e:	4601      	mov	r1, r0
 8006280:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006282:	4648      	mov	r0, r9
 8006284:	f000 ff75 	bl	8007172 <__multiply>
 8006288:	900c      	str	r0, [sp, #48]	; 0x30
 800628a:	2800      	cmp	r0, #0
 800628c:	f43f ae92 	beq.w	8005fb4 <_strtod_l+0x43c>
 8006290:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006292:	4648      	mov	r0, r9
 8006294:	f000 fe86 	bl	8006fa4 <_Bfree>
 8006298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800629a:	931c      	str	r3, [sp, #112]	; 0x70
 800629c:	2e00      	cmp	r6, #0
 800629e:	dc7a      	bgt.n	8006396 <_strtod_l+0x81e>
 80062a0:	9b06      	ldr	r3, [sp, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd08      	ble.n	80062b8 <_strtod_l+0x740>
 80062a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80062a8:	9905      	ldr	r1, [sp, #20]
 80062aa:	4648      	mov	r0, r9
 80062ac:	f000 fff8 	bl	80072a0 <__pow5mult>
 80062b0:	9005      	str	r0, [sp, #20]
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f ae7e 	beq.w	8005fb4 <_strtod_l+0x43c>
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	dd08      	ble.n	80062ce <_strtod_l+0x756>
 80062bc:	462a      	mov	r2, r5
 80062be:	9905      	ldr	r1, [sp, #20]
 80062c0:	4648      	mov	r0, r9
 80062c2:	f001 f83b 	bl	800733c <__lshift>
 80062c6:	9005      	str	r0, [sp, #20]
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f43f ae73 	beq.w	8005fb4 <_strtod_l+0x43c>
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	dd08      	ble.n	80062e4 <_strtod_l+0x76c>
 80062d2:	4641      	mov	r1, r8
 80062d4:	463a      	mov	r2, r7
 80062d6:	4648      	mov	r0, r9
 80062d8:	f001 f830 	bl	800733c <__lshift>
 80062dc:	4680      	mov	r8, r0
 80062de:	2800      	cmp	r0, #0
 80062e0:	f43f ae68 	beq.w	8005fb4 <_strtod_l+0x43c>
 80062e4:	9a05      	ldr	r2, [sp, #20]
 80062e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062e8:	4648      	mov	r0, r9
 80062ea:	f001 f895 	bl	8007418 <__mdiff>
 80062ee:	4604      	mov	r4, r0
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f43f ae5f 	beq.w	8005fb4 <_strtod_l+0x43c>
 80062f6:	68c3      	ldr	r3, [r0, #12]
 80062f8:	930c      	str	r3, [sp, #48]	; 0x30
 80062fa:	2300      	movs	r3, #0
 80062fc:	60c3      	str	r3, [r0, #12]
 80062fe:	4641      	mov	r1, r8
 8006300:	f001 f870 	bl	80073e4 <__mcmp>
 8006304:	2800      	cmp	r0, #0
 8006306:	da55      	bge.n	80063b4 <_strtod_l+0x83c>
 8006308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800630a:	b9e3      	cbnz	r3, 8006346 <_strtod_l+0x7ce>
 800630c:	f1ba 0f00 	cmp.w	sl, #0
 8006310:	d119      	bne.n	8006346 <_strtod_l+0x7ce>
 8006312:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006316:	b9b3      	cbnz	r3, 8006346 <_strtod_l+0x7ce>
 8006318:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800631c:	0d1b      	lsrs	r3, r3, #20
 800631e:	051b      	lsls	r3, r3, #20
 8006320:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006324:	d90f      	bls.n	8006346 <_strtod_l+0x7ce>
 8006326:	6963      	ldr	r3, [r4, #20]
 8006328:	b913      	cbnz	r3, 8006330 <_strtod_l+0x7b8>
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	2b01      	cmp	r3, #1
 800632e:	dd0a      	ble.n	8006346 <_strtod_l+0x7ce>
 8006330:	4621      	mov	r1, r4
 8006332:	2201      	movs	r2, #1
 8006334:	4648      	mov	r0, r9
 8006336:	f001 f801 	bl	800733c <__lshift>
 800633a:	4641      	mov	r1, r8
 800633c:	4604      	mov	r4, r0
 800633e:	f001 f851 	bl	80073e4 <__mcmp>
 8006342:	2800      	cmp	r0, #0
 8006344:	dc67      	bgt.n	8006416 <_strtod_l+0x89e>
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d171      	bne.n	8006430 <_strtod_l+0x8b8>
 800634c:	e63d      	b.n	8005fca <_strtod_l+0x452>
 800634e:	f018 0f01 	tst.w	r8, #1
 8006352:	d004      	beq.n	800635e <_strtod_l+0x7e6>
 8006354:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006358:	f7fa f95e 	bl	8000618 <__aeabi_dmul>
 800635c:	2301      	movs	r3, #1
 800635e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006362:	3508      	adds	r5, #8
 8006364:	e6e5      	b.n	8006132 <_strtod_l+0x5ba>
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	ea03 0a0a 	and.w	sl, r3, sl
 8006372:	e6ff      	b.n	8006174 <_strtod_l+0x5fc>
 8006374:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006378:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800637c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006380:	36e2      	adds	r6, #226	; 0xe2
 8006382:	fa01 f306 	lsl.w	r3, r1, r6
 8006386:	930a      	str	r3, [sp, #40]	; 0x28
 8006388:	910f      	str	r1, [sp, #60]	; 0x3c
 800638a:	e75d      	b.n	8006248 <_strtod_l+0x6d0>
 800638c:	2300      	movs	r3, #0
 800638e:	930a      	str	r3, [sp, #40]	; 0x28
 8006390:	2301      	movs	r3, #1
 8006392:	930f      	str	r3, [sp, #60]	; 0x3c
 8006394:	e758      	b.n	8006248 <_strtod_l+0x6d0>
 8006396:	4632      	mov	r2, r6
 8006398:	991c      	ldr	r1, [sp, #112]	; 0x70
 800639a:	4648      	mov	r0, r9
 800639c:	f000 ffce 	bl	800733c <__lshift>
 80063a0:	901c      	str	r0, [sp, #112]	; 0x70
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f47f af7c 	bne.w	80062a0 <_strtod_l+0x728>
 80063a8:	e604      	b.n	8005fb4 <_strtod_l+0x43c>
 80063aa:	bf00      	nop
 80063ac:	08008db8 	.word	0x08008db8
 80063b0:	fffffc02 	.word	0xfffffc02
 80063b4:	465d      	mov	r5, fp
 80063b6:	f040 8086 	bne.w	80064c6 <_strtod_l+0x94e>
 80063ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063c0:	b32a      	cbz	r2, 800640e <_strtod_l+0x896>
 80063c2:	4aaf      	ldr	r2, [pc, #700]	; (8006680 <_strtod_l+0xb08>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d153      	bne.n	8006470 <_strtod_l+0x8f8>
 80063c8:	9b04      	ldr	r3, [sp, #16]
 80063ca:	4650      	mov	r0, sl
 80063cc:	b1d3      	cbz	r3, 8006404 <_strtod_l+0x88c>
 80063ce:	4aad      	ldr	r2, [pc, #692]	; (8006684 <_strtod_l+0xb0c>)
 80063d0:	402a      	ands	r2, r5
 80063d2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80063d6:	f04f 31ff 	mov.w	r1, #4294967295
 80063da:	d816      	bhi.n	800640a <_strtod_l+0x892>
 80063dc:	0d12      	lsrs	r2, r2, #20
 80063de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80063e2:	fa01 f303 	lsl.w	r3, r1, r3
 80063e6:	4298      	cmp	r0, r3
 80063e8:	d142      	bne.n	8006470 <_strtod_l+0x8f8>
 80063ea:	4ba7      	ldr	r3, [pc, #668]	; (8006688 <_strtod_l+0xb10>)
 80063ec:	429d      	cmp	r5, r3
 80063ee:	d102      	bne.n	80063f6 <_strtod_l+0x87e>
 80063f0:	3001      	adds	r0, #1
 80063f2:	f43f addf 	beq.w	8005fb4 <_strtod_l+0x43c>
 80063f6:	4ba3      	ldr	r3, [pc, #652]	; (8006684 <_strtod_l+0xb0c>)
 80063f8:	402b      	ands	r3, r5
 80063fa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80063fe:	f04f 0a00 	mov.w	sl, #0
 8006402:	e7a0      	b.n	8006346 <_strtod_l+0x7ce>
 8006404:	f04f 33ff 	mov.w	r3, #4294967295
 8006408:	e7ed      	b.n	80063e6 <_strtod_l+0x86e>
 800640a:	460b      	mov	r3, r1
 800640c:	e7eb      	b.n	80063e6 <_strtod_l+0x86e>
 800640e:	bb7b      	cbnz	r3, 8006470 <_strtod_l+0x8f8>
 8006410:	f1ba 0f00 	cmp.w	sl, #0
 8006414:	d12c      	bne.n	8006470 <_strtod_l+0x8f8>
 8006416:	9904      	ldr	r1, [sp, #16]
 8006418:	4a9a      	ldr	r2, [pc, #616]	; (8006684 <_strtod_l+0xb0c>)
 800641a:	465b      	mov	r3, fp
 800641c:	b1f1      	cbz	r1, 800645c <_strtod_l+0x8e4>
 800641e:	ea02 010b 	and.w	r1, r2, fp
 8006422:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006426:	dc19      	bgt.n	800645c <_strtod_l+0x8e4>
 8006428:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800642c:	f77f ae5b 	ble.w	80060e6 <_strtod_l+0x56e>
 8006430:	4a96      	ldr	r2, [pc, #600]	; (800668c <_strtod_l+0xb14>)
 8006432:	2300      	movs	r3, #0
 8006434:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006438:	4650      	mov	r0, sl
 800643a:	4659      	mov	r1, fp
 800643c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006440:	f7fa f8ea 	bl	8000618 <__aeabi_dmul>
 8006444:	4682      	mov	sl, r0
 8006446:	468b      	mov	fp, r1
 8006448:	2900      	cmp	r1, #0
 800644a:	f47f adbe 	bne.w	8005fca <_strtod_l+0x452>
 800644e:	2800      	cmp	r0, #0
 8006450:	f47f adbb 	bne.w	8005fca <_strtod_l+0x452>
 8006454:	2322      	movs	r3, #34	; 0x22
 8006456:	f8c9 3000 	str.w	r3, [r9]
 800645a:	e5b6      	b.n	8005fca <_strtod_l+0x452>
 800645c:	4013      	ands	r3, r2
 800645e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006462:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006466:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800646a:	f04f 3aff 	mov.w	sl, #4294967295
 800646e:	e76a      	b.n	8006346 <_strtod_l+0x7ce>
 8006470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006472:	b193      	cbz	r3, 800649a <_strtod_l+0x922>
 8006474:	422b      	tst	r3, r5
 8006476:	f43f af66 	beq.w	8006346 <_strtod_l+0x7ce>
 800647a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800647c:	9a04      	ldr	r2, [sp, #16]
 800647e:	4650      	mov	r0, sl
 8006480:	4659      	mov	r1, fp
 8006482:	b173      	cbz	r3, 80064a2 <_strtod_l+0x92a>
 8006484:	f7ff fb5b 	bl	8005b3e <sulp>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006490:	f7f9 ff0c 	bl	80002ac <__adddf3>
 8006494:	4682      	mov	sl, r0
 8006496:	468b      	mov	fp, r1
 8006498:	e755      	b.n	8006346 <_strtod_l+0x7ce>
 800649a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800649c:	ea13 0f0a 	tst.w	r3, sl
 80064a0:	e7e9      	b.n	8006476 <_strtod_l+0x8fe>
 80064a2:	f7ff fb4c 	bl	8005b3e <sulp>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064ae:	f7f9 fefb 	bl	80002a8 <__aeabi_dsub>
 80064b2:	2200      	movs	r2, #0
 80064b4:	2300      	movs	r3, #0
 80064b6:	4682      	mov	sl, r0
 80064b8:	468b      	mov	fp, r1
 80064ba:	f7fa fb15 	bl	8000ae8 <__aeabi_dcmpeq>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f47f ae11 	bne.w	80060e6 <_strtod_l+0x56e>
 80064c4:	e73f      	b.n	8006346 <_strtod_l+0x7ce>
 80064c6:	4641      	mov	r1, r8
 80064c8:	4620      	mov	r0, r4
 80064ca:	f001 f8c8 	bl	800765e <__ratio>
 80064ce:	ec57 6b10 	vmov	r6, r7, d0
 80064d2:	2200      	movs	r2, #0
 80064d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064d8:	ee10 0a10 	vmov	r0, s0
 80064dc:	4639      	mov	r1, r7
 80064de:	f7fa fb17 	bl	8000b10 <__aeabi_dcmple>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d077      	beq.n	80065d6 <_strtod_l+0xa5e>
 80064e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d04a      	beq.n	8006582 <_strtod_l+0xa0a>
 80064ec:	4b68      	ldr	r3, [pc, #416]	; (8006690 <_strtod_l+0xb18>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064f4:	4f66      	ldr	r7, [pc, #408]	; (8006690 <_strtod_l+0xb18>)
 80064f6:	2600      	movs	r6, #0
 80064f8:	4b62      	ldr	r3, [pc, #392]	; (8006684 <_strtod_l+0xb0c>)
 80064fa:	402b      	ands	r3, r5
 80064fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80064fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006500:	4b64      	ldr	r3, [pc, #400]	; (8006694 <_strtod_l+0xb1c>)
 8006502:	429a      	cmp	r2, r3
 8006504:	f040 80ce 	bne.w	80066a4 <_strtod_l+0xb2c>
 8006508:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800650c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006510:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006514:	ec4b ab10 	vmov	d0, sl, fp
 8006518:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800651c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006520:	f000 ffd8 	bl	80074d4 <__ulp>
 8006524:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006528:	ec53 2b10 	vmov	r2, r3, d0
 800652c:	f7fa f874 	bl	8000618 <__aeabi_dmul>
 8006530:	4652      	mov	r2, sl
 8006532:	465b      	mov	r3, fp
 8006534:	f7f9 feba 	bl	80002ac <__adddf3>
 8006538:	460b      	mov	r3, r1
 800653a:	4952      	ldr	r1, [pc, #328]	; (8006684 <_strtod_l+0xb0c>)
 800653c:	4a56      	ldr	r2, [pc, #344]	; (8006698 <_strtod_l+0xb20>)
 800653e:	4019      	ands	r1, r3
 8006540:	4291      	cmp	r1, r2
 8006542:	4682      	mov	sl, r0
 8006544:	d95b      	bls.n	80065fe <_strtod_l+0xa86>
 8006546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006548:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800654c:	4293      	cmp	r3, r2
 800654e:	d103      	bne.n	8006558 <_strtod_l+0x9e0>
 8006550:	9b08      	ldr	r3, [sp, #32]
 8006552:	3301      	adds	r3, #1
 8006554:	f43f ad2e 	beq.w	8005fb4 <_strtod_l+0x43c>
 8006558:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006688 <_strtod_l+0xb10>
 800655c:	f04f 3aff 	mov.w	sl, #4294967295
 8006560:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006562:	4648      	mov	r0, r9
 8006564:	f000 fd1e 	bl	8006fa4 <_Bfree>
 8006568:	9905      	ldr	r1, [sp, #20]
 800656a:	4648      	mov	r0, r9
 800656c:	f000 fd1a 	bl	8006fa4 <_Bfree>
 8006570:	4641      	mov	r1, r8
 8006572:	4648      	mov	r0, r9
 8006574:	f000 fd16 	bl	8006fa4 <_Bfree>
 8006578:	4621      	mov	r1, r4
 800657a:	4648      	mov	r0, r9
 800657c:	f000 fd12 	bl	8006fa4 <_Bfree>
 8006580:	e619      	b.n	80061b6 <_strtod_l+0x63e>
 8006582:	f1ba 0f00 	cmp.w	sl, #0
 8006586:	d11a      	bne.n	80065be <_strtod_l+0xa46>
 8006588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800658c:	b9eb      	cbnz	r3, 80065ca <_strtod_l+0xa52>
 800658e:	2200      	movs	r2, #0
 8006590:	4b3f      	ldr	r3, [pc, #252]	; (8006690 <_strtod_l+0xb18>)
 8006592:	4630      	mov	r0, r6
 8006594:	4639      	mov	r1, r7
 8006596:	f7fa fab1 	bl	8000afc <__aeabi_dcmplt>
 800659a:	b9c8      	cbnz	r0, 80065d0 <_strtod_l+0xa58>
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	2200      	movs	r2, #0
 80065a2:	4b3e      	ldr	r3, [pc, #248]	; (800669c <_strtod_l+0xb24>)
 80065a4:	f7fa f838 	bl	8000618 <__aeabi_dmul>
 80065a8:	4606      	mov	r6, r0
 80065aa:	460f      	mov	r7, r1
 80065ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80065b0:	9618      	str	r6, [sp, #96]	; 0x60
 80065b2:	9319      	str	r3, [sp, #100]	; 0x64
 80065b4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80065b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065bc:	e79c      	b.n	80064f8 <_strtod_l+0x980>
 80065be:	f1ba 0f01 	cmp.w	sl, #1
 80065c2:	d102      	bne.n	80065ca <_strtod_l+0xa52>
 80065c4:	2d00      	cmp	r5, #0
 80065c6:	f43f ad8e 	beq.w	80060e6 <_strtod_l+0x56e>
 80065ca:	2200      	movs	r2, #0
 80065cc:	4b34      	ldr	r3, [pc, #208]	; (80066a0 <_strtod_l+0xb28>)
 80065ce:	e78f      	b.n	80064f0 <_strtod_l+0x978>
 80065d0:	2600      	movs	r6, #0
 80065d2:	4f32      	ldr	r7, [pc, #200]	; (800669c <_strtod_l+0xb24>)
 80065d4:	e7ea      	b.n	80065ac <_strtod_l+0xa34>
 80065d6:	4b31      	ldr	r3, [pc, #196]	; (800669c <_strtod_l+0xb24>)
 80065d8:	4630      	mov	r0, r6
 80065da:	4639      	mov	r1, r7
 80065dc:	2200      	movs	r2, #0
 80065de:	f7fa f81b 	bl	8000618 <__aeabi_dmul>
 80065e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065e4:	4606      	mov	r6, r0
 80065e6:	460f      	mov	r7, r1
 80065e8:	b933      	cbnz	r3, 80065f8 <_strtod_l+0xa80>
 80065ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065ee:	9010      	str	r0, [sp, #64]	; 0x40
 80065f0:	9311      	str	r3, [sp, #68]	; 0x44
 80065f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065f6:	e7df      	b.n	80065b8 <_strtod_l+0xa40>
 80065f8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80065fc:	e7f9      	b.n	80065f2 <_strtod_l+0xa7a>
 80065fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006602:	9b04      	ldr	r3, [sp, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1ab      	bne.n	8006560 <_strtod_l+0x9e8>
 8006608:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800660c:	0d1b      	lsrs	r3, r3, #20
 800660e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006610:	051b      	lsls	r3, r3, #20
 8006612:	429a      	cmp	r2, r3
 8006614:	465d      	mov	r5, fp
 8006616:	d1a3      	bne.n	8006560 <_strtod_l+0x9e8>
 8006618:	4639      	mov	r1, r7
 800661a:	4630      	mov	r0, r6
 800661c:	f7fa fa96 	bl	8000b4c <__aeabi_d2iz>
 8006620:	f7f9 ff90 	bl	8000544 <__aeabi_i2d>
 8006624:	460b      	mov	r3, r1
 8006626:	4602      	mov	r2, r0
 8006628:	4639      	mov	r1, r7
 800662a:	4630      	mov	r0, r6
 800662c:	f7f9 fe3c 	bl	80002a8 <__aeabi_dsub>
 8006630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	b933      	cbnz	r3, 8006646 <_strtod_l+0xace>
 8006638:	f1ba 0f00 	cmp.w	sl, #0
 800663c:	d103      	bne.n	8006646 <_strtod_l+0xace>
 800663e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006642:	2d00      	cmp	r5, #0
 8006644:	d06d      	beq.n	8006722 <_strtod_l+0xbaa>
 8006646:	a30a      	add	r3, pc, #40	; (adr r3, 8006670 <_strtod_l+0xaf8>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	f7fa fa54 	bl	8000afc <__aeabi_dcmplt>
 8006654:	2800      	cmp	r0, #0
 8006656:	f47f acb8 	bne.w	8005fca <_strtod_l+0x452>
 800665a:	a307      	add	r3, pc, #28	; (adr r3, 8006678 <_strtod_l+0xb00>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f7fa fa68 	bl	8000b38 <__aeabi_dcmpgt>
 8006668:	2800      	cmp	r0, #0
 800666a:	f43f af79 	beq.w	8006560 <_strtod_l+0x9e8>
 800666e:	e4ac      	b.n	8005fca <_strtod_l+0x452>
 8006670:	94a03595 	.word	0x94a03595
 8006674:	3fdfffff 	.word	0x3fdfffff
 8006678:	35afe535 	.word	0x35afe535
 800667c:	3fe00000 	.word	0x3fe00000
 8006680:	000fffff 	.word	0x000fffff
 8006684:	7ff00000 	.word	0x7ff00000
 8006688:	7fefffff 	.word	0x7fefffff
 800668c:	39500000 	.word	0x39500000
 8006690:	3ff00000 	.word	0x3ff00000
 8006694:	7fe00000 	.word	0x7fe00000
 8006698:	7c9fffff 	.word	0x7c9fffff
 800669c:	3fe00000 	.word	0x3fe00000
 80066a0:	bff00000 	.word	0xbff00000
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	b333      	cbz	r3, 80066f6 <_strtod_l+0xb7e>
 80066a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066ae:	d822      	bhi.n	80066f6 <_strtod_l+0xb7e>
 80066b0:	a327      	add	r3, pc, #156	; (adr r3, 8006750 <_strtod_l+0xbd8>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	4630      	mov	r0, r6
 80066b8:	4639      	mov	r1, r7
 80066ba:	f7fa fa29 	bl	8000b10 <__aeabi_dcmple>
 80066be:	b1a0      	cbz	r0, 80066ea <_strtod_l+0xb72>
 80066c0:	4639      	mov	r1, r7
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7fa fa6a 	bl	8000b9c <__aeabi_d2uiz>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	bf08      	it	eq
 80066cc:	2001      	moveq	r0, #1
 80066ce:	f7f9 ff29 	bl	8000524 <__aeabi_ui2d>
 80066d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	bb03      	cbnz	r3, 800671c <_strtod_l+0xba4>
 80066da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066de:	9012      	str	r0, [sp, #72]	; 0x48
 80066e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80066e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80066e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80066ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066ee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80066fa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80066fe:	f000 fee9 	bl	80074d4 <__ulp>
 8006702:	4650      	mov	r0, sl
 8006704:	ec53 2b10 	vmov	r2, r3, d0
 8006708:	4659      	mov	r1, fp
 800670a:	f7f9 ff85 	bl	8000618 <__aeabi_dmul>
 800670e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006712:	f7f9 fdcb 	bl	80002ac <__adddf3>
 8006716:	4682      	mov	sl, r0
 8006718:	468b      	mov	fp, r1
 800671a:	e772      	b.n	8006602 <_strtod_l+0xa8a>
 800671c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006720:	e7df      	b.n	80066e2 <_strtod_l+0xb6a>
 8006722:	a30d      	add	r3, pc, #52	; (adr r3, 8006758 <_strtod_l+0xbe0>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7fa f9e8 	bl	8000afc <__aeabi_dcmplt>
 800672c:	e79c      	b.n	8006668 <_strtod_l+0xaf0>
 800672e:	2300      	movs	r3, #0
 8006730:	930d      	str	r3, [sp, #52]	; 0x34
 8006732:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	f7ff ba61 	b.w	8005bfe <_strtod_l+0x86>
 800673c:	2b65      	cmp	r3, #101	; 0x65
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f43f ab4e 	beq.w	8005de2 <_strtod_l+0x26a>
 8006746:	2101      	movs	r1, #1
 8006748:	4614      	mov	r4, r2
 800674a:	9104      	str	r1, [sp, #16]
 800674c:	f7ff bacb 	b.w	8005ce6 <_strtod_l+0x16e>
 8006750:	ffc00000 	.word	0xffc00000
 8006754:	41dfffff 	.word	0x41dfffff
 8006758:	94a03595 	.word	0x94a03595
 800675c:	3fcfffff 	.word	0x3fcfffff

08006760 <strtod>:
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <strtod+0x20>)
 8006762:	4a08      	ldr	r2, [pc, #32]	; (8006784 <strtod+0x24>)
 8006764:	b410      	push	{r4}
 8006766:	681c      	ldr	r4, [r3, #0]
 8006768:	6a23      	ldr	r3, [r4, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	bf08      	it	eq
 800676e:	4613      	moveq	r3, r2
 8006770:	460a      	mov	r2, r1
 8006772:	4601      	mov	r1, r0
 8006774:	4620      	mov	r0, r4
 8006776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800677a:	f7ff b9fd 	b.w	8005b78 <_strtod_l>
 800677e:	bf00      	nop
 8006780:	200000c4 	.word	0x200000c4
 8006784:	20000128 	.word	0x20000128

08006788 <_strtol_l.isra.0>:
 8006788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	4680      	mov	r8, r0
 800678e:	4689      	mov	r9, r1
 8006790:	4692      	mov	sl, r2
 8006792:	461e      	mov	r6, r3
 8006794:	460f      	mov	r7, r1
 8006796:	463d      	mov	r5, r7
 8006798:	9808      	ldr	r0, [sp, #32]
 800679a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800679e:	f000 fbab 	bl	8006ef8 <__locale_ctype_ptr_l>
 80067a2:	4420      	add	r0, r4
 80067a4:	7843      	ldrb	r3, [r0, #1]
 80067a6:	f013 0308 	ands.w	r3, r3, #8
 80067aa:	d132      	bne.n	8006812 <_strtol_l.isra.0+0x8a>
 80067ac:	2c2d      	cmp	r4, #45	; 0x2d
 80067ae:	d132      	bne.n	8006816 <_strtol_l.isra.0+0x8e>
 80067b0:	787c      	ldrb	r4, [r7, #1]
 80067b2:	1cbd      	adds	r5, r7, #2
 80067b4:	2201      	movs	r2, #1
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	d05d      	beq.n	8006876 <_strtol_l.isra.0+0xee>
 80067ba:	2e10      	cmp	r6, #16
 80067bc:	d109      	bne.n	80067d2 <_strtol_l.isra.0+0x4a>
 80067be:	2c30      	cmp	r4, #48	; 0x30
 80067c0:	d107      	bne.n	80067d2 <_strtol_l.isra.0+0x4a>
 80067c2:	782b      	ldrb	r3, [r5, #0]
 80067c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067c8:	2b58      	cmp	r3, #88	; 0x58
 80067ca:	d14f      	bne.n	800686c <_strtol_l.isra.0+0xe4>
 80067cc:	786c      	ldrb	r4, [r5, #1]
 80067ce:	2610      	movs	r6, #16
 80067d0:	3502      	adds	r5, #2
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	bf14      	ite	ne
 80067d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80067da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80067de:	2700      	movs	r7, #0
 80067e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80067e4:	4638      	mov	r0, r7
 80067e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80067ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80067ee:	2b09      	cmp	r3, #9
 80067f0:	d817      	bhi.n	8006822 <_strtol_l.isra.0+0x9a>
 80067f2:	461c      	mov	r4, r3
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	dd23      	ble.n	8006840 <_strtol_l.isra.0+0xb8>
 80067f8:	1c7b      	adds	r3, r7, #1
 80067fa:	d007      	beq.n	800680c <_strtol_l.isra.0+0x84>
 80067fc:	4584      	cmp	ip, r0
 80067fe:	d31c      	bcc.n	800683a <_strtol_l.isra.0+0xb2>
 8006800:	d101      	bne.n	8006806 <_strtol_l.isra.0+0x7e>
 8006802:	45a6      	cmp	lr, r4
 8006804:	db19      	blt.n	800683a <_strtol_l.isra.0+0xb2>
 8006806:	fb00 4006 	mla	r0, r0, r6, r4
 800680a:	2701      	movs	r7, #1
 800680c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006810:	e7eb      	b.n	80067ea <_strtol_l.isra.0+0x62>
 8006812:	462f      	mov	r7, r5
 8006814:	e7bf      	b.n	8006796 <_strtol_l.isra.0+0xe>
 8006816:	2c2b      	cmp	r4, #43	; 0x2b
 8006818:	bf04      	itt	eq
 800681a:	1cbd      	addeq	r5, r7, #2
 800681c:	787c      	ldrbeq	r4, [r7, #1]
 800681e:	461a      	mov	r2, r3
 8006820:	e7c9      	b.n	80067b6 <_strtol_l.isra.0+0x2e>
 8006822:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006826:	2b19      	cmp	r3, #25
 8006828:	d801      	bhi.n	800682e <_strtol_l.isra.0+0xa6>
 800682a:	3c37      	subs	r4, #55	; 0x37
 800682c:	e7e2      	b.n	80067f4 <_strtol_l.isra.0+0x6c>
 800682e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006832:	2b19      	cmp	r3, #25
 8006834:	d804      	bhi.n	8006840 <_strtol_l.isra.0+0xb8>
 8006836:	3c57      	subs	r4, #87	; 0x57
 8006838:	e7dc      	b.n	80067f4 <_strtol_l.isra.0+0x6c>
 800683a:	f04f 37ff 	mov.w	r7, #4294967295
 800683e:	e7e5      	b.n	800680c <_strtol_l.isra.0+0x84>
 8006840:	1c7b      	adds	r3, r7, #1
 8006842:	d108      	bne.n	8006856 <_strtol_l.isra.0+0xce>
 8006844:	2322      	movs	r3, #34	; 0x22
 8006846:	f8c8 3000 	str.w	r3, [r8]
 800684a:	4608      	mov	r0, r1
 800684c:	f1ba 0f00 	cmp.w	sl, #0
 8006850:	d107      	bne.n	8006862 <_strtol_l.isra.0+0xda>
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	b102      	cbz	r2, 800685a <_strtol_l.isra.0+0xd2>
 8006858:	4240      	negs	r0, r0
 800685a:	f1ba 0f00 	cmp.w	sl, #0
 800685e:	d0f8      	beq.n	8006852 <_strtol_l.isra.0+0xca>
 8006860:	b10f      	cbz	r7, 8006866 <_strtol_l.isra.0+0xde>
 8006862:	f105 39ff 	add.w	r9, r5, #4294967295
 8006866:	f8ca 9000 	str.w	r9, [sl]
 800686a:	e7f2      	b.n	8006852 <_strtol_l.isra.0+0xca>
 800686c:	2430      	movs	r4, #48	; 0x30
 800686e:	2e00      	cmp	r6, #0
 8006870:	d1af      	bne.n	80067d2 <_strtol_l.isra.0+0x4a>
 8006872:	2608      	movs	r6, #8
 8006874:	e7ad      	b.n	80067d2 <_strtol_l.isra.0+0x4a>
 8006876:	2c30      	cmp	r4, #48	; 0x30
 8006878:	d0a3      	beq.n	80067c2 <_strtol_l.isra.0+0x3a>
 800687a:	260a      	movs	r6, #10
 800687c:	e7a9      	b.n	80067d2 <_strtol_l.isra.0+0x4a>
	...

08006880 <strtol>:
 8006880:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <strtol+0x24>)
 8006882:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006884:	681c      	ldr	r4, [r3, #0]
 8006886:	4d08      	ldr	r5, [pc, #32]	; (80068a8 <strtol+0x28>)
 8006888:	6a23      	ldr	r3, [r4, #32]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bf08      	it	eq
 800688e:	462b      	moveq	r3, r5
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	460a      	mov	r2, r1
 8006896:	4601      	mov	r1, r0
 8006898:	4620      	mov	r0, r4
 800689a:	f7ff ff75 	bl	8006788 <_strtol_l.isra.0>
 800689e:	b003      	add	sp, #12
 80068a0:	bd30      	pop	{r4, r5, pc}
 80068a2:	bf00      	nop
 80068a4:	200000c4 	.word	0x200000c4
 80068a8:	20000128 	.word	0x20000128

080068ac <rshift>:
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	6906      	ldr	r6, [r0, #16]
 80068b0:	114b      	asrs	r3, r1, #5
 80068b2:	429e      	cmp	r6, r3
 80068b4:	f100 0414 	add.w	r4, r0, #20
 80068b8:	dd30      	ble.n	800691c <rshift+0x70>
 80068ba:	f011 011f 	ands.w	r1, r1, #31
 80068be:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80068c2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80068c6:	d108      	bne.n	80068da <rshift+0x2e>
 80068c8:	4621      	mov	r1, r4
 80068ca:	42b2      	cmp	r2, r6
 80068cc:	460b      	mov	r3, r1
 80068ce:	d211      	bcs.n	80068f4 <rshift+0x48>
 80068d0:	f852 3b04 	ldr.w	r3, [r2], #4
 80068d4:	f841 3b04 	str.w	r3, [r1], #4
 80068d8:	e7f7      	b.n	80068ca <rshift+0x1e>
 80068da:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80068de:	f1c1 0c20 	rsb	ip, r1, #32
 80068e2:	40cd      	lsrs	r5, r1
 80068e4:	3204      	adds	r2, #4
 80068e6:	4623      	mov	r3, r4
 80068e8:	42b2      	cmp	r2, r6
 80068ea:	4617      	mov	r7, r2
 80068ec:	d30c      	bcc.n	8006908 <rshift+0x5c>
 80068ee:	601d      	str	r5, [r3, #0]
 80068f0:	b105      	cbz	r5, 80068f4 <rshift+0x48>
 80068f2:	3304      	adds	r3, #4
 80068f4:	1b1a      	subs	r2, r3, r4
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80068fc:	bf08      	it	eq
 80068fe:	2300      	moveq	r3, #0
 8006900:	6102      	str	r2, [r0, #16]
 8006902:	bf08      	it	eq
 8006904:	6143      	streq	r3, [r0, #20]
 8006906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006908:	683f      	ldr	r7, [r7, #0]
 800690a:	fa07 f70c 	lsl.w	r7, r7, ip
 800690e:	433d      	orrs	r5, r7
 8006910:	f843 5b04 	str.w	r5, [r3], #4
 8006914:	f852 5b04 	ldr.w	r5, [r2], #4
 8006918:	40cd      	lsrs	r5, r1
 800691a:	e7e5      	b.n	80068e8 <rshift+0x3c>
 800691c:	4623      	mov	r3, r4
 800691e:	e7e9      	b.n	80068f4 <rshift+0x48>

08006920 <__hexdig_fun>:
 8006920:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006924:	2b09      	cmp	r3, #9
 8006926:	d802      	bhi.n	800692e <__hexdig_fun+0xe>
 8006928:	3820      	subs	r0, #32
 800692a:	b2c0      	uxtb	r0, r0
 800692c:	4770      	bx	lr
 800692e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006932:	2b05      	cmp	r3, #5
 8006934:	d801      	bhi.n	800693a <__hexdig_fun+0x1a>
 8006936:	3847      	subs	r0, #71	; 0x47
 8006938:	e7f7      	b.n	800692a <__hexdig_fun+0xa>
 800693a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800693e:	2b05      	cmp	r3, #5
 8006940:	d801      	bhi.n	8006946 <__hexdig_fun+0x26>
 8006942:	3827      	subs	r0, #39	; 0x27
 8006944:	e7f1      	b.n	800692a <__hexdig_fun+0xa>
 8006946:	2000      	movs	r0, #0
 8006948:	4770      	bx	lr

0800694a <__gethex>:
 800694a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694e:	b08b      	sub	sp, #44	; 0x2c
 8006950:	468a      	mov	sl, r1
 8006952:	9002      	str	r0, [sp, #8]
 8006954:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006956:	9306      	str	r3, [sp, #24]
 8006958:	4690      	mov	r8, r2
 800695a:	f000 fad0 	bl	8006efe <__localeconv_l>
 800695e:	6803      	ldr	r3, [r0, #0]
 8006960:	9303      	str	r3, [sp, #12]
 8006962:	4618      	mov	r0, r3
 8006964:	f7f9 fc3e 	bl	80001e4 <strlen>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	9001      	str	r0, [sp, #4]
 800696c:	4403      	add	r3, r0
 800696e:	f04f 0b00 	mov.w	fp, #0
 8006972:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	f8da 3000 	ldr.w	r3, [sl]
 800697c:	3302      	adds	r3, #2
 800697e:	461f      	mov	r7, r3
 8006980:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006984:	2830      	cmp	r0, #48	; 0x30
 8006986:	d06c      	beq.n	8006a62 <__gethex+0x118>
 8006988:	f7ff ffca 	bl	8006920 <__hexdig_fun>
 800698c:	4604      	mov	r4, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	d16a      	bne.n	8006a68 <__gethex+0x11e>
 8006992:	9a01      	ldr	r2, [sp, #4]
 8006994:	9903      	ldr	r1, [sp, #12]
 8006996:	4638      	mov	r0, r7
 8006998:	f001 fa22 	bl	8007de0 <strncmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	d166      	bne.n	8006a6e <__gethex+0x124>
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	5cf8      	ldrb	r0, [r7, r3]
 80069a4:	18fe      	adds	r6, r7, r3
 80069a6:	f7ff ffbb 	bl	8006920 <__hexdig_fun>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d062      	beq.n	8006a74 <__gethex+0x12a>
 80069ae:	4633      	mov	r3, r6
 80069b0:	7818      	ldrb	r0, [r3, #0]
 80069b2:	2830      	cmp	r0, #48	; 0x30
 80069b4:	461f      	mov	r7, r3
 80069b6:	f103 0301 	add.w	r3, r3, #1
 80069ba:	d0f9      	beq.n	80069b0 <__gethex+0x66>
 80069bc:	f7ff ffb0 	bl	8006920 <__hexdig_fun>
 80069c0:	fab0 f580 	clz	r5, r0
 80069c4:	096d      	lsrs	r5, r5, #5
 80069c6:	4634      	mov	r4, r6
 80069c8:	f04f 0b01 	mov.w	fp, #1
 80069cc:	463a      	mov	r2, r7
 80069ce:	4616      	mov	r6, r2
 80069d0:	3201      	adds	r2, #1
 80069d2:	7830      	ldrb	r0, [r6, #0]
 80069d4:	f7ff ffa4 	bl	8006920 <__hexdig_fun>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d1f8      	bne.n	80069ce <__gethex+0x84>
 80069dc:	9a01      	ldr	r2, [sp, #4]
 80069de:	9903      	ldr	r1, [sp, #12]
 80069e0:	4630      	mov	r0, r6
 80069e2:	f001 f9fd 	bl	8007de0 <strncmp>
 80069e6:	b950      	cbnz	r0, 80069fe <__gethex+0xb4>
 80069e8:	b954      	cbnz	r4, 8006a00 <__gethex+0xb6>
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	18f4      	adds	r4, r6, r3
 80069ee:	4622      	mov	r2, r4
 80069f0:	4616      	mov	r6, r2
 80069f2:	3201      	adds	r2, #1
 80069f4:	7830      	ldrb	r0, [r6, #0]
 80069f6:	f7ff ff93 	bl	8006920 <__hexdig_fun>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d1f8      	bne.n	80069f0 <__gethex+0xa6>
 80069fe:	b10c      	cbz	r4, 8006a04 <__gethex+0xba>
 8006a00:	1ba4      	subs	r4, r4, r6
 8006a02:	00a4      	lsls	r4, r4, #2
 8006a04:	7833      	ldrb	r3, [r6, #0]
 8006a06:	2b50      	cmp	r3, #80	; 0x50
 8006a08:	d001      	beq.n	8006a0e <__gethex+0xc4>
 8006a0a:	2b70      	cmp	r3, #112	; 0x70
 8006a0c:	d140      	bne.n	8006a90 <__gethex+0x146>
 8006a0e:	7873      	ldrb	r3, [r6, #1]
 8006a10:	2b2b      	cmp	r3, #43	; 0x2b
 8006a12:	d031      	beq.n	8006a78 <__gethex+0x12e>
 8006a14:	2b2d      	cmp	r3, #45	; 0x2d
 8006a16:	d033      	beq.n	8006a80 <__gethex+0x136>
 8006a18:	1c71      	adds	r1, r6, #1
 8006a1a:	f04f 0900 	mov.w	r9, #0
 8006a1e:	7808      	ldrb	r0, [r1, #0]
 8006a20:	f7ff ff7e 	bl	8006920 <__hexdig_fun>
 8006a24:	1e43      	subs	r3, r0, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b18      	cmp	r3, #24
 8006a2a:	d831      	bhi.n	8006a90 <__gethex+0x146>
 8006a2c:	f1a0 0210 	sub.w	r2, r0, #16
 8006a30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a34:	f7ff ff74 	bl	8006920 <__hexdig_fun>
 8006a38:	1e43      	subs	r3, r0, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b18      	cmp	r3, #24
 8006a3e:	d922      	bls.n	8006a86 <__gethex+0x13c>
 8006a40:	f1b9 0f00 	cmp.w	r9, #0
 8006a44:	d000      	beq.n	8006a48 <__gethex+0xfe>
 8006a46:	4252      	negs	r2, r2
 8006a48:	4414      	add	r4, r2
 8006a4a:	f8ca 1000 	str.w	r1, [sl]
 8006a4e:	b30d      	cbz	r5, 8006a94 <__gethex+0x14a>
 8006a50:	f1bb 0f00 	cmp.w	fp, #0
 8006a54:	bf0c      	ite	eq
 8006a56:	2706      	moveq	r7, #6
 8006a58:	2700      	movne	r7, #0
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	b00b      	add	sp, #44	; 0x2c
 8006a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a62:	f10b 0b01 	add.w	fp, fp, #1
 8006a66:	e78a      	b.n	800697e <__gethex+0x34>
 8006a68:	2500      	movs	r5, #0
 8006a6a:	462c      	mov	r4, r5
 8006a6c:	e7ae      	b.n	80069cc <__gethex+0x82>
 8006a6e:	463e      	mov	r6, r7
 8006a70:	2501      	movs	r5, #1
 8006a72:	e7c7      	b.n	8006a04 <__gethex+0xba>
 8006a74:	4604      	mov	r4, r0
 8006a76:	e7fb      	b.n	8006a70 <__gethex+0x126>
 8006a78:	f04f 0900 	mov.w	r9, #0
 8006a7c:	1cb1      	adds	r1, r6, #2
 8006a7e:	e7ce      	b.n	8006a1e <__gethex+0xd4>
 8006a80:	f04f 0901 	mov.w	r9, #1
 8006a84:	e7fa      	b.n	8006a7c <__gethex+0x132>
 8006a86:	230a      	movs	r3, #10
 8006a88:	fb03 0202 	mla	r2, r3, r2, r0
 8006a8c:	3a10      	subs	r2, #16
 8006a8e:	e7cf      	b.n	8006a30 <__gethex+0xe6>
 8006a90:	4631      	mov	r1, r6
 8006a92:	e7da      	b.n	8006a4a <__gethex+0x100>
 8006a94:	1bf3      	subs	r3, r6, r7
 8006a96:	3b01      	subs	r3, #1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	2b07      	cmp	r3, #7
 8006a9c:	dc49      	bgt.n	8006b32 <__gethex+0x1e8>
 8006a9e:	9802      	ldr	r0, [sp, #8]
 8006aa0:	f000 fa4c 	bl	8006f3c <_Balloc>
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	f100 0914 	add.w	r9, r0, #20
 8006aaa:	f04f 0b00 	mov.w	fp, #0
 8006aae:	f1c3 0301 	rsb	r3, r3, #1
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	f8cd 9010 	str.w	r9, [sp, #16]
 8006ab8:	46da      	mov	sl, fp
 8006aba:	9308      	str	r3, [sp, #32]
 8006abc:	42b7      	cmp	r7, r6
 8006abe:	d33b      	bcc.n	8006b38 <__gethex+0x1ee>
 8006ac0:	9804      	ldr	r0, [sp, #16]
 8006ac2:	f840 ab04 	str.w	sl, [r0], #4
 8006ac6:	eba0 0009 	sub.w	r0, r0, r9
 8006aca:	1080      	asrs	r0, r0, #2
 8006acc:	6128      	str	r0, [r5, #16]
 8006ace:	0147      	lsls	r7, r0, #5
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	f000 faf7 	bl	80070c4 <__hi0bits>
 8006ad6:	f8d8 6000 	ldr.w	r6, [r8]
 8006ada:	1a3f      	subs	r7, r7, r0
 8006adc:	42b7      	cmp	r7, r6
 8006ade:	dd64      	ble.n	8006baa <__gethex+0x260>
 8006ae0:	1bbf      	subs	r7, r7, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 fe07 	bl	80076f8 <__any_on>
 8006aea:	4682      	mov	sl, r0
 8006aec:	b178      	cbz	r0, 8006b0e <__gethex+0x1c4>
 8006aee:	1e7b      	subs	r3, r7, #1
 8006af0:	1159      	asrs	r1, r3, #5
 8006af2:	f003 021f 	and.w	r2, r3, #31
 8006af6:	f04f 0a01 	mov.w	sl, #1
 8006afa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006afe:	fa0a f202 	lsl.w	r2, sl, r2
 8006b02:	420a      	tst	r2, r1
 8006b04:	d003      	beq.n	8006b0e <__gethex+0x1c4>
 8006b06:	4553      	cmp	r3, sl
 8006b08:	dc46      	bgt.n	8006b98 <__gethex+0x24e>
 8006b0a:	f04f 0a02 	mov.w	sl, #2
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7ff fecb 	bl	80068ac <rshift>
 8006b16:	443c      	add	r4, r7
 8006b18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	da52      	bge.n	8006bc6 <__gethex+0x27c>
 8006b20:	4629      	mov	r1, r5
 8006b22:	9802      	ldr	r0, [sp, #8]
 8006b24:	f000 fa3e 	bl	8006fa4 <_Bfree>
 8006b28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	27a3      	movs	r7, #163	; 0xa3
 8006b30:	e793      	b.n	8006a5a <__gethex+0x110>
 8006b32:	3101      	adds	r1, #1
 8006b34:	105b      	asrs	r3, r3, #1
 8006b36:	e7b0      	b.n	8006a9a <__gethex+0x150>
 8006b38:	1e73      	subs	r3, r6, #1
 8006b3a:	9305      	str	r3, [sp, #20]
 8006b3c:	9a07      	ldr	r2, [sp, #28]
 8006b3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <__gethex+0x22e>
 8006b46:	f1bb 0f20 	cmp.w	fp, #32
 8006b4a:	d107      	bne.n	8006b5c <__gethex+0x212>
 8006b4c:	9b04      	ldr	r3, [sp, #16]
 8006b4e:	f8c3 a000 	str.w	sl, [r3]
 8006b52:	3304      	adds	r3, #4
 8006b54:	f04f 0a00 	mov.w	sl, #0
 8006b58:	9304      	str	r3, [sp, #16]
 8006b5a:	46d3      	mov	fp, sl
 8006b5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b60:	f7ff fede 	bl	8006920 <__hexdig_fun>
 8006b64:	f000 000f 	and.w	r0, r0, #15
 8006b68:	fa00 f00b 	lsl.w	r0, r0, fp
 8006b6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006b70:	f10b 0b04 	add.w	fp, fp, #4
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	e00d      	b.n	8006b94 <__gethex+0x24a>
 8006b78:	9b05      	ldr	r3, [sp, #20]
 8006b7a:	9a08      	ldr	r2, [sp, #32]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	42bb      	cmp	r3, r7
 8006b80:	d3e1      	bcc.n	8006b46 <__gethex+0x1fc>
 8006b82:	4618      	mov	r0, r3
 8006b84:	9a01      	ldr	r2, [sp, #4]
 8006b86:	9903      	ldr	r1, [sp, #12]
 8006b88:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8a:	f001 f929 	bl	8007de0 <strncmp>
 8006b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d1d8      	bne.n	8006b46 <__gethex+0x1fc>
 8006b94:	461e      	mov	r6, r3
 8006b96:	e791      	b.n	8006abc <__gethex+0x172>
 8006b98:	1eb9      	subs	r1, r7, #2
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 fdac 	bl	80076f8 <__any_on>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0b2      	beq.n	8006b0a <__gethex+0x1c0>
 8006ba4:	f04f 0a03 	mov.w	sl, #3
 8006ba8:	e7b1      	b.n	8006b0e <__gethex+0x1c4>
 8006baa:	da09      	bge.n	8006bc0 <__gethex+0x276>
 8006bac:	1bf7      	subs	r7, r6, r7
 8006bae:	4629      	mov	r1, r5
 8006bb0:	463a      	mov	r2, r7
 8006bb2:	9802      	ldr	r0, [sp, #8]
 8006bb4:	f000 fbc2 	bl	800733c <__lshift>
 8006bb8:	1be4      	subs	r4, r4, r7
 8006bba:	4605      	mov	r5, r0
 8006bbc:	f100 0914 	add.w	r9, r0, #20
 8006bc0:	f04f 0a00 	mov.w	sl, #0
 8006bc4:	e7a8      	b.n	8006b18 <__gethex+0x1ce>
 8006bc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bca:	42a0      	cmp	r0, r4
 8006bcc:	dd6a      	ble.n	8006ca4 <__gethex+0x35a>
 8006bce:	1b04      	subs	r4, r0, r4
 8006bd0:	42a6      	cmp	r6, r4
 8006bd2:	dc2e      	bgt.n	8006c32 <__gethex+0x2e8>
 8006bd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d022      	beq.n	8006c22 <__gethex+0x2d8>
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d024      	beq.n	8006c2a <__gethex+0x2e0>
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d115      	bne.n	8006c10 <__gethex+0x2c6>
 8006be4:	42a6      	cmp	r6, r4
 8006be6:	d113      	bne.n	8006c10 <__gethex+0x2c6>
 8006be8:	2e01      	cmp	r6, #1
 8006bea:	dc0b      	bgt.n	8006c04 <__gethex+0x2ba>
 8006bec:	9a06      	ldr	r2, [sp, #24]
 8006bee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	612b      	str	r3, [r5, #16]
 8006bf8:	f8c9 3000 	str.w	r3, [r9]
 8006bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bfe:	2762      	movs	r7, #98	; 0x62
 8006c00:	601d      	str	r5, [r3, #0]
 8006c02:	e72a      	b.n	8006a5a <__gethex+0x110>
 8006c04:	1e71      	subs	r1, r6, #1
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 fd76 	bl	80076f8 <__any_on>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d1ed      	bne.n	8006bec <__gethex+0x2a2>
 8006c10:	4629      	mov	r1, r5
 8006c12:	9802      	ldr	r0, [sp, #8]
 8006c14:	f000 f9c6 	bl	8006fa4 <_Bfree>
 8006c18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	2750      	movs	r7, #80	; 0x50
 8006c20:	e71b      	b.n	8006a5a <__gethex+0x110>
 8006c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0e1      	beq.n	8006bec <__gethex+0x2a2>
 8006c28:	e7f2      	b.n	8006c10 <__gethex+0x2c6>
 8006c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1dd      	bne.n	8006bec <__gethex+0x2a2>
 8006c30:	e7ee      	b.n	8006c10 <__gethex+0x2c6>
 8006c32:	1e67      	subs	r7, r4, #1
 8006c34:	f1ba 0f00 	cmp.w	sl, #0
 8006c38:	d131      	bne.n	8006c9e <__gethex+0x354>
 8006c3a:	b127      	cbz	r7, 8006c46 <__gethex+0x2fc>
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 fd5a 	bl	80076f8 <__any_on>
 8006c44:	4682      	mov	sl, r0
 8006c46:	117a      	asrs	r2, r7, #5
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f007 071f 	and.w	r7, r7, #31
 8006c4e:	fa03 f707 	lsl.w	r7, r3, r7
 8006c52:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006c56:	4621      	mov	r1, r4
 8006c58:	421f      	tst	r7, r3
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	bf18      	it	ne
 8006c5e:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c62:	1b36      	subs	r6, r6, r4
 8006c64:	f7ff fe22 	bl	80068ac <rshift>
 8006c68:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006c6c:	2702      	movs	r7, #2
 8006c6e:	f1ba 0f00 	cmp.w	sl, #0
 8006c72:	d048      	beq.n	8006d06 <__gethex+0x3bc>
 8006c74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d015      	beq.n	8006ca8 <__gethex+0x35e>
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d017      	beq.n	8006cb0 <__gethex+0x366>
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d109      	bne.n	8006c98 <__gethex+0x34e>
 8006c84:	f01a 0f02 	tst.w	sl, #2
 8006c88:	d006      	beq.n	8006c98 <__gethex+0x34e>
 8006c8a:	f8d9 3000 	ldr.w	r3, [r9]
 8006c8e:	ea4a 0a03 	orr.w	sl, sl, r3
 8006c92:	f01a 0f01 	tst.w	sl, #1
 8006c96:	d10e      	bne.n	8006cb6 <__gethex+0x36c>
 8006c98:	f047 0710 	orr.w	r7, r7, #16
 8006c9c:	e033      	b.n	8006d06 <__gethex+0x3bc>
 8006c9e:	f04f 0a01 	mov.w	sl, #1
 8006ca2:	e7d0      	b.n	8006c46 <__gethex+0x2fc>
 8006ca4:	2701      	movs	r7, #1
 8006ca6:	e7e2      	b.n	8006c6e <__gethex+0x324>
 8006ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006caa:	f1c3 0301 	rsb	r3, r3, #1
 8006cae:	9315      	str	r3, [sp, #84]	; 0x54
 8006cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <__gethex+0x34e>
 8006cb6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006cba:	f105 0314 	add.w	r3, r5, #20
 8006cbe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006cc2:	eb03 010a 	add.w	r1, r3, sl
 8006cc6:	f04f 0c00 	mov.w	ip, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006cd4:	d01c      	beq.n	8006d10 <__gethex+0x3c6>
 8006cd6:	3201      	adds	r2, #1
 8006cd8:	6002      	str	r2, [r0, #0]
 8006cda:	2f02      	cmp	r7, #2
 8006cdc:	f105 0314 	add.w	r3, r5, #20
 8006ce0:	d138      	bne.n	8006d54 <__gethex+0x40a>
 8006ce2:	f8d8 2000 	ldr.w	r2, [r8]
 8006ce6:	3a01      	subs	r2, #1
 8006ce8:	42b2      	cmp	r2, r6
 8006cea:	d10a      	bne.n	8006d02 <__gethex+0x3b8>
 8006cec:	1171      	asrs	r1, r6, #5
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f006 061f 	and.w	r6, r6, #31
 8006cf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cf8:	fa02 f606 	lsl.w	r6, r2, r6
 8006cfc:	421e      	tst	r6, r3
 8006cfe:	bf18      	it	ne
 8006d00:	4617      	movne	r7, r2
 8006d02:	f047 0720 	orr.w	r7, r7, #32
 8006d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d08:	601d      	str	r5, [r3, #0]
 8006d0a:	9b06      	ldr	r3, [sp, #24]
 8006d0c:	601c      	str	r4, [r3, #0]
 8006d0e:	e6a4      	b.n	8006a5a <__gethex+0x110>
 8006d10:	4299      	cmp	r1, r3
 8006d12:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d16:	d8d8      	bhi.n	8006cca <__gethex+0x380>
 8006d18:	68ab      	ldr	r3, [r5, #8]
 8006d1a:	4599      	cmp	r9, r3
 8006d1c:	db12      	blt.n	8006d44 <__gethex+0x3fa>
 8006d1e:	6869      	ldr	r1, [r5, #4]
 8006d20:	9802      	ldr	r0, [sp, #8]
 8006d22:	3101      	adds	r1, #1
 8006d24:	f000 f90a 	bl	8006f3c <_Balloc>
 8006d28:	692a      	ldr	r2, [r5, #16]
 8006d2a:	3202      	adds	r2, #2
 8006d2c:	f105 010c 	add.w	r1, r5, #12
 8006d30:	4683      	mov	fp, r0
 8006d32:	0092      	lsls	r2, r2, #2
 8006d34:	300c      	adds	r0, #12
 8006d36:	f000 f8f6 	bl	8006f26 <memcpy>
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	9802      	ldr	r0, [sp, #8]
 8006d3e:	f000 f931 	bl	8006fa4 <_Bfree>
 8006d42:	465d      	mov	r5, fp
 8006d44:	692b      	ldr	r3, [r5, #16]
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006d4c:	612a      	str	r2, [r5, #16]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	615a      	str	r2, [r3, #20]
 8006d52:	e7c2      	b.n	8006cda <__gethex+0x390>
 8006d54:	692a      	ldr	r2, [r5, #16]
 8006d56:	454a      	cmp	r2, r9
 8006d58:	dd0b      	ble.n	8006d72 <__gethex+0x428>
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff fda5 	bl	80068ac <rshift>
 8006d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d66:	3401      	adds	r4, #1
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	f6ff aed9 	blt.w	8006b20 <__gethex+0x1d6>
 8006d6e:	2701      	movs	r7, #1
 8006d70:	e7c7      	b.n	8006d02 <__gethex+0x3b8>
 8006d72:	f016 061f 	ands.w	r6, r6, #31
 8006d76:	d0fa      	beq.n	8006d6e <__gethex+0x424>
 8006d78:	449a      	add	sl, r3
 8006d7a:	f1c6 0620 	rsb	r6, r6, #32
 8006d7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006d82:	f000 f99f 	bl	80070c4 <__hi0bits>
 8006d86:	42b0      	cmp	r0, r6
 8006d88:	dbe7      	blt.n	8006d5a <__gethex+0x410>
 8006d8a:	e7f0      	b.n	8006d6e <__gethex+0x424>

08006d8c <L_shift>:
 8006d8c:	f1c2 0208 	rsb	r2, r2, #8
 8006d90:	0092      	lsls	r2, r2, #2
 8006d92:	b570      	push	{r4, r5, r6, lr}
 8006d94:	f1c2 0620 	rsb	r6, r2, #32
 8006d98:	6843      	ldr	r3, [r0, #4]
 8006d9a:	6804      	ldr	r4, [r0, #0]
 8006d9c:	fa03 f506 	lsl.w	r5, r3, r6
 8006da0:	432c      	orrs	r4, r5
 8006da2:	40d3      	lsrs	r3, r2
 8006da4:	6004      	str	r4, [r0, #0]
 8006da6:	f840 3f04 	str.w	r3, [r0, #4]!
 8006daa:	4288      	cmp	r0, r1
 8006dac:	d3f4      	bcc.n	8006d98 <L_shift+0xc>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}

08006db0 <__match>:
 8006db0:	b530      	push	{r4, r5, lr}
 8006db2:	6803      	ldr	r3, [r0, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dba:	b914      	cbnz	r4, 8006dc2 <__match+0x12>
 8006dbc:	6003      	str	r3, [r0, #0]
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	bd30      	pop	{r4, r5, pc}
 8006dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006dca:	2d19      	cmp	r5, #25
 8006dcc:	bf98      	it	ls
 8006dce:	3220      	addls	r2, #32
 8006dd0:	42a2      	cmp	r2, r4
 8006dd2:	d0f0      	beq.n	8006db6 <__match+0x6>
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	e7f3      	b.n	8006dc0 <__match+0x10>

08006dd8 <__hexnan>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	680b      	ldr	r3, [r1, #0]
 8006dde:	6801      	ldr	r1, [r0, #0]
 8006de0:	115f      	asrs	r7, r3, #5
 8006de2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006de6:	f013 031f 	ands.w	r3, r3, #31
 8006dea:	b087      	sub	sp, #28
 8006dec:	bf18      	it	ne
 8006dee:	3704      	addne	r7, #4
 8006df0:	2500      	movs	r5, #0
 8006df2:	1f3e      	subs	r6, r7, #4
 8006df4:	4682      	mov	sl, r0
 8006df6:	4690      	mov	r8, r2
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	f847 5c04 	str.w	r5, [r7, #-4]
 8006dfe:	46b1      	mov	r9, r6
 8006e00:	4634      	mov	r4, r6
 8006e02:	9502      	str	r5, [sp, #8]
 8006e04:	46ab      	mov	fp, r5
 8006e06:	784a      	ldrb	r2, [r1, #1]
 8006e08:	1c4b      	adds	r3, r1, #1
 8006e0a:	9303      	str	r3, [sp, #12]
 8006e0c:	b342      	cbz	r2, 8006e60 <__hexnan+0x88>
 8006e0e:	4610      	mov	r0, r2
 8006e10:	9105      	str	r1, [sp, #20]
 8006e12:	9204      	str	r2, [sp, #16]
 8006e14:	f7ff fd84 	bl	8006920 <__hexdig_fun>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d143      	bne.n	8006ea4 <__hexnan+0xcc>
 8006e1c:	9a04      	ldr	r2, [sp, #16]
 8006e1e:	9905      	ldr	r1, [sp, #20]
 8006e20:	2a20      	cmp	r2, #32
 8006e22:	d818      	bhi.n	8006e56 <__hexnan+0x7e>
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	459b      	cmp	fp, r3
 8006e28:	dd13      	ble.n	8006e52 <__hexnan+0x7a>
 8006e2a:	454c      	cmp	r4, r9
 8006e2c:	d206      	bcs.n	8006e3c <__hexnan+0x64>
 8006e2e:	2d07      	cmp	r5, #7
 8006e30:	dc04      	bgt.n	8006e3c <__hexnan+0x64>
 8006e32:	462a      	mov	r2, r5
 8006e34:	4649      	mov	r1, r9
 8006e36:	4620      	mov	r0, r4
 8006e38:	f7ff ffa8 	bl	8006d8c <L_shift>
 8006e3c:	4544      	cmp	r4, r8
 8006e3e:	d944      	bls.n	8006eca <__hexnan+0xf2>
 8006e40:	2300      	movs	r3, #0
 8006e42:	f1a4 0904 	sub.w	r9, r4, #4
 8006e46:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e4a:	f8cd b008 	str.w	fp, [sp, #8]
 8006e4e:	464c      	mov	r4, r9
 8006e50:	461d      	mov	r5, r3
 8006e52:	9903      	ldr	r1, [sp, #12]
 8006e54:	e7d7      	b.n	8006e06 <__hexnan+0x2e>
 8006e56:	2a29      	cmp	r2, #41	; 0x29
 8006e58:	d14a      	bne.n	8006ef0 <__hexnan+0x118>
 8006e5a:	3102      	adds	r1, #2
 8006e5c:	f8ca 1000 	str.w	r1, [sl]
 8006e60:	f1bb 0f00 	cmp.w	fp, #0
 8006e64:	d044      	beq.n	8006ef0 <__hexnan+0x118>
 8006e66:	454c      	cmp	r4, r9
 8006e68:	d206      	bcs.n	8006e78 <__hexnan+0xa0>
 8006e6a:	2d07      	cmp	r5, #7
 8006e6c:	dc04      	bgt.n	8006e78 <__hexnan+0xa0>
 8006e6e:	462a      	mov	r2, r5
 8006e70:	4649      	mov	r1, r9
 8006e72:	4620      	mov	r0, r4
 8006e74:	f7ff ff8a 	bl	8006d8c <L_shift>
 8006e78:	4544      	cmp	r4, r8
 8006e7a:	d928      	bls.n	8006ece <__hexnan+0xf6>
 8006e7c:	4643      	mov	r3, r8
 8006e7e:	f854 2b04 	ldr.w	r2, [r4], #4
 8006e82:	f843 2b04 	str.w	r2, [r3], #4
 8006e86:	42a6      	cmp	r6, r4
 8006e88:	d2f9      	bcs.n	8006e7e <__hexnan+0xa6>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f843 2b04 	str.w	r2, [r3], #4
 8006e90:	429e      	cmp	r6, r3
 8006e92:	d2fb      	bcs.n	8006e8c <__hexnan+0xb4>
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	b91b      	cbnz	r3, 8006ea0 <__hexnan+0xc8>
 8006e98:	4546      	cmp	r6, r8
 8006e9a:	d127      	bne.n	8006eec <__hexnan+0x114>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	6033      	str	r3, [r6, #0]
 8006ea0:	2005      	movs	r0, #5
 8006ea2:	e026      	b.n	8006ef2 <__hexnan+0x11a>
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	2d08      	cmp	r5, #8
 8006ea8:	f10b 0b01 	add.w	fp, fp, #1
 8006eac:	dd06      	ble.n	8006ebc <__hexnan+0xe4>
 8006eae:	4544      	cmp	r4, r8
 8006eb0:	d9cf      	bls.n	8006e52 <__hexnan+0x7a>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f844 3c04 	str.w	r3, [r4, #-4]
 8006eb8:	2501      	movs	r5, #1
 8006eba:	3c04      	subs	r4, #4
 8006ebc:	6822      	ldr	r2, [r4, #0]
 8006ebe:	f000 000f 	and.w	r0, r0, #15
 8006ec2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006ec6:	6020      	str	r0, [r4, #0]
 8006ec8:	e7c3      	b.n	8006e52 <__hexnan+0x7a>
 8006eca:	2508      	movs	r5, #8
 8006ecc:	e7c1      	b.n	8006e52 <__hexnan+0x7a>
 8006ece:	9b01      	ldr	r3, [sp, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0df      	beq.n	8006e94 <__hexnan+0xbc>
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	f1c3 0320 	rsb	r3, r3, #32
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006ee4:	401a      	ands	r2, r3
 8006ee6:	f847 2c04 	str.w	r2, [r7, #-4]
 8006eea:	e7d3      	b.n	8006e94 <__hexnan+0xbc>
 8006eec:	3e04      	subs	r6, #4
 8006eee:	e7d1      	b.n	8006e94 <__hexnan+0xbc>
 8006ef0:	2004      	movs	r0, #4
 8006ef2:	b007      	add	sp, #28
 8006ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ef8 <__locale_ctype_ptr_l>:
 8006ef8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006efc:	4770      	bx	lr

08006efe <__localeconv_l>:
 8006efe:	30f0      	adds	r0, #240	; 0xf0
 8006f00:	4770      	bx	lr

08006f02 <__ascii_mbtowc>:
 8006f02:	b082      	sub	sp, #8
 8006f04:	b901      	cbnz	r1, 8006f08 <__ascii_mbtowc+0x6>
 8006f06:	a901      	add	r1, sp, #4
 8006f08:	b142      	cbz	r2, 8006f1c <__ascii_mbtowc+0x1a>
 8006f0a:	b14b      	cbz	r3, 8006f20 <__ascii_mbtowc+0x1e>
 8006f0c:	7813      	ldrb	r3, [r2, #0]
 8006f0e:	600b      	str	r3, [r1, #0]
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	1c10      	adds	r0, r2, #0
 8006f14:	bf18      	it	ne
 8006f16:	2001      	movne	r0, #1
 8006f18:	b002      	add	sp, #8
 8006f1a:	4770      	bx	lr
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	e7fb      	b.n	8006f18 <__ascii_mbtowc+0x16>
 8006f20:	f06f 0001 	mvn.w	r0, #1
 8006f24:	e7f8      	b.n	8006f18 <__ascii_mbtowc+0x16>

08006f26 <memcpy>:
 8006f26:	b510      	push	{r4, lr}
 8006f28:	1e43      	subs	r3, r0, #1
 8006f2a:	440a      	add	r2, r1
 8006f2c:	4291      	cmp	r1, r2
 8006f2e:	d100      	bne.n	8006f32 <memcpy+0xc>
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f3a:	e7f7      	b.n	8006f2c <memcpy+0x6>

08006f3c <_Balloc>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f40:	4604      	mov	r4, r0
 8006f42:	460e      	mov	r6, r1
 8006f44:	b93d      	cbnz	r5, 8006f56 <_Balloc+0x1a>
 8006f46:	2010      	movs	r0, #16
 8006f48:	f000 ff6a 	bl	8007e20 <malloc>
 8006f4c:	6260      	str	r0, [r4, #36]	; 0x24
 8006f4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f52:	6005      	str	r5, [r0, #0]
 8006f54:	60c5      	str	r5, [r0, #12]
 8006f56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f58:	68eb      	ldr	r3, [r5, #12]
 8006f5a:	b183      	cbz	r3, 8006f7e <_Balloc+0x42>
 8006f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f64:	b9b8      	cbnz	r0, 8006f96 <_Balloc+0x5a>
 8006f66:	2101      	movs	r1, #1
 8006f68:	fa01 f506 	lsl.w	r5, r1, r6
 8006f6c:	1d6a      	adds	r2, r5, #5
 8006f6e:	0092      	lsls	r2, r2, #2
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 fbe2 	bl	800773a <_calloc_r>
 8006f76:	b160      	cbz	r0, 8006f92 <_Balloc+0x56>
 8006f78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006f7c:	e00e      	b.n	8006f9c <_Balloc+0x60>
 8006f7e:	2221      	movs	r2, #33	; 0x21
 8006f80:	2104      	movs	r1, #4
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 fbd9 	bl	800773a <_calloc_r>
 8006f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f8a:	60e8      	str	r0, [r5, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e4      	bne.n	8006f5c <_Balloc+0x20>
 8006f92:	2000      	movs	r0, #0
 8006f94:	bd70      	pop	{r4, r5, r6, pc}
 8006f96:	6802      	ldr	r2, [r0, #0]
 8006f98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fa2:	e7f7      	b.n	8006f94 <_Balloc+0x58>

08006fa4 <_Bfree>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	b93c      	cbnz	r4, 8006fbe <_Bfree+0x1a>
 8006fae:	2010      	movs	r0, #16
 8006fb0:	f000 ff36 	bl	8007e20 <malloc>
 8006fb4:	6270      	str	r0, [r6, #36]	; 0x24
 8006fb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fba:	6004      	str	r4, [r0, #0]
 8006fbc:	60c4      	str	r4, [r0, #12]
 8006fbe:	b13d      	cbz	r5, 8006fd0 <_Bfree+0x2c>
 8006fc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006fc2:	686a      	ldr	r2, [r5, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fca:	6029      	str	r1, [r5, #0]
 8006fcc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}

08006fd2 <__multadd>:
 8006fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	690d      	ldr	r5, [r1, #16]
 8006fd8:	461f      	mov	r7, r3
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	f101 0c14 	add.w	ip, r1, #20
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8dc 0000 	ldr.w	r0, [ip]
 8006fe8:	b281      	uxth	r1, r0
 8006fea:	fb02 7101 	mla	r1, r2, r1, r7
 8006fee:	0c0f      	lsrs	r7, r1, #16
 8006ff0:	0c00      	lsrs	r0, r0, #16
 8006ff2:	fb02 7000 	mla	r0, r2, r0, r7
 8006ff6:	b289      	uxth	r1, r1
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006ffe:	429d      	cmp	r5, r3
 8007000:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007004:	f84c 1b04 	str.w	r1, [ip], #4
 8007008:	dcec      	bgt.n	8006fe4 <__multadd+0x12>
 800700a:	b1d7      	cbz	r7, 8007042 <__multadd+0x70>
 800700c:	68a3      	ldr	r3, [r4, #8]
 800700e:	42ab      	cmp	r3, r5
 8007010:	dc12      	bgt.n	8007038 <__multadd+0x66>
 8007012:	6861      	ldr	r1, [r4, #4]
 8007014:	4630      	mov	r0, r6
 8007016:	3101      	adds	r1, #1
 8007018:	f7ff ff90 	bl	8006f3c <_Balloc>
 800701c:	6922      	ldr	r2, [r4, #16]
 800701e:	3202      	adds	r2, #2
 8007020:	f104 010c 	add.w	r1, r4, #12
 8007024:	4680      	mov	r8, r0
 8007026:	0092      	lsls	r2, r2, #2
 8007028:	300c      	adds	r0, #12
 800702a:	f7ff ff7c 	bl	8006f26 <memcpy>
 800702e:	4621      	mov	r1, r4
 8007030:	4630      	mov	r0, r6
 8007032:	f7ff ffb7 	bl	8006fa4 <_Bfree>
 8007036:	4644      	mov	r4, r8
 8007038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800703c:	3501      	adds	r5, #1
 800703e:	615f      	str	r7, [r3, #20]
 8007040:	6125      	str	r5, [r4, #16]
 8007042:	4620      	mov	r0, r4
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007048 <__s2b>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	460c      	mov	r4, r1
 800704e:	4615      	mov	r5, r2
 8007050:	461f      	mov	r7, r3
 8007052:	2209      	movs	r2, #9
 8007054:	3308      	adds	r3, #8
 8007056:	4606      	mov	r6, r0
 8007058:	fb93 f3f2 	sdiv	r3, r3, r2
 800705c:	2100      	movs	r1, #0
 800705e:	2201      	movs	r2, #1
 8007060:	429a      	cmp	r2, r3
 8007062:	db20      	blt.n	80070a6 <__s2b+0x5e>
 8007064:	4630      	mov	r0, r6
 8007066:	f7ff ff69 	bl	8006f3c <_Balloc>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	6143      	str	r3, [r0, #20]
 800706e:	2d09      	cmp	r5, #9
 8007070:	f04f 0301 	mov.w	r3, #1
 8007074:	6103      	str	r3, [r0, #16]
 8007076:	dd19      	ble.n	80070ac <__s2b+0x64>
 8007078:	f104 0809 	add.w	r8, r4, #9
 800707c:	46c1      	mov	r9, r8
 800707e:	442c      	add	r4, r5
 8007080:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007084:	4601      	mov	r1, r0
 8007086:	3b30      	subs	r3, #48	; 0x30
 8007088:	220a      	movs	r2, #10
 800708a:	4630      	mov	r0, r6
 800708c:	f7ff ffa1 	bl	8006fd2 <__multadd>
 8007090:	45a1      	cmp	r9, r4
 8007092:	d1f5      	bne.n	8007080 <__s2b+0x38>
 8007094:	eb08 0405 	add.w	r4, r8, r5
 8007098:	3c08      	subs	r4, #8
 800709a:	1b2d      	subs	r5, r5, r4
 800709c:	1963      	adds	r3, r4, r5
 800709e:	42bb      	cmp	r3, r7
 80070a0:	db07      	blt.n	80070b2 <__s2b+0x6a>
 80070a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a6:	0052      	lsls	r2, r2, #1
 80070a8:	3101      	adds	r1, #1
 80070aa:	e7d9      	b.n	8007060 <__s2b+0x18>
 80070ac:	340a      	adds	r4, #10
 80070ae:	2509      	movs	r5, #9
 80070b0:	e7f3      	b.n	800709a <__s2b+0x52>
 80070b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070b6:	4601      	mov	r1, r0
 80070b8:	3b30      	subs	r3, #48	; 0x30
 80070ba:	220a      	movs	r2, #10
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff ff88 	bl	8006fd2 <__multadd>
 80070c2:	e7eb      	b.n	800709c <__s2b+0x54>

080070c4 <__hi0bits>:
 80070c4:	0c02      	lsrs	r2, r0, #16
 80070c6:	0412      	lsls	r2, r2, #16
 80070c8:	4603      	mov	r3, r0
 80070ca:	b9b2      	cbnz	r2, 80070fa <__hi0bits+0x36>
 80070cc:	0403      	lsls	r3, r0, #16
 80070ce:	2010      	movs	r0, #16
 80070d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070d4:	bf04      	itt	eq
 80070d6:	021b      	lsleq	r3, r3, #8
 80070d8:	3008      	addeq	r0, #8
 80070da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070de:	bf04      	itt	eq
 80070e0:	011b      	lsleq	r3, r3, #4
 80070e2:	3004      	addeq	r0, #4
 80070e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070e8:	bf04      	itt	eq
 80070ea:	009b      	lsleq	r3, r3, #2
 80070ec:	3002      	addeq	r0, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	db06      	blt.n	8007100 <__hi0bits+0x3c>
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	d503      	bpl.n	80070fe <__hi0bits+0x3a>
 80070f6:	3001      	adds	r0, #1
 80070f8:	4770      	bx	lr
 80070fa:	2000      	movs	r0, #0
 80070fc:	e7e8      	b.n	80070d0 <__hi0bits+0xc>
 80070fe:	2020      	movs	r0, #32
 8007100:	4770      	bx	lr

08007102 <__lo0bits>:
 8007102:	6803      	ldr	r3, [r0, #0]
 8007104:	f013 0207 	ands.w	r2, r3, #7
 8007108:	4601      	mov	r1, r0
 800710a:	d00b      	beq.n	8007124 <__lo0bits+0x22>
 800710c:	07da      	lsls	r2, r3, #31
 800710e:	d423      	bmi.n	8007158 <__lo0bits+0x56>
 8007110:	0798      	lsls	r0, r3, #30
 8007112:	bf49      	itett	mi
 8007114:	085b      	lsrmi	r3, r3, #1
 8007116:	089b      	lsrpl	r3, r3, #2
 8007118:	2001      	movmi	r0, #1
 800711a:	600b      	strmi	r3, [r1, #0]
 800711c:	bf5c      	itt	pl
 800711e:	600b      	strpl	r3, [r1, #0]
 8007120:	2002      	movpl	r0, #2
 8007122:	4770      	bx	lr
 8007124:	b298      	uxth	r0, r3
 8007126:	b9a8      	cbnz	r0, 8007154 <__lo0bits+0x52>
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	2010      	movs	r0, #16
 800712c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007130:	bf04      	itt	eq
 8007132:	0a1b      	lsreq	r3, r3, #8
 8007134:	3008      	addeq	r0, #8
 8007136:	071a      	lsls	r2, r3, #28
 8007138:	bf04      	itt	eq
 800713a:	091b      	lsreq	r3, r3, #4
 800713c:	3004      	addeq	r0, #4
 800713e:	079a      	lsls	r2, r3, #30
 8007140:	bf04      	itt	eq
 8007142:	089b      	lsreq	r3, r3, #2
 8007144:	3002      	addeq	r0, #2
 8007146:	07da      	lsls	r2, r3, #31
 8007148:	d402      	bmi.n	8007150 <__lo0bits+0x4e>
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	d006      	beq.n	800715c <__lo0bits+0x5a>
 800714e:	3001      	adds	r0, #1
 8007150:	600b      	str	r3, [r1, #0]
 8007152:	4770      	bx	lr
 8007154:	4610      	mov	r0, r2
 8007156:	e7e9      	b.n	800712c <__lo0bits+0x2a>
 8007158:	2000      	movs	r0, #0
 800715a:	4770      	bx	lr
 800715c:	2020      	movs	r0, #32
 800715e:	4770      	bx	lr

08007160 <__i2b>:
 8007160:	b510      	push	{r4, lr}
 8007162:	460c      	mov	r4, r1
 8007164:	2101      	movs	r1, #1
 8007166:	f7ff fee9 	bl	8006f3c <_Balloc>
 800716a:	2201      	movs	r2, #1
 800716c:	6144      	str	r4, [r0, #20]
 800716e:	6102      	str	r2, [r0, #16]
 8007170:	bd10      	pop	{r4, pc}

08007172 <__multiply>:
 8007172:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007176:	4614      	mov	r4, r2
 8007178:	690a      	ldr	r2, [r1, #16]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	bfb8      	it	lt
 8007180:	460b      	movlt	r3, r1
 8007182:	4688      	mov	r8, r1
 8007184:	bfbc      	itt	lt
 8007186:	46a0      	movlt	r8, r4
 8007188:	461c      	movlt	r4, r3
 800718a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800718e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007196:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800719a:	eb07 0609 	add.w	r6, r7, r9
 800719e:	42b3      	cmp	r3, r6
 80071a0:	bfb8      	it	lt
 80071a2:	3101      	addlt	r1, #1
 80071a4:	f7ff feca 	bl	8006f3c <_Balloc>
 80071a8:	f100 0514 	add.w	r5, r0, #20
 80071ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80071b0:	462b      	mov	r3, r5
 80071b2:	2200      	movs	r2, #0
 80071b4:	4573      	cmp	r3, lr
 80071b6:	d316      	bcc.n	80071e6 <__multiply+0x74>
 80071b8:	f104 0214 	add.w	r2, r4, #20
 80071bc:	f108 0114 	add.w	r1, r8, #20
 80071c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80071c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	9201      	str	r2, [sp, #4]
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d80c      	bhi.n	80071ec <__multiply+0x7a>
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	dd03      	ble.n	80071de <__multiply+0x6c>
 80071d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d05d      	beq.n	800729a <__multiply+0x128>
 80071de:	6106      	str	r6, [r0, #16]
 80071e0:	b003      	add	sp, #12
 80071e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e6:	f843 2b04 	str.w	r2, [r3], #4
 80071ea:	e7e3      	b.n	80071b4 <__multiply+0x42>
 80071ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80071f0:	f1bb 0f00 	cmp.w	fp, #0
 80071f4:	d023      	beq.n	800723e <__multiply+0xcc>
 80071f6:	4689      	mov	r9, r1
 80071f8:	46ac      	mov	ip, r5
 80071fa:	f04f 0800 	mov.w	r8, #0
 80071fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8007202:	f8dc a000 	ldr.w	sl, [ip]
 8007206:	b2a3      	uxth	r3, r4
 8007208:	fa1f fa8a 	uxth.w	sl, sl
 800720c:	fb0b a303 	mla	r3, fp, r3, sl
 8007210:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007214:	f8dc 4000 	ldr.w	r4, [ip]
 8007218:	4443      	add	r3, r8
 800721a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800721e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007222:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007226:	46e2      	mov	sl, ip
 8007228:	b29b      	uxth	r3, r3
 800722a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800722e:	454f      	cmp	r7, r9
 8007230:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007234:	f84a 3b04 	str.w	r3, [sl], #4
 8007238:	d82b      	bhi.n	8007292 <__multiply+0x120>
 800723a:	f8cc 8004 	str.w	r8, [ip, #4]
 800723e:	9b01      	ldr	r3, [sp, #4]
 8007240:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007244:	3204      	adds	r2, #4
 8007246:	f1ba 0f00 	cmp.w	sl, #0
 800724a:	d020      	beq.n	800728e <__multiply+0x11c>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	4689      	mov	r9, r1
 8007250:	46a8      	mov	r8, r5
 8007252:	f04f 0b00 	mov.w	fp, #0
 8007256:	f8b9 c000 	ldrh.w	ip, [r9]
 800725a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800725e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007262:	445c      	add	r4, fp
 8007264:	46c4      	mov	ip, r8
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800726c:	f84c 3b04 	str.w	r3, [ip], #4
 8007270:	f859 3b04 	ldr.w	r3, [r9], #4
 8007274:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	fb0a b303 	mla	r3, sl, r3, fp
 800727e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007282:	454f      	cmp	r7, r9
 8007284:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007288:	d805      	bhi.n	8007296 <__multiply+0x124>
 800728a:	f8c8 3004 	str.w	r3, [r8, #4]
 800728e:	3504      	adds	r5, #4
 8007290:	e79b      	b.n	80071ca <__multiply+0x58>
 8007292:	46d4      	mov	ip, sl
 8007294:	e7b3      	b.n	80071fe <__multiply+0x8c>
 8007296:	46e0      	mov	r8, ip
 8007298:	e7dd      	b.n	8007256 <__multiply+0xe4>
 800729a:	3e01      	subs	r6, #1
 800729c:	e799      	b.n	80071d2 <__multiply+0x60>
	...

080072a0 <__pow5mult>:
 80072a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a4:	4615      	mov	r5, r2
 80072a6:	f012 0203 	ands.w	r2, r2, #3
 80072aa:	4606      	mov	r6, r0
 80072ac:	460f      	mov	r7, r1
 80072ae:	d007      	beq.n	80072c0 <__pow5mult+0x20>
 80072b0:	3a01      	subs	r2, #1
 80072b2:	4c21      	ldr	r4, [pc, #132]	; (8007338 <__pow5mult+0x98>)
 80072b4:	2300      	movs	r3, #0
 80072b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072ba:	f7ff fe8a 	bl	8006fd2 <__multadd>
 80072be:	4607      	mov	r7, r0
 80072c0:	10ad      	asrs	r5, r5, #2
 80072c2:	d035      	beq.n	8007330 <__pow5mult+0x90>
 80072c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072c6:	b93c      	cbnz	r4, 80072d8 <__pow5mult+0x38>
 80072c8:	2010      	movs	r0, #16
 80072ca:	f000 fda9 	bl	8007e20 <malloc>
 80072ce:	6270      	str	r0, [r6, #36]	; 0x24
 80072d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072d4:	6004      	str	r4, [r0, #0]
 80072d6:	60c4      	str	r4, [r0, #12]
 80072d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072e0:	b94c      	cbnz	r4, 80072f6 <__pow5mult+0x56>
 80072e2:	f240 2171 	movw	r1, #625	; 0x271
 80072e6:	4630      	mov	r0, r6
 80072e8:	f7ff ff3a 	bl	8007160 <__i2b>
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80072f2:	4604      	mov	r4, r0
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	f04f 0800 	mov.w	r8, #0
 80072fa:	07eb      	lsls	r3, r5, #31
 80072fc:	d50a      	bpl.n	8007314 <__pow5mult+0x74>
 80072fe:	4639      	mov	r1, r7
 8007300:	4622      	mov	r2, r4
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ff35 	bl	8007172 <__multiply>
 8007308:	4639      	mov	r1, r7
 800730a:	4681      	mov	r9, r0
 800730c:	4630      	mov	r0, r6
 800730e:	f7ff fe49 	bl	8006fa4 <_Bfree>
 8007312:	464f      	mov	r7, r9
 8007314:	106d      	asrs	r5, r5, #1
 8007316:	d00b      	beq.n	8007330 <__pow5mult+0x90>
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	b938      	cbnz	r0, 800732c <__pow5mult+0x8c>
 800731c:	4622      	mov	r2, r4
 800731e:	4621      	mov	r1, r4
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff ff26 	bl	8007172 <__multiply>
 8007326:	6020      	str	r0, [r4, #0]
 8007328:	f8c0 8000 	str.w	r8, [r0]
 800732c:	4604      	mov	r4, r0
 800732e:	e7e4      	b.n	80072fa <__pow5mult+0x5a>
 8007330:	4638      	mov	r0, r7
 8007332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007336:	bf00      	nop
 8007338:	08008ee0 	.word	0x08008ee0

0800733c <__lshift>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	460c      	mov	r4, r1
 8007342:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	6849      	ldr	r1, [r1, #4]
 800734a:	eb0a 0903 	add.w	r9, sl, r3
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	4607      	mov	r7, r0
 8007352:	4616      	mov	r6, r2
 8007354:	f109 0501 	add.w	r5, r9, #1
 8007358:	42ab      	cmp	r3, r5
 800735a:	db32      	blt.n	80073c2 <__lshift+0x86>
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff fded 	bl	8006f3c <_Balloc>
 8007362:	2300      	movs	r3, #0
 8007364:	4680      	mov	r8, r0
 8007366:	f100 0114 	add.w	r1, r0, #20
 800736a:	461a      	mov	r2, r3
 800736c:	4553      	cmp	r3, sl
 800736e:	db2b      	blt.n	80073c8 <__lshift+0x8c>
 8007370:	6920      	ldr	r0, [r4, #16]
 8007372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007376:	f104 0314 	add.w	r3, r4, #20
 800737a:	f016 021f 	ands.w	r2, r6, #31
 800737e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007382:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007386:	d025      	beq.n	80073d4 <__lshift+0x98>
 8007388:	f1c2 0e20 	rsb	lr, r2, #32
 800738c:	2000      	movs	r0, #0
 800738e:	681e      	ldr	r6, [r3, #0]
 8007390:	468a      	mov	sl, r1
 8007392:	4096      	lsls	r6, r2
 8007394:	4330      	orrs	r0, r6
 8007396:	f84a 0b04 	str.w	r0, [sl], #4
 800739a:	f853 0b04 	ldr.w	r0, [r3], #4
 800739e:	459c      	cmp	ip, r3
 80073a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80073a4:	d814      	bhi.n	80073d0 <__lshift+0x94>
 80073a6:	6048      	str	r0, [r1, #4]
 80073a8:	b108      	cbz	r0, 80073ae <__lshift+0x72>
 80073aa:	f109 0502 	add.w	r5, r9, #2
 80073ae:	3d01      	subs	r5, #1
 80073b0:	4638      	mov	r0, r7
 80073b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80073b6:	4621      	mov	r1, r4
 80073b8:	f7ff fdf4 	bl	8006fa4 <_Bfree>
 80073bc:	4640      	mov	r0, r8
 80073be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c2:	3101      	adds	r1, #1
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	e7c7      	b.n	8007358 <__lshift+0x1c>
 80073c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80073cc:	3301      	adds	r3, #1
 80073ce:	e7cd      	b.n	800736c <__lshift+0x30>
 80073d0:	4651      	mov	r1, sl
 80073d2:	e7dc      	b.n	800738e <__lshift+0x52>
 80073d4:	3904      	subs	r1, #4
 80073d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073da:	f841 2f04 	str.w	r2, [r1, #4]!
 80073de:	459c      	cmp	ip, r3
 80073e0:	d8f9      	bhi.n	80073d6 <__lshift+0x9a>
 80073e2:	e7e4      	b.n	80073ae <__lshift+0x72>

080073e4 <__mcmp>:
 80073e4:	6903      	ldr	r3, [r0, #16]
 80073e6:	690a      	ldr	r2, [r1, #16]
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	b530      	push	{r4, r5, lr}
 80073ec:	d10c      	bne.n	8007408 <__mcmp+0x24>
 80073ee:	0092      	lsls	r2, r2, #2
 80073f0:	3014      	adds	r0, #20
 80073f2:	3114      	adds	r1, #20
 80073f4:	1884      	adds	r4, r0, r2
 80073f6:	4411      	add	r1, r2
 80073f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007400:	4295      	cmp	r5, r2
 8007402:	d003      	beq.n	800740c <__mcmp+0x28>
 8007404:	d305      	bcc.n	8007412 <__mcmp+0x2e>
 8007406:	2301      	movs	r3, #1
 8007408:	4618      	mov	r0, r3
 800740a:	bd30      	pop	{r4, r5, pc}
 800740c:	42a0      	cmp	r0, r4
 800740e:	d3f3      	bcc.n	80073f8 <__mcmp+0x14>
 8007410:	e7fa      	b.n	8007408 <__mcmp+0x24>
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	e7f7      	b.n	8007408 <__mcmp+0x24>

08007418 <__mdiff>:
 8007418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	460d      	mov	r5, r1
 800741e:	4607      	mov	r7, r0
 8007420:	4611      	mov	r1, r2
 8007422:	4628      	mov	r0, r5
 8007424:	4614      	mov	r4, r2
 8007426:	f7ff ffdd 	bl	80073e4 <__mcmp>
 800742a:	1e06      	subs	r6, r0, #0
 800742c:	d108      	bne.n	8007440 <__mdiff+0x28>
 800742e:	4631      	mov	r1, r6
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff fd83 	bl	8006f3c <_Balloc>
 8007436:	2301      	movs	r3, #1
 8007438:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800743c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007440:	bfa4      	itt	ge
 8007442:	4623      	movge	r3, r4
 8007444:	462c      	movge	r4, r5
 8007446:	4638      	mov	r0, r7
 8007448:	6861      	ldr	r1, [r4, #4]
 800744a:	bfa6      	itte	ge
 800744c:	461d      	movge	r5, r3
 800744e:	2600      	movge	r6, #0
 8007450:	2601      	movlt	r6, #1
 8007452:	f7ff fd73 	bl	8006f3c <_Balloc>
 8007456:	692b      	ldr	r3, [r5, #16]
 8007458:	60c6      	str	r6, [r0, #12]
 800745a:	6926      	ldr	r6, [r4, #16]
 800745c:	f105 0914 	add.w	r9, r5, #20
 8007460:	f104 0214 	add.w	r2, r4, #20
 8007464:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007468:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800746c:	f100 0514 	add.w	r5, r0, #20
 8007470:	f04f 0e00 	mov.w	lr, #0
 8007474:	f852 ab04 	ldr.w	sl, [r2], #4
 8007478:	f859 4b04 	ldr.w	r4, [r9], #4
 800747c:	fa1e f18a 	uxtah	r1, lr, sl
 8007480:	b2a3      	uxth	r3, r4
 8007482:	1ac9      	subs	r1, r1, r3
 8007484:	0c23      	lsrs	r3, r4, #16
 8007486:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800748a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800748e:	b289      	uxth	r1, r1
 8007490:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007494:	45c8      	cmp	r8, r9
 8007496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800749a:	4694      	mov	ip, r2
 800749c:	f845 3b04 	str.w	r3, [r5], #4
 80074a0:	d8e8      	bhi.n	8007474 <__mdiff+0x5c>
 80074a2:	45bc      	cmp	ip, r7
 80074a4:	d304      	bcc.n	80074b0 <__mdiff+0x98>
 80074a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80074aa:	b183      	cbz	r3, 80074ce <__mdiff+0xb6>
 80074ac:	6106      	str	r6, [r0, #16]
 80074ae:	e7c5      	b.n	800743c <__mdiff+0x24>
 80074b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80074b4:	fa1e f381 	uxtah	r3, lr, r1
 80074b8:	141a      	asrs	r2, r3, #16
 80074ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074be:	b29b      	uxth	r3, r3
 80074c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80074c8:	f845 3b04 	str.w	r3, [r5], #4
 80074cc:	e7e9      	b.n	80074a2 <__mdiff+0x8a>
 80074ce:	3e01      	subs	r6, #1
 80074d0:	e7e9      	b.n	80074a6 <__mdiff+0x8e>
	...

080074d4 <__ulp>:
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <__ulp+0x4c>)
 80074d6:	ee10 2a90 	vmov	r2, s1
 80074da:	401a      	ands	r2, r3
 80074dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dd04      	ble.n	80074ee <__ulp+0x1a>
 80074e4:	2000      	movs	r0, #0
 80074e6:	4619      	mov	r1, r3
 80074e8:	ec41 0b10 	vmov	d0, r0, r1
 80074ec:	4770      	bx	lr
 80074ee:	425b      	negs	r3, r3
 80074f0:	151b      	asrs	r3, r3, #20
 80074f2:	2b13      	cmp	r3, #19
 80074f4:	f04f 0000 	mov.w	r0, #0
 80074f8:	f04f 0100 	mov.w	r1, #0
 80074fc:	dc04      	bgt.n	8007508 <__ulp+0x34>
 80074fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007502:	fa42 f103 	asr.w	r1, r2, r3
 8007506:	e7ef      	b.n	80074e8 <__ulp+0x14>
 8007508:	3b14      	subs	r3, #20
 800750a:	2b1e      	cmp	r3, #30
 800750c:	f04f 0201 	mov.w	r2, #1
 8007510:	bfda      	itte	le
 8007512:	f1c3 031f 	rsble	r3, r3, #31
 8007516:	fa02 f303 	lslle.w	r3, r2, r3
 800751a:	4613      	movgt	r3, r2
 800751c:	4618      	mov	r0, r3
 800751e:	e7e3      	b.n	80074e8 <__ulp+0x14>
 8007520:	7ff00000 	.word	0x7ff00000

08007524 <__b2d>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	6905      	ldr	r5, [r0, #16]
 8007528:	f100 0714 	add.w	r7, r0, #20
 800752c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007530:	1f2e      	subs	r6, r5, #4
 8007532:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007536:	4620      	mov	r0, r4
 8007538:	f7ff fdc4 	bl	80070c4 <__hi0bits>
 800753c:	f1c0 0320 	rsb	r3, r0, #32
 8007540:	280a      	cmp	r0, #10
 8007542:	600b      	str	r3, [r1, #0]
 8007544:	f8df c074 	ldr.w	ip, [pc, #116]	; 80075bc <__b2d+0x98>
 8007548:	dc14      	bgt.n	8007574 <__b2d+0x50>
 800754a:	f1c0 0e0b 	rsb	lr, r0, #11
 800754e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007552:	42b7      	cmp	r7, r6
 8007554:	ea41 030c 	orr.w	r3, r1, ip
 8007558:	bf34      	ite	cc
 800755a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800755e:	2100      	movcs	r1, #0
 8007560:	3015      	adds	r0, #21
 8007562:	fa04 f000 	lsl.w	r0, r4, r0
 8007566:	fa21 f10e 	lsr.w	r1, r1, lr
 800756a:	ea40 0201 	orr.w	r2, r0, r1
 800756e:	ec43 2b10 	vmov	d0, r2, r3
 8007572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007574:	42b7      	cmp	r7, r6
 8007576:	bf3a      	itte	cc
 8007578:	f1a5 0608 	subcc.w	r6, r5, #8
 800757c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007580:	2100      	movcs	r1, #0
 8007582:	380b      	subs	r0, #11
 8007584:	d015      	beq.n	80075b2 <__b2d+0x8e>
 8007586:	4084      	lsls	r4, r0
 8007588:	f1c0 0520 	rsb	r5, r0, #32
 800758c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007590:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007594:	42be      	cmp	r6, r7
 8007596:	fa21 fc05 	lsr.w	ip, r1, r5
 800759a:	ea44 030c 	orr.w	r3, r4, ip
 800759e:	bf8c      	ite	hi
 80075a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80075a4:	2400      	movls	r4, #0
 80075a6:	fa01 f000 	lsl.w	r0, r1, r0
 80075aa:	40ec      	lsrs	r4, r5
 80075ac:	ea40 0204 	orr.w	r2, r0, r4
 80075b0:	e7dd      	b.n	800756e <__b2d+0x4a>
 80075b2:	ea44 030c 	orr.w	r3, r4, ip
 80075b6:	460a      	mov	r2, r1
 80075b8:	e7d9      	b.n	800756e <__b2d+0x4a>
 80075ba:	bf00      	nop
 80075bc:	3ff00000 	.word	0x3ff00000

080075c0 <__d2b>:
 80075c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075c4:	460e      	mov	r6, r1
 80075c6:	2101      	movs	r1, #1
 80075c8:	ec59 8b10 	vmov	r8, r9, d0
 80075cc:	4615      	mov	r5, r2
 80075ce:	f7ff fcb5 	bl	8006f3c <_Balloc>
 80075d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80075d6:	4607      	mov	r7, r0
 80075d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075dc:	bb34      	cbnz	r4, 800762c <__d2b+0x6c>
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	f1b8 0300 	subs.w	r3, r8, #0
 80075e4:	d027      	beq.n	8007636 <__d2b+0x76>
 80075e6:	a802      	add	r0, sp, #8
 80075e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80075ec:	f7ff fd89 	bl	8007102 <__lo0bits>
 80075f0:	9900      	ldr	r1, [sp, #0]
 80075f2:	b1f0      	cbz	r0, 8007632 <__d2b+0x72>
 80075f4:	9a01      	ldr	r2, [sp, #4]
 80075f6:	f1c0 0320 	rsb	r3, r0, #32
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	430b      	orrs	r3, r1
 8007600:	40c2      	lsrs	r2, r0
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	9201      	str	r2, [sp, #4]
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	bf14      	ite	ne
 800760e:	2102      	movne	r1, #2
 8007610:	2101      	moveq	r1, #1
 8007612:	6139      	str	r1, [r7, #16]
 8007614:	b1c4      	cbz	r4, 8007648 <__d2b+0x88>
 8007616:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800761a:	4404      	add	r4, r0
 800761c:	6034      	str	r4, [r6, #0]
 800761e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007622:	6028      	str	r0, [r5, #0]
 8007624:	4638      	mov	r0, r7
 8007626:	b003      	add	sp, #12
 8007628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800762c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007630:	e7d5      	b.n	80075de <__d2b+0x1e>
 8007632:	6179      	str	r1, [r7, #20]
 8007634:	e7e7      	b.n	8007606 <__d2b+0x46>
 8007636:	a801      	add	r0, sp, #4
 8007638:	f7ff fd63 	bl	8007102 <__lo0bits>
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	2101      	movs	r1, #1
 8007642:	6139      	str	r1, [r7, #16]
 8007644:	3020      	adds	r0, #32
 8007646:	e7e5      	b.n	8007614 <__d2b+0x54>
 8007648:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800764c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007650:	6030      	str	r0, [r6, #0]
 8007652:	6918      	ldr	r0, [r3, #16]
 8007654:	f7ff fd36 	bl	80070c4 <__hi0bits>
 8007658:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800765c:	e7e1      	b.n	8007622 <__d2b+0x62>

0800765e <__ratio>:
 800765e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007662:	4688      	mov	r8, r1
 8007664:	4669      	mov	r1, sp
 8007666:	4681      	mov	r9, r0
 8007668:	f7ff ff5c 	bl	8007524 <__b2d>
 800766c:	a901      	add	r1, sp, #4
 800766e:	4640      	mov	r0, r8
 8007670:	ec57 6b10 	vmov	r6, r7, d0
 8007674:	f7ff ff56 	bl	8007524 <__b2d>
 8007678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800767c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007680:	eba3 0c02 	sub.w	ip, r3, r2
 8007684:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800768e:	ec5b ab10 	vmov	sl, fp, d0
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfce      	itee	gt
 8007696:	463a      	movgt	r2, r7
 8007698:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800769c:	465a      	movle	r2, fp
 800769e:	4659      	mov	r1, fp
 80076a0:	463d      	mov	r5, r7
 80076a2:	bfd4      	ite	le
 80076a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80076a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80076ac:	4630      	mov	r0, r6
 80076ae:	ee10 2a10 	vmov	r2, s0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4629      	mov	r1, r5
 80076b6:	f7f9 f8d9 	bl	800086c <__aeabi_ddiv>
 80076ba:	ec41 0b10 	vmov	d0, r0, r1
 80076be:	b003      	add	sp, #12
 80076c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076c4 <__copybits>:
 80076c4:	3901      	subs	r1, #1
 80076c6:	b510      	push	{r4, lr}
 80076c8:	1149      	asrs	r1, r1, #5
 80076ca:	6914      	ldr	r4, [r2, #16]
 80076cc:	3101      	adds	r1, #1
 80076ce:	f102 0314 	add.w	r3, r2, #20
 80076d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076da:	42a3      	cmp	r3, r4
 80076dc:	4602      	mov	r2, r0
 80076de:	d303      	bcc.n	80076e8 <__copybits+0x24>
 80076e0:	2300      	movs	r3, #0
 80076e2:	428a      	cmp	r2, r1
 80076e4:	d305      	bcc.n	80076f2 <__copybits+0x2e>
 80076e6:	bd10      	pop	{r4, pc}
 80076e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ec:	f840 2b04 	str.w	r2, [r0], #4
 80076f0:	e7f3      	b.n	80076da <__copybits+0x16>
 80076f2:	f842 3b04 	str.w	r3, [r2], #4
 80076f6:	e7f4      	b.n	80076e2 <__copybits+0x1e>

080076f8 <__any_on>:
 80076f8:	f100 0214 	add.w	r2, r0, #20
 80076fc:	6900      	ldr	r0, [r0, #16]
 80076fe:	114b      	asrs	r3, r1, #5
 8007700:	4298      	cmp	r0, r3
 8007702:	b510      	push	{r4, lr}
 8007704:	db11      	blt.n	800772a <__any_on+0x32>
 8007706:	dd0a      	ble.n	800771e <__any_on+0x26>
 8007708:	f011 011f 	ands.w	r1, r1, #31
 800770c:	d007      	beq.n	800771e <__any_on+0x26>
 800770e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007712:	fa24 f001 	lsr.w	r0, r4, r1
 8007716:	fa00 f101 	lsl.w	r1, r0, r1
 800771a:	428c      	cmp	r4, r1
 800771c:	d10b      	bne.n	8007736 <__any_on+0x3e>
 800771e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007722:	4293      	cmp	r3, r2
 8007724:	d803      	bhi.n	800772e <__any_on+0x36>
 8007726:	2000      	movs	r0, #0
 8007728:	bd10      	pop	{r4, pc}
 800772a:	4603      	mov	r3, r0
 800772c:	e7f7      	b.n	800771e <__any_on+0x26>
 800772e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007732:	2900      	cmp	r1, #0
 8007734:	d0f5      	beq.n	8007722 <__any_on+0x2a>
 8007736:	2001      	movs	r0, #1
 8007738:	e7f6      	b.n	8007728 <__any_on+0x30>

0800773a <_calloc_r>:
 800773a:	b538      	push	{r3, r4, r5, lr}
 800773c:	fb02 f401 	mul.w	r4, r2, r1
 8007740:	4621      	mov	r1, r4
 8007742:	f000 f809 	bl	8007758 <_malloc_r>
 8007746:	4605      	mov	r5, r0
 8007748:	b118      	cbz	r0, 8007752 <_calloc_r+0x18>
 800774a:	4622      	mov	r2, r4
 800774c:	2100      	movs	r1, #0
 800774e:	f7fe f9c1 	bl	8005ad4 <memset>
 8007752:	4628      	mov	r0, r5
 8007754:	bd38      	pop	{r3, r4, r5, pc}
	...

08007758 <_malloc_r>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	1ccd      	adds	r5, r1, #3
 800775c:	f025 0503 	bic.w	r5, r5, #3
 8007760:	3508      	adds	r5, #8
 8007762:	2d0c      	cmp	r5, #12
 8007764:	bf38      	it	cc
 8007766:	250c      	movcc	r5, #12
 8007768:	2d00      	cmp	r5, #0
 800776a:	4606      	mov	r6, r0
 800776c:	db01      	blt.n	8007772 <_malloc_r+0x1a>
 800776e:	42a9      	cmp	r1, r5
 8007770:	d903      	bls.n	800777a <_malloc_r+0x22>
 8007772:	230c      	movs	r3, #12
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	2000      	movs	r0, #0
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	f000 fb72 	bl	8007e62 <__malloc_lock>
 800777e:	4a21      	ldr	r2, [pc, #132]	; (8007804 <_malloc_r+0xac>)
 8007780:	6814      	ldr	r4, [r2, #0]
 8007782:	4621      	mov	r1, r4
 8007784:	b991      	cbnz	r1, 80077ac <_malloc_r+0x54>
 8007786:	4c20      	ldr	r4, [pc, #128]	; (8007808 <_malloc_r+0xb0>)
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	b91b      	cbnz	r3, 8007794 <_malloc_r+0x3c>
 800778c:	4630      	mov	r0, r6
 800778e:	f000 fb17 	bl	8007dc0 <_sbrk_r>
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	4629      	mov	r1, r5
 8007796:	4630      	mov	r0, r6
 8007798:	f000 fb12 	bl	8007dc0 <_sbrk_r>
 800779c:	1c43      	adds	r3, r0, #1
 800779e:	d124      	bne.n	80077ea <_malloc_r+0x92>
 80077a0:	230c      	movs	r3, #12
 80077a2:	6033      	str	r3, [r6, #0]
 80077a4:	4630      	mov	r0, r6
 80077a6:	f000 fb5d 	bl	8007e64 <__malloc_unlock>
 80077aa:	e7e4      	b.n	8007776 <_malloc_r+0x1e>
 80077ac:	680b      	ldr	r3, [r1, #0]
 80077ae:	1b5b      	subs	r3, r3, r5
 80077b0:	d418      	bmi.n	80077e4 <_malloc_r+0x8c>
 80077b2:	2b0b      	cmp	r3, #11
 80077b4:	d90f      	bls.n	80077d6 <_malloc_r+0x7e>
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	50cd      	str	r5, [r1, r3]
 80077ba:	18cc      	adds	r4, r1, r3
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 fb51 	bl	8007e64 <__malloc_unlock>
 80077c2:	f104 000b 	add.w	r0, r4, #11
 80077c6:	1d23      	adds	r3, r4, #4
 80077c8:	f020 0007 	bic.w	r0, r0, #7
 80077cc:	1ac3      	subs	r3, r0, r3
 80077ce:	d0d3      	beq.n	8007778 <_malloc_r+0x20>
 80077d0:	425a      	negs	r2, r3
 80077d2:	50e2      	str	r2, [r4, r3]
 80077d4:	e7d0      	b.n	8007778 <_malloc_r+0x20>
 80077d6:	428c      	cmp	r4, r1
 80077d8:	684b      	ldr	r3, [r1, #4]
 80077da:	bf16      	itet	ne
 80077dc:	6063      	strne	r3, [r4, #4]
 80077de:	6013      	streq	r3, [r2, #0]
 80077e0:	460c      	movne	r4, r1
 80077e2:	e7eb      	b.n	80077bc <_malloc_r+0x64>
 80077e4:	460c      	mov	r4, r1
 80077e6:	6849      	ldr	r1, [r1, #4]
 80077e8:	e7cc      	b.n	8007784 <_malloc_r+0x2c>
 80077ea:	1cc4      	adds	r4, r0, #3
 80077ec:	f024 0403 	bic.w	r4, r4, #3
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d005      	beq.n	8007800 <_malloc_r+0xa8>
 80077f4:	1a21      	subs	r1, r4, r0
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 fae2 	bl	8007dc0 <_sbrk_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d0cf      	beq.n	80077a0 <_malloc_r+0x48>
 8007800:	6025      	str	r5, [r4, #0]
 8007802:	e7db      	b.n	80077bc <_malloc_r+0x64>
 8007804:	200006d4 	.word	0x200006d4
 8007808:	200006d8 	.word	0x200006d8

0800780c <__ssputs_r>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	688e      	ldr	r6, [r1, #8]
 8007812:	429e      	cmp	r6, r3
 8007814:	4682      	mov	sl, r0
 8007816:	460c      	mov	r4, r1
 8007818:	4690      	mov	r8, r2
 800781a:	4699      	mov	r9, r3
 800781c:	d837      	bhi.n	800788e <__ssputs_r+0x82>
 800781e:	898a      	ldrh	r2, [r1, #12]
 8007820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007824:	d031      	beq.n	800788a <__ssputs_r+0x7e>
 8007826:	6825      	ldr	r5, [r4, #0]
 8007828:	6909      	ldr	r1, [r1, #16]
 800782a:	1a6f      	subs	r7, r5, r1
 800782c:	6965      	ldr	r5, [r4, #20]
 800782e:	2302      	movs	r3, #2
 8007830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007834:	fb95 f5f3 	sdiv	r5, r5, r3
 8007838:	f109 0301 	add.w	r3, r9, #1
 800783c:	443b      	add	r3, r7
 800783e:	429d      	cmp	r5, r3
 8007840:	bf38      	it	cc
 8007842:	461d      	movcc	r5, r3
 8007844:	0553      	lsls	r3, r2, #21
 8007846:	d530      	bpl.n	80078aa <__ssputs_r+0x9e>
 8007848:	4629      	mov	r1, r5
 800784a:	f7ff ff85 	bl	8007758 <_malloc_r>
 800784e:	4606      	mov	r6, r0
 8007850:	b950      	cbnz	r0, 8007868 <__ssputs_r+0x5c>
 8007852:	230c      	movs	r3, #12
 8007854:	f8ca 3000 	str.w	r3, [sl]
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	463a      	mov	r2, r7
 800786a:	6921      	ldr	r1, [r4, #16]
 800786c:	f7ff fb5b 	bl	8006f26 <memcpy>
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800787a:	81a3      	strh	r3, [r4, #12]
 800787c:	6126      	str	r6, [r4, #16]
 800787e:	6165      	str	r5, [r4, #20]
 8007880:	443e      	add	r6, r7
 8007882:	1bed      	subs	r5, r5, r7
 8007884:	6026      	str	r6, [r4, #0]
 8007886:	60a5      	str	r5, [r4, #8]
 8007888:	464e      	mov	r6, r9
 800788a:	454e      	cmp	r6, r9
 800788c:	d900      	bls.n	8007890 <__ssputs_r+0x84>
 800788e:	464e      	mov	r6, r9
 8007890:	4632      	mov	r2, r6
 8007892:	4641      	mov	r1, r8
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	f000 facb 	bl	8007e30 <memmove>
 800789a:	68a3      	ldr	r3, [r4, #8]
 800789c:	1b9b      	subs	r3, r3, r6
 800789e:	60a3      	str	r3, [r4, #8]
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	441e      	add	r6, r3
 80078a4:	6026      	str	r6, [r4, #0]
 80078a6:	2000      	movs	r0, #0
 80078a8:	e7dc      	b.n	8007864 <__ssputs_r+0x58>
 80078aa:	462a      	mov	r2, r5
 80078ac:	f000 fb2a 	bl	8007f04 <_realloc_r>
 80078b0:	4606      	mov	r6, r0
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d1e2      	bne.n	800787c <__ssputs_r+0x70>
 80078b6:	6921      	ldr	r1, [r4, #16]
 80078b8:	4650      	mov	r0, sl
 80078ba:	f000 fad5 	bl	8007e68 <_free_r>
 80078be:	e7c8      	b.n	8007852 <__ssputs_r+0x46>

080078c0 <_svfiprintf_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	461d      	mov	r5, r3
 80078c6:	898b      	ldrh	r3, [r1, #12]
 80078c8:	061f      	lsls	r7, r3, #24
 80078ca:	b09d      	sub	sp, #116	; 0x74
 80078cc:	4680      	mov	r8, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	4616      	mov	r6, r2
 80078d2:	d50f      	bpl.n	80078f4 <_svfiprintf_r+0x34>
 80078d4:	690b      	ldr	r3, [r1, #16]
 80078d6:	b96b      	cbnz	r3, 80078f4 <_svfiprintf_r+0x34>
 80078d8:	2140      	movs	r1, #64	; 0x40
 80078da:	f7ff ff3d 	bl	8007758 <_malloc_r>
 80078de:	6020      	str	r0, [r4, #0]
 80078e0:	6120      	str	r0, [r4, #16]
 80078e2:	b928      	cbnz	r0, 80078f0 <_svfiprintf_r+0x30>
 80078e4:	230c      	movs	r3, #12
 80078e6:	f8c8 3000 	str.w	r3, [r8]
 80078ea:	f04f 30ff 	mov.w	r0, #4294967295
 80078ee:	e0c8      	b.n	8007a82 <_svfiprintf_r+0x1c2>
 80078f0:	2340      	movs	r3, #64	; 0x40
 80078f2:	6163      	str	r3, [r4, #20]
 80078f4:	2300      	movs	r3, #0
 80078f6:	9309      	str	r3, [sp, #36]	; 0x24
 80078f8:	2320      	movs	r3, #32
 80078fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078fe:	2330      	movs	r3, #48	; 0x30
 8007900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007904:	9503      	str	r5, [sp, #12]
 8007906:	f04f 0b01 	mov.w	fp, #1
 800790a:	4637      	mov	r7, r6
 800790c:	463d      	mov	r5, r7
 800790e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007912:	b10b      	cbz	r3, 8007918 <_svfiprintf_r+0x58>
 8007914:	2b25      	cmp	r3, #37	; 0x25
 8007916:	d13e      	bne.n	8007996 <_svfiprintf_r+0xd6>
 8007918:	ebb7 0a06 	subs.w	sl, r7, r6
 800791c:	d00b      	beq.n	8007936 <_svfiprintf_r+0x76>
 800791e:	4653      	mov	r3, sl
 8007920:	4632      	mov	r2, r6
 8007922:	4621      	mov	r1, r4
 8007924:	4640      	mov	r0, r8
 8007926:	f7ff ff71 	bl	800780c <__ssputs_r>
 800792a:	3001      	adds	r0, #1
 800792c:	f000 80a4 	beq.w	8007a78 <_svfiprintf_r+0x1b8>
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	4453      	add	r3, sl
 8007934:	9309      	str	r3, [sp, #36]	; 0x24
 8007936:	783b      	ldrb	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 809d 	beq.w	8007a78 <_svfiprintf_r+0x1b8>
 800793e:	2300      	movs	r3, #0
 8007940:	f04f 32ff 	mov.w	r2, #4294967295
 8007944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007948:	9304      	str	r3, [sp, #16]
 800794a:	9307      	str	r3, [sp, #28]
 800794c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007950:	931a      	str	r3, [sp, #104]	; 0x68
 8007952:	462f      	mov	r7, r5
 8007954:	2205      	movs	r2, #5
 8007956:	f817 1b01 	ldrb.w	r1, [r7], #1
 800795a:	4850      	ldr	r0, [pc, #320]	; (8007a9c <_svfiprintf_r+0x1dc>)
 800795c:	f7f8 fc50 	bl	8000200 <memchr>
 8007960:	9b04      	ldr	r3, [sp, #16]
 8007962:	b9d0      	cbnz	r0, 800799a <_svfiprintf_r+0xda>
 8007964:	06d9      	lsls	r1, r3, #27
 8007966:	bf44      	itt	mi
 8007968:	2220      	movmi	r2, #32
 800796a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800796e:	071a      	lsls	r2, r3, #28
 8007970:	bf44      	itt	mi
 8007972:	222b      	movmi	r2, #43	; 0x2b
 8007974:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007978:	782a      	ldrb	r2, [r5, #0]
 800797a:	2a2a      	cmp	r2, #42	; 0x2a
 800797c:	d015      	beq.n	80079aa <_svfiprintf_r+0xea>
 800797e:	9a07      	ldr	r2, [sp, #28]
 8007980:	462f      	mov	r7, r5
 8007982:	2000      	movs	r0, #0
 8007984:	250a      	movs	r5, #10
 8007986:	4639      	mov	r1, r7
 8007988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798c:	3b30      	subs	r3, #48	; 0x30
 800798e:	2b09      	cmp	r3, #9
 8007990:	d94d      	bls.n	8007a2e <_svfiprintf_r+0x16e>
 8007992:	b1b8      	cbz	r0, 80079c4 <_svfiprintf_r+0x104>
 8007994:	e00f      	b.n	80079b6 <_svfiprintf_r+0xf6>
 8007996:	462f      	mov	r7, r5
 8007998:	e7b8      	b.n	800790c <_svfiprintf_r+0x4c>
 800799a:	4a40      	ldr	r2, [pc, #256]	; (8007a9c <_svfiprintf_r+0x1dc>)
 800799c:	1a80      	subs	r0, r0, r2
 800799e:	fa0b f000 	lsl.w	r0, fp, r0
 80079a2:	4318      	orrs	r0, r3
 80079a4:	9004      	str	r0, [sp, #16]
 80079a6:	463d      	mov	r5, r7
 80079a8:	e7d3      	b.n	8007952 <_svfiprintf_r+0x92>
 80079aa:	9a03      	ldr	r2, [sp, #12]
 80079ac:	1d11      	adds	r1, r2, #4
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	9103      	str	r1, [sp, #12]
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	db01      	blt.n	80079ba <_svfiprintf_r+0xfa>
 80079b6:	9207      	str	r2, [sp, #28]
 80079b8:	e004      	b.n	80079c4 <_svfiprintf_r+0x104>
 80079ba:	4252      	negs	r2, r2
 80079bc:	f043 0302 	orr.w	r3, r3, #2
 80079c0:	9207      	str	r2, [sp, #28]
 80079c2:	9304      	str	r3, [sp, #16]
 80079c4:	783b      	ldrb	r3, [r7, #0]
 80079c6:	2b2e      	cmp	r3, #46	; 0x2e
 80079c8:	d10c      	bne.n	80079e4 <_svfiprintf_r+0x124>
 80079ca:	787b      	ldrb	r3, [r7, #1]
 80079cc:	2b2a      	cmp	r3, #42	; 0x2a
 80079ce:	d133      	bne.n	8007a38 <_svfiprintf_r+0x178>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	1d1a      	adds	r2, r3, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	9203      	str	r2, [sp, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bfb8      	it	lt
 80079dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e0:	3702      	adds	r7, #2
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	4d2e      	ldr	r5, [pc, #184]	; (8007aa0 <_svfiprintf_r+0x1e0>)
 80079e6:	7839      	ldrb	r1, [r7, #0]
 80079e8:	2203      	movs	r2, #3
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7f8 fc08 	bl	8000200 <memchr>
 80079f0:	b138      	cbz	r0, 8007a02 <_svfiprintf_r+0x142>
 80079f2:	2340      	movs	r3, #64	; 0x40
 80079f4:	1b40      	subs	r0, r0, r5
 80079f6:	fa03 f000 	lsl.w	r0, r3, r0
 80079fa:	9b04      	ldr	r3, [sp, #16]
 80079fc:	4303      	orrs	r3, r0
 80079fe:	3701      	adds	r7, #1
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	7839      	ldrb	r1, [r7, #0]
 8007a04:	4827      	ldr	r0, [pc, #156]	; (8007aa4 <_svfiprintf_r+0x1e4>)
 8007a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	1c7e      	adds	r6, r7, #1
 8007a0e:	f7f8 fbf7 	bl	8000200 <memchr>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d038      	beq.n	8007a88 <_svfiprintf_r+0x1c8>
 8007a16:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <_svfiprintf_r+0x1e8>)
 8007a18:	bb13      	cbnz	r3, 8007a60 <_svfiprintf_r+0x1a0>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	3307      	adds	r3, #7
 8007a1e:	f023 0307 	bic.w	r3, r3, #7
 8007a22:	3308      	adds	r3, #8
 8007a24:	9303      	str	r3, [sp, #12]
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	444b      	add	r3, r9
 8007a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2c:	e76d      	b.n	800790a <_svfiprintf_r+0x4a>
 8007a2e:	fb05 3202 	mla	r2, r5, r2, r3
 8007a32:	2001      	movs	r0, #1
 8007a34:	460f      	mov	r7, r1
 8007a36:	e7a6      	b.n	8007986 <_svfiprintf_r+0xc6>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	3701      	adds	r7, #1
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	250a      	movs	r5, #10
 8007a42:	4638      	mov	r0, r7
 8007a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a48:	3a30      	subs	r2, #48	; 0x30
 8007a4a:	2a09      	cmp	r2, #9
 8007a4c:	d903      	bls.n	8007a56 <_svfiprintf_r+0x196>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0c8      	beq.n	80079e4 <_svfiprintf_r+0x124>
 8007a52:	9105      	str	r1, [sp, #20]
 8007a54:	e7c6      	b.n	80079e4 <_svfiprintf_r+0x124>
 8007a56:	fb05 2101 	mla	r1, r5, r1, r2
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	e7f0      	b.n	8007a42 <_svfiprintf_r+0x182>
 8007a60:	ab03      	add	r3, sp, #12
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	4622      	mov	r2, r4
 8007a66:	4b11      	ldr	r3, [pc, #68]	; (8007aac <_svfiprintf_r+0x1ec>)
 8007a68:	a904      	add	r1, sp, #16
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	f3af 8000 	nop.w
 8007a70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a74:	4681      	mov	r9, r0
 8007a76:	d1d6      	bne.n	8007a26 <_svfiprintf_r+0x166>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	065b      	lsls	r3, r3, #25
 8007a7c:	f53f af35 	bmi.w	80078ea <_svfiprintf_r+0x2a>
 8007a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a82:	b01d      	add	sp, #116	; 0x74
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	ab03      	add	r3, sp, #12
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	4b07      	ldr	r3, [pc, #28]	; (8007aac <_svfiprintf_r+0x1ec>)
 8007a90:	a904      	add	r1, sp, #16
 8007a92:	4640      	mov	r0, r8
 8007a94:	f000 f882 	bl	8007b9c <_printf_i>
 8007a98:	e7ea      	b.n	8007a70 <_svfiprintf_r+0x1b0>
 8007a9a:	bf00      	nop
 8007a9c:	08008eec 	.word	0x08008eec
 8007aa0:	08008ef2 	.word	0x08008ef2
 8007aa4:	08008ef6 	.word	0x08008ef6
 8007aa8:	00000000 	.word	0x00000000
 8007aac:	0800780d 	.word	0x0800780d

08007ab0 <_printf_common>:
 8007ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab4:	4691      	mov	r9, r2
 8007ab6:	461f      	mov	r7, r3
 8007ab8:	688a      	ldr	r2, [r1, #8]
 8007aba:	690b      	ldr	r3, [r1, #16]
 8007abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	bfb8      	it	lt
 8007ac4:	4613      	movlt	r3, r2
 8007ac6:	f8c9 3000 	str.w	r3, [r9]
 8007aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	b112      	cbz	r2, 8007ada <_printf_common+0x2a>
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	f8c9 3000 	str.w	r3, [r9]
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	0699      	lsls	r1, r3, #26
 8007ade:	bf42      	ittt	mi
 8007ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ae4:	3302      	addmi	r3, #2
 8007ae6:	f8c9 3000 	strmi.w	r3, [r9]
 8007aea:	6825      	ldr	r5, [r4, #0]
 8007aec:	f015 0506 	ands.w	r5, r5, #6
 8007af0:	d107      	bne.n	8007b02 <_printf_common+0x52>
 8007af2:	f104 0a19 	add.w	sl, r4, #25
 8007af6:	68e3      	ldr	r3, [r4, #12]
 8007af8:	f8d9 2000 	ldr.w	r2, [r9]
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	42ab      	cmp	r3, r5
 8007b00:	dc28      	bgt.n	8007b54 <_printf_common+0xa4>
 8007b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b06:	6822      	ldr	r2, [r4, #0]
 8007b08:	3300      	adds	r3, #0
 8007b0a:	bf18      	it	ne
 8007b0c:	2301      	movne	r3, #1
 8007b0e:	0692      	lsls	r2, r2, #26
 8007b10:	d42d      	bmi.n	8007b6e <_printf_common+0xbe>
 8007b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b16:	4639      	mov	r1, r7
 8007b18:	4630      	mov	r0, r6
 8007b1a:	47c0      	blx	r8
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	d020      	beq.n	8007b62 <_printf_common+0xb2>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	68e5      	ldr	r5, [r4, #12]
 8007b24:	f8d9 2000 	ldr.w	r2, [r9]
 8007b28:	f003 0306 	and.w	r3, r3, #6
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	bf08      	it	eq
 8007b30:	1aad      	subeq	r5, r5, r2
 8007b32:	68a3      	ldr	r3, [r4, #8]
 8007b34:	6922      	ldr	r2, [r4, #16]
 8007b36:	bf0c      	ite	eq
 8007b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b3c:	2500      	movne	r5, #0
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	bfc4      	itt	gt
 8007b42:	1a9b      	subgt	r3, r3, r2
 8007b44:	18ed      	addgt	r5, r5, r3
 8007b46:	f04f 0900 	mov.w	r9, #0
 8007b4a:	341a      	adds	r4, #26
 8007b4c:	454d      	cmp	r5, r9
 8007b4e:	d11a      	bne.n	8007b86 <_printf_common+0xd6>
 8007b50:	2000      	movs	r0, #0
 8007b52:	e008      	b.n	8007b66 <_printf_common+0xb6>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4652      	mov	r2, sl
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d103      	bne.n	8007b6a <_printf_common+0xba>
 8007b62:	f04f 30ff 	mov.w	r0, #4294967295
 8007b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6a:	3501      	adds	r5, #1
 8007b6c:	e7c3      	b.n	8007af6 <_printf_common+0x46>
 8007b6e:	18e1      	adds	r1, r4, r3
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	2030      	movs	r0, #48	; 0x30
 8007b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b78:	4422      	add	r2, r4
 8007b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b82:	3302      	adds	r3, #2
 8007b84:	e7c5      	b.n	8007b12 <_printf_common+0x62>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4622      	mov	r2, r4
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	47c0      	blx	r8
 8007b90:	3001      	adds	r0, #1
 8007b92:	d0e6      	beq.n	8007b62 <_printf_common+0xb2>
 8007b94:	f109 0901 	add.w	r9, r9, #1
 8007b98:	e7d8      	b.n	8007b4c <_printf_common+0x9c>
	...

08007b9c <_printf_i>:
 8007b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ba0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	7e09      	ldrb	r1, [r1, #24]
 8007ba8:	b085      	sub	sp, #20
 8007baa:	296e      	cmp	r1, #110	; 0x6e
 8007bac:	4617      	mov	r7, r2
 8007bae:	4606      	mov	r6, r0
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb4:	f000 80b3 	beq.w	8007d1e <_printf_i+0x182>
 8007bb8:	d822      	bhi.n	8007c00 <_printf_i+0x64>
 8007bba:	2963      	cmp	r1, #99	; 0x63
 8007bbc:	d036      	beq.n	8007c2c <_printf_i+0x90>
 8007bbe:	d80a      	bhi.n	8007bd6 <_printf_i+0x3a>
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	f000 80b9 	beq.w	8007d38 <_printf_i+0x19c>
 8007bc6:	2958      	cmp	r1, #88	; 0x58
 8007bc8:	f000 8083 	beq.w	8007cd2 <_printf_i+0x136>
 8007bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bd4:	e032      	b.n	8007c3c <_printf_i+0xa0>
 8007bd6:	2964      	cmp	r1, #100	; 0x64
 8007bd8:	d001      	beq.n	8007bde <_printf_i+0x42>
 8007bda:	2969      	cmp	r1, #105	; 0x69
 8007bdc:	d1f6      	bne.n	8007bcc <_printf_i+0x30>
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	6813      	ldr	r3, [r2, #0]
 8007be2:	0605      	lsls	r5, r0, #24
 8007be4:	f103 0104 	add.w	r1, r3, #4
 8007be8:	d52a      	bpl.n	8007c40 <_printf_i+0xa4>
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6011      	str	r1, [r2, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da03      	bge.n	8007bfa <_printf_i+0x5e>
 8007bf2:	222d      	movs	r2, #45	; 0x2d
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bfa:	486f      	ldr	r0, [pc, #444]	; (8007db8 <_printf_i+0x21c>)
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	e039      	b.n	8007c74 <_printf_i+0xd8>
 8007c00:	2973      	cmp	r1, #115	; 0x73
 8007c02:	f000 809d 	beq.w	8007d40 <_printf_i+0x1a4>
 8007c06:	d808      	bhi.n	8007c1a <_printf_i+0x7e>
 8007c08:	296f      	cmp	r1, #111	; 0x6f
 8007c0a:	d020      	beq.n	8007c4e <_printf_i+0xb2>
 8007c0c:	2970      	cmp	r1, #112	; 0x70
 8007c0e:	d1dd      	bne.n	8007bcc <_printf_i+0x30>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	f043 0320 	orr.w	r3, r3, #32
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	e003      	b.n	8007c22 <_printf_i+0x86>
 8007c1a:	2975      	cmp	r1, #117	; 0x75
 8007c1c:	d017      	beq.n	8007c4e <_printf_i+0xb2>
 8007c1e:	2978      	cmp	r1, #120	; 0x78
 8007c20:	d1d4      	bne.n	8007bcc <_printf_i+0x30>
 8007c22:	2378      	movs	r3, #120	; 0x78
 8007c24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c28:	4864      	ldr	r0, [pc, #400]	; (8007dbc <_printf_i+0x220>)
 8007c2a:	e055      	b.n	8007cd8 <_printf_i+0x13c>
 8007c2c:	6813      	ldr	r3, [r2, #0]
 8007c2e:	1d19      	adds	r1, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6011      	str	r1, [r2, #0]
 8007c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e08c      	b.n	8007d5a <_printf_i+0x1be>
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6011      	str	r1, [r2, #0]
 8007c44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c48:	bf18      	it	ne
 8007c4a:	b21b      	sxthne	r3, r3
 8007c4c:	e7cf      	b.n	8007bee <_printf_i+0x52>
 8007c4e:	6813      	ldr	r3, [r2, #0]
 8007c50:	6825      	ldr	r5, [r4, #0]
 8007c52:	1d18      	adds	r0, r3, #4
 8007c54:	6010      	str	r0, [r2, #0]
 8007c56:	0628      	lsls	r0, r5, #24
 8007c58:	d501      	bpl.n	8007c5e <_printf_i+0xc2>
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	e002      	b.n	8007c64 <_printf_i+0xc8>
 8007c5e:	0668      	lsls	r0, r5, #25
 8007c60:	d5fb      	bpl.n	8007c5a <_printf_i+0xbe>
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	4854      	ldr	r0, [pc, #336]	; (8007db8 <_printf_i+0x21c>)
 8007c66:	296f      	cmp	r1, #111	; 0x6f
 8007c68:	bf14      	ite	ne
 8007c6a:	220a      	movne	r2, #10
 8007c6c:	2208      	moveq	r2, #8
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c74:	6865      	ldr	r5, [r4, #4]
 8007c76:	60a5      	str	r5, [r4, #8]
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	f2c0 8095 	blt.w	8007da8 <_printf_i+0x20c>
 8007c7e:	6821      	ldr	r1, [r4, #0]
 8007c80:	f021 0104 	bic.w	r1, r1, #4
 8007c84:	6021      	str	r1, [r4, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d13d      	bne.n	8007d06 <_printf_i+0x16a>
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	f040 808e 	bne.w	8007dac <_printf_i+0x210>
 8007c90:	4665      	mov	r5, ip
 8007c92:	2a08      	cmp	r2, #8
 8007c94:	d10b      	bne.n	8007cae <_printf_i+0x112>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	07db      	lsls	r3, r3, #31
 8007c9a:	d508      	bpl.n	8007cae <_printf_i+0x112>
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	6862      	ldr	r2, [r4, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	bfde      	ittt	le
 8007ca4:	2330      	movle	r3, #48	; 0x30
 8007ca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007caa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cae:	ebac 0305 	sub.w	r3, ip, r5
 8007cb2:	6123      	str	r3, [r4, #16]
 8007cb4:	f8cd 8000 	str.w	r8, [sp]
 8007cb8:	463b      	mov	r3, r7
 8007cba:	aa03      	add	r2, sp, #12
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff fef6 	bl	8007ab0 <_printf_common>
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d14d      	bne.n	8007d64 <_printf_i+0x1c8>
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	b005      	add	sp, #20
 8007cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cd2:	4839      	ldr	r0, [pc, #228]	; (8007db8 <_printf_i+0x21c>)
 8007cd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	6821      	ldr	r1, [r4, #0]
 8007cdc:	1d1d      	adds	r5, r3, #4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6015      	str	r5, [r2, #0]
 8007ce2:	060a      	lsls	r2, r1, #24
 8007ce4:	d50b      	bpl.n	8007cfe <_printf_i+0x162>
 8007ce6:	07ca      	lsls	r2, r1, #31
 8007ce8:	bf44      	itt	mi
 8007cea:	f041 0120 	orrmi.w	r1, r1, #32
 8007cee:	6021      	strmi	r1, [r4, #0]
 8007cf0:	b91b      	cbnz	r3, 8007cfa <_printf_i+0x15e>
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	f022 0220 	bic.w	r2, r2, #32
 8007cf8:	6022      	str	r2, [r4, #0]
 8007cfa:	2210      	movs	r2, #16
 8007cfc:	e7b7      	b.n	8007c6e <_printf_i+0xd2>
 8007cfe:	064d      	lsls	r5, r1, #25
 8007d00:	bf48      	it	mi
 8007d02:	b29b      	uxthmi	r3, r3
 8007d04:	e7ef      	b.n	8007ce6 <_printf_i+0x14a>
 8007d06:	4665      	mov	r5, ip
 8007d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d0c:	fb02 3311 	mls	r3, r2, r1, r3
 8007d10:	5cc3      	ldrb	r3, [r0, r3]
 8007d12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d16:	460b      	mov	r3, r1
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d1f5      	bne.n	8007d08 <_printf_i+0x16c>
 8007d1c:	e7b9      	b.n	8007c92 <_printf_i+0xf6>
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	6825      	ldr	r5, [r4, #0]
 8007d22:	6961      	ldr	r1, [r4, #20]
 8007d24:	1d18      	adds	r0, r3, #4
 8007d26:	6010      	str	r0, [r2, #0]
 8007d28:	0628      	lsls	r0, r5, #24
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	d501      	bpl.n	8007d32 <_printf_i+0x196>
 8007d2e:	6019      	str	r1, [r3, #0]
 8007d30:	e002      	b.n	8007d38 <_printf_i+0x19c>
 8007d32:	066a      	lsls	r2, r5, #25
 8007d34:	d5fb      	bpl.n	8007d2e <_printf_i+0x192>
 8007d36:	8019      	strh	r1, [r3, #0]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6123      	str	r3, [r4, #16]
 8007d3c:	4665      	mov	r5, ip
 8007d3e:	e7b9      	b.n	8007cb4 <_printf_i+0x118>
 8007d40:	6813      	ldr	r3, [r2, #0]
 8007d42:	1d19      	adds	r1, r3, #4
 8007d44:	6011      	str	r1, [r2, #0]
 8007d46:	681d      	ldr	r5, [r3, #0]
 8007d48:	6862      	ldr	r2, [r4, #4]
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f7f8 fa57 	bl	8000200 <memchr>
 8007d52:	b108      	cbz	r0, 8007d58 <_printf_i+0x1bc>
 8007d54:	1b40      	subs	r0, r0, r5
 8007d56:	6060      	str	r0, [r4, #4]
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d62:	e7a7      	b.n	8007cb4 <_printf_i+0x118>
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	462a      	mov	r2, r5
 8007d68:	4639      	mov	r1, r7
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	47c0      	blx	r8
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d0aa      	beq.n	8007cc8 <_printf_i+0x12c>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	079b      	lsls	r3, r3, #30
 8007d76:	d413      	bmi.n	8007da0 <_printf_i+0x204>
 8007d78:	68e0      	ldr	r0, [r4, #12]
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	4298      	cmp	r0, r3
 8007d7e:	bfb8      	it	lt
 8007d80:	4618      	movlt	r0, r3
 8007d82:	e7a3      	b.n	8007ccc <_printf_i+0x130>
 8007d84:	2301      	movs	r3, #1
 8007d86:	464a      	mov	r2, r9
 8007d88:	4639      	mov	r1, r7
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	47c0      	blx	r8
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d09a      	beq.n	8007cc8 <_printf_i+0x12c>
 8007d92:	3501      	adds	r5, #1
 8007d94:	68e3      	ldr	r3, [r4, #12]
 8007d96:	9a03      	ldr	r2, [sp, #12]
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	42ab      	cmp	r3, r5
 8007d9c:	dcf2      	bgt.n	8007d84 <_printf_i+0x1e8>
 8007d9e:	e7eb      	b.n	8007d78 <_printf_i+0x1dc>
 8007da0:	2500      	movs	r5, #0
 8007da2:	f104 0919 	add.w	r9, r4, #25
 8007da6:	e7f5      	b.n	8007d94 <_printf_i+0x1f8>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1ac      	bne.n	8007d06 <_printf_i+0x16a>
 8007dac:	7803      	ldrb	r3, [r0, #0]
 8007dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007db6:	e76c      	b.n	8007c92 <_printf_i+0xf6>
 8007db8:	08008efd 	.word	0x08008efd
 8007dbc:	08008f0e 	.word	0x08008f0e

08007dc0 <_sbrk_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4c06      	ldr	r4, [pc, #24]	; (8007ddc <_sbrk_r+0x1c>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	f7fa f938 	bl	8002040 <_sbrk>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d102      	bne.n	8007dda <_sbrk_r+0x1a>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	b103      	cbz	r3, 8007dda <_sbrk_r+0x1a>
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	20000a90 	.word	0x20000a90

08007de0 <strncmp>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	b16a      	cbz	r2, 8007e00 <strncmp+0x20>
 8007de4:	3901      	subs	r1, #1
 8007de6:	1884      	adds	r4, r0, r2
 8007de8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007dec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d103      	bne.n	8007dfc <strncmp+0x1c>
 8007df4:	42a0      	cmp	r0, r4
 8007df6:	d001      	beq.n	8007dfc <strncmp+0x1c>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f5      	bne.n	8007de8 <strncmp+0x8>
 8007dfc:	1a98      	subs	r0, r3, r2
 8007dfe:	bd10      	pop	{r4, pc}
 8007e00:	4610      	mov	r0, r2
 8007e02:	e7fc      	b.n	8007dfe <strncmp+0x1e>

08007e04 <__ascii_wctomb>:
 8007e04:	b149      	cbz	r1, 8007e1a <__ascii_wctomb+0x16>
 8007e06:	2aff      	cmp	r2, #255	; 0xff
 8007e08:	bf85      	ittet	hi
 8007e0a:	238a      	movhi	r3, #138	; 0x8a
 8007e0c:	6003      	strhi	r3, [r0, #0]
 8007e0e:	700a      	strbls	r2, [r1, #0]
 8007e10:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e14:	bf98      	it	ls
 8007e16:	2001      	movls	r0, #1
 8007e18:	4770      	bx	lr
 8007e1a:	4608      	mov	r0, r1
 8007e1c:	4770      	bx	lr
	...

08007e20 <malloc>:
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <malloc+0xc>)
 8007e22:	4601      	mov	r1, r0
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f7ff bc97 	b.w	8007758 <_malloc_r>
 8007e2a:	bf00      	nop
 8007e2c:	200000c4 	.word	0x200000c4

08007e30 <memmove>:
 8007e30:	4288      	cmp	r0, r1
 8007e32:	b510      	push	{r4, lr}
 8007e34:	eb01 0302 	add.w	r3, r1, r2
 8007e38:	d807      	bhi.n	8007e4a <memmove+0x1a>
 8007e3a:	1e42      	subs	r2, r0, #1
 8007e3c:	4299      	cmp	r1, r3
 8007e3e:	d00a      	beq.n	8007e56 <memmove+0x26>
 8007e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e44:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e48:	e7f8      	b.n	8007e3c <memmove+0xc>
 8007e4a:	4283      	cmp	r3, r0
 8007e4c:	d9f5      	bls.n	8007e3a <memmove+0xa>
 8007e4e:	1881      	adds	r1, r0, r2
 8007e50:	1ad2      	subs	r2, r2, r3
 8007e52:	42d3      	cmn	r3, r2
 8007e54:	d100      	bne.n	8007e58 <memmove+0x28>
 8007e56:	bd10      	pop	{r4, pc}
 8007e58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e60:	e7f7      	b.n	8007e52 <memmove+0x22>

08007e62 <__malloc_lock>:
 8007e62:	4770      	bx	lr

08007e64 <__malloc_unlock>:
 8007e64:	4770      	bx	lr
	...

08007e68 <_free_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d045      	beq.n	8007efc <_free_r+0x94>
 8007e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e74:	1f0c      	subs	r4, r1, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bfb8      	it	lt
 8007e7a:	18e4      	addlt	r4, r4, r3
 8007e7c:	f7ff fff1 	bl	8007e62 <__malloc_lock>
 8007e80:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <_free_r+0x98>)
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	4610      	mov	r0, r2
 8007e86:	b933      	cbnz	r3, 8007e96 <_free_r+0x2e>
 8007e88:	6063      	str	r3, [r4, #4]
 8007e8a:	6014      	str	r4, [r2, #0]
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e92:	f7ff bfe7 	b.w	8007e64 <__malloc_unlock>
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	d90c      	bls.n	8007eb4 <_free_r+0x4c>
 8007e9a:	6821      	ldr	r1, [r4, #0]
 8007e9c:	1862      	adds	r2, r4, r1
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	bf04      	itt	eq
 8007ea2:	681a      	ldreq	r2, [r3, #0]
 8007ea4:	685b      	ldreq	r3, [r3, #4]
 8007ea6:	6063      	str	r3, [r4, #4]
 8007ea8:	bf04      	itt	eq
 8007eaa:	1852      	addeq	r2, r2, r1
 8007eac:	6022      	streq	r2, [r4, #0]
 8007eae:	6004      	str	r4, [r0, #0]
 8007eb0:	e7ec      	b.n	8007e8c <_free_r+0x24>
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	b10a      	cbz	r2, 8007ebc <_free_r+0x54>
 8007eb8:	42a2      	cmp	r2, r4
 8007eba:	d9fa      	bls.n	8007eb2 <_free_r+0x4a>
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	1858      	adds	r0, r3, r1
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d10b      	bne.n	8007edc <_free_r+0x74>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	1858      	adds	r0, r3, r1
 8007eca:	4282      	cmp	r2, r0
 8007ecc:	6019      	str	r1, [r3, #0]
 8007ece:	d1dd      	bne.n	8007e8c <_free_r+0x24>
 8007ed0:	6810      	ldr	r0, [r2, #0]
 8007ed2:	6852      	ldr	r2, [r2, #4]
 8007ed4:	605a      	str	r2, [r3, #4]
 8007ed6:	4401      	add	r1, r0
 8007ed8:	6019      	str	r1, [r3, #0]
 8007eda:	e7d7      	b.n	8007e8c <_free_r+0x24>
 8007edc:	d902      	bls.n	8007ee4 <_free_r+0x7c>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	e7d3      	b.n	8007e8c <_free_r+0x24>
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	1821      	adds	r1, r4, r0
 8007ee8:	428a      	cmp	r2, r1
 8007eea:	bf04      	itt	eq
 8007eec:	6811      	ldreq	r1, [r2, #0]
 8007eee:	6852      	ldreq	r2, [r2, #4]
 8007ef0:	6062      	str	r2, [r4, #4]
 8007ef2:	bf04      	itt	eq
 8007ef4:	1809      	addeq	r1, r1, r0
 8007ef6:	6021      	streq	r1, [r4, #0]
 8007ef8:	605c      	str	r4, [r3, #4]
 8007efa:	e7c7      	b.n	8007e8c <_free_r+0x24>
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	200006d4 	.word	0x200006d4

08007f04 <_realloc_r>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	4607      	mov	r7, r0
 8007f08:	4614      	mov	r4, r2
 8007f0a:	460e      	mov	r6, r1
 8007f0c:	b921      	cbnz	r1, 8007f18 <_realloc_r+0x14>
 8007f0e:	4611      	mov	r1, r2
 8007f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f14:	f7ff bc20 	b.w	8007758 <_malloc_r>
 8007f18:	b922      	cbnz	r2, 8007f24 <_realloc_r+0x20>
 8007f1a:	f7ff ffa5 	bl	8007e68 <_free_r>
 8007f1e:	4625      	mov	r5, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f24:	f000 f814 	bl	8007f50 <_malloc_usable_size_r>
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d20f      	bcs.n	8007f4c <_realloc_r+0x48>
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4638      	mov	r0, r7
 8007f30:	f7ff fc12 	bl	8007758 <_malloc_r>
 8007f34:	4605      	mov	r5, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0f2      	beq.n	8007f20 <_realloc_r+0x1c>
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	f7fe fff2 	bl	8006f26 <memcpy>
 8007f42:	4631      	mov	r1, r6
 8007f44:	4638      	mov	r0, r7
 8007f46:	f7ff ff8f 	bl	8007e68 <_free_r>
 8007f4a:	e7e9      	b.n	8007f20 <_realloc_r+0x1c>
 8007f4c:	4635      	mov	r5, r6
 8007f4e:	e7e7      	b.n	8007f20 <_realloc_r+0x1c>

08007f50 <_malloc_usable_size_r>:
 8007f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f54:	1f18      	subs	r0, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfbc      	itt	lt
 8007f5a:	580b      	ldrlt	r3, [r1, r0]
 8007f5c:	18c0      	addlt	r0, r0, r3
 8007f5e:	4770      	bx	lr

08007f60 <_init>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	bf00      	nop
 8007f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f66:	bc08      	pop	{r3}
 8007f68:	469e      	mov	lr, r3
 8007f6a:	4770      	bx	lr

08007f6c <_fini>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr
