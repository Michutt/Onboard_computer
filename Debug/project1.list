
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e0  08009688  08009688  00019688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a768  0800a768  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a770  0800a770  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a774  0800a774  0001a774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800a778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000294  0800aa0c  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  0800aa0c  00020ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117c1  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a9  00000000  00000000  00031a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  00034330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00026c9e  00000000  00000000  00035130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d3ab  00000000  00000000  0005bdce  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000e981f  00000000  00000000  00069179  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00152998  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c80  00000000  00000000  00152a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000453c  00000000  00000000  00153698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000294 	.word	0x20000294
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800966c 	.word	0x0800966c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000298 	.word	0x20000298
 80001cc:	0800966c 	.word	0x0800966c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a35      	ldr	r2, [pc, #212]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a29      	ldr	r2, [pc, #164]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_GPIO_Init+0xf0>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <MX_GPIO_Init+0xf0>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a23      	ldr	r2, [pc, #140]	; (8001098 <MX_GPIO_Init+0xf0>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_GPIO_Init+0xf0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2120      	movs	r1, #32
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f001 fe1f 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_GPIO_Init+0xf4>)
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4818      	ldr	r0, [pc, #96]	; (80010a0 <MX_GPIO_Init+0xf8>)
 8001040:	f001 fc52 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001044:	2320      	movs	r3, #32
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f001 fc43 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = button_previous_Pin|button_next_Pin|button_parrent_Pin|button_child_Pin;
 8001062:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f001 fc35 	bl	80028e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2028      	movs	r0, #40	; 0x28
 8001084:	f001 fbb9 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001088:	2028      	movs	r0, #40	; 0x28
 800108a:	f001 fbd2 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	10210000 	.word	0x10210000
 80010a0:	48000800 	.word	0x48000800

080010a4 <GPS_Init>:
uint8_t buff[512];
char *p = buff;


void GPS_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	4903      	ldr	r1, [pc, #12]	; (80010b8 <GPS_Init+0x14>)
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <GPS_Init+0x18>)
 80010ae:	f003 fd65 	bl	8004b7c <HAL_UART_Receive_IT>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000930 	.word	0x20000930
 80010bc:	200009c8 	.word	0x200009c8

080010c0 <GPS_CallBack>:


void GPS_CallBack(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	if (rx_data != '\n')
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <GPS_CallBack+0x54>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d00b      	beq.n	80010e4 <GPS_CallBack+0x24>
		buff[idx++] = rx_data;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <GPS_CallBack+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	b2d1      	uxtb	r1, r2
 80010d4:	4a10      	ldr	r2, [pc, #64]	; (8001118 <GPS_CallBack+0x58>)
 80010d6:	7011      	strb	r1, [r2, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <GPS_CallBack+0x54>)
 80010dc:	7819      	ldrb	r1, [r3, #0]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <GPS_CallBack+0x5c>)
 80010e0:	5499      	strb	r1, [r3, r2]
 80010e2:	e010      	b.n	8001106 <GPS_CallBack+0x46>
	else
	{
		delete_commas(buff);
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <GPS_CallBack+0x5c>)
 80010e6:	f000 f81f 	bl	8001128 <delete_commas>
		parse(p);
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <GPS_CallBack+0x60>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f832 	bl	8001158 <parse>
		idx = 0;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <GPS_CallBack+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
		memset(buff, 0, sizeof(buff));
 80010fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fe:	2100      	movs	r1, #0
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <GPS_CallBack+0x5c>)
 8001102:	f004 fd3f 	bl	8005b84 <memset>
	}
//	HAL_UART_Transmit(DEBUG_USART, &rx_data, 1, 100); // print all frames
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	4902      	ldr	r1, [pc, #8]	; (8001114 <GPS_CallBack+0x54>)
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <GPS_CallBack+0x64>)
 800110c:	f003 fd36 	bl	8004b7c <HAL_UART_Receive_IT>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000930 	.word	0x20000930
 8001118:	200002b0 	.word	0x200002b0
 800111c:	20000714 	.word	0x20000714
 8001120:	20000008 	.word	0x20000008
 8001124:	200009c8 	.word	0x200009c8

08001128 <delete_commas>:


void delete_commas(uint8_t *buff)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    while ((buff = strchr(buff, ','))) {
 8001130:	e004      	b.n	800113c <delete_commas+0x14>
        *buff++ = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
    while ((buff = strchr(buff, ','))) {
 800113c:	212c      	movs	r1, #44	; 0x2c
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f005 fb8c 	bl	800685c <strchr>
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f2      	bne.n	8001132 <delete_commas+0xa>
    }
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0000      	movs	r0, r0
	...

08001158 <parse>:


void parse(char *p)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    uint32_t UTC_Time;
    uint32_t UTC_Date;
    double latitude; // longitude as well
    char *ptr;

    if (!strcmp(p, "$GPRMC"))
 8001160:	49a9      	ldr	r1, [pc, #676]	; (8001408 <parse+0x2b0>)
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff f834 	bl	80001d0 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 8141 	bne.w	80013f2 <parse+0x29a>
    {

        //frame name
        p += strlen(p) + 1;
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f837 	bl	80001e4 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	3301      	adds	r3, #1
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	607b      	str	r3, [r7, #4]

        //time
        UTC_Time = atoi(p);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f004 fcd1 	bl	8005b28 <atoi>
 8001186:	4603      	mov	r3, r0
 8001188:	61fb      	str	r3, [r7, #28]
        GPS_data.UTC_Hour = UTC_Time / 10000;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4a9f      	ldr	r2, [pc, #636]	; (800140c <parse+0x2b4>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0b5b      	lsrs	r3, r3, #13
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <parse+0x2b8>)
 8001198:	701a      	strb	r2, [r3, #0]
        GPS_data.UTC_Min = UTC_Time % 10000 / 100;
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	4b9b      	ldr	r3, [pc, #620]	; (800140c <parse+0x2b4>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0b5b      	lsrs	r3, r3, #13
 80011a4:	f242 7110 	movw	r1, #10000	; 0x2710
 80011a8:	fb01 f303 	mul.w	r3, r1, r3
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	4a99      	ldr	r2, [pc, #612]	; (8001414 <parse+0x2bc>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	095b      	lsrs	r3, r3, #5
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b95      	ldr	r3, [pc, #596]	; (8001410 <parse+0x2b8>)
 80011ba:	705a      	strb	r2, [r3, #1]
        GPS_data.UTC_Sec = UTC_Time % 100;
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	4b95      	ldr	r3, [pc, #596]	; (8001414 <parse+0x2bc>)
 80011c0:	fba3 1302 	umull	r1, r3, r3, r2
 80011c4:	095b      	lsrs	r3, r3, #5
 80011c6:	2164      	movs	r1, #100	; 0x64
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b8f      	ldr	r3, [pc, #572]	; (8001410 <parse+0x2b8>)
 80011d2:	709a      	strb	r2, [r3, #2]
        p += strlen(p) + 1;
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff f805 	bl	80001e4 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	3301      	adds	r3, #1
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	607b      	str	r3, [r7, #4]

        //receiver warning
        p += strlen(p) + 1;
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7fe fffd 	bl	80001e4 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	3301      	adds	r3, #1
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	607b      	str	r3, [r7, #4]

        //latitude
        latitude = strtod(p, &ptr);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f006 f95c 	bl	80074b8 <strtod>
 8001200:	4603      	mov	r3, r0
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f99e 	bl	8000544 <__aeabi_i2d>
 8001208:	4603      	mov	r3, r0
 800120a:	460c      	mov	r4, r1
 800120c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        GPS_data.latitude_min = latitude / 100;
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b80      	ldr	r3, [pc, #512]	; (8001418 <parse+0x2c0>)
 8001216:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800121a:	f7ff fb27 	bl	800086c <__aeabi_ddiv>
 800121e:	4603      	mov	r3, r0
 8001220:	460c      	mov	r4, r1
 8001222:	4618      	mov	r0, r3
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fccf 	bl	8000bc8 <__aeabi_d2uiz>
 800122a:	4603      	mov	r3, r0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b78      	ldr	r3, [pc, #480]	; (8001410 <parse+0x2b8>)
 8001230:	70da      	strb	r2, [r3, #3]
        GPS_data.latitude_deg = latitude - GPS_data.latitude_min * 100;
 8001232:	4b77      	ldr	r3, [pc, #476]	; (8001410 <parse+0x2b8>)
 8001234:	78db      	ldrb	r3, [r3, #3]
 8001236:	461a      	mov	r2, r3
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	fb03 f302 	mul.w	r3, r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f980 	bl	8000544 <__aeabi_i2d>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001250:	f7ff f82a 	bl	80002a8 <__aeabi_dsub>
 8001254:	4603      	mov	r3, r0
 8001256:	460c      	mov	r4, r1
 8001258:	4618      	mov	r0, r3
 800125a:	4621      	mov	r1, r4
 800125c:	f7ff fcd4 	bl	8000c08 <__aeabi_d2f>
 8001260:	4602      	mov	r2, r0
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <parse+0x2b8>)
 8001264:	605a      	str	r2, [r3, #4]
        p += strlen(p) + 1;
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7fe ffbc 	bl	80001e4 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	3301      	adds	r3, #1
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	607b      	str	r3, [r7, #4]

        //latitude direction
        GPS_data.ns = *p;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b65      	ldr	r3, [pc, #404]	; (8001410 <parse+0x2b8>)
 800127c:	721a      	strb	r2, [r3, #8]
        p += strlen(p) + 1;
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7fe ffb0 	bl	80001e4 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	3301      	adds	r3, #1
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	607b      	str	r3, [r7, #4]

        //longitude
        latitude = strtod(p, &ptr);
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4619      	mov	r1, r3
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f006 f90f 	bl	80074b8 <strtod>
 800129a:	4603      	mov	r3, r0
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f951 	bl	8000544 <__aeabi_i2d>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
        GPS_data.longitude_min = latitude / 100;
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <parse+0x2c0>)
 80012b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b4:	f7ff fada 	bl	800086c <__aeabi_ddiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	f7ff fc82 	bl	8000bc8 <__aeabi_d2uiz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b51      	ldr	r3, [pc, #324]	; (8001410 <parse+0x2b8>)
 80012ca:	725a      	strb	r2, [r3, #9]
        GPS_data.longitude_deg = latitude - GPS_data.longitude_min * 100;
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <parse+0x2b8>)
 80012ce:	7a5b      	ldrb	r3, [r3, #9]
 80012d0:	461a      	mov	r2, r3
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	fb03 f302 	mul.w	r3, r3, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f933 	bl	8000544 <__aeabi_i2d>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	461a      	mov	r2, r3
 80012e4:	4623      	mov	r3, r4
 80012e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ea:	f7fe ffdd 	bl	80002a8 <__aeabi_dsub>
 80012ee:	4603      	mov	r3, r0
 80012f0:	460c      	mov	r4, r1
 80012f2:	4618      	mov	r0, r3
 80012f4:	4621      	mov	r1, r4
 80012f6:	f7ff fc87 	bl	8000c08 <__aeabi_d2f>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <parse+0x2b8>)
 80012fe:	60da      	str	r2, [r3, #12]
        p += strlen(p) + 1;
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7fe ff6f 	bl	80001e4 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	3301      	adds	r3, #1
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	607b      	str	r3, [r7, #4]

        //longitude direction
        GPS_data.ew = *p;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <parse+0x2b8>)
 8001316:	741a      	strb	r2, [r3, #16]
        p += strlen(p) + 1;
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7fe ff63 	bl	80001e4 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	3301      	adds	r3, #1
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	607b      	str	r3, [r7, #4]

        //speed in knots
        GPS_data.speed = atof(p) * 1.852; //conversion to km per hour
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f004 fbfa 	bl	8005b22 <atof>
 800132e:	4603      	mov	r3, r0
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f907 	bl	8000544 <__aeabi_i2d>
 8001336:	a332      	add	r3, pc, #200	; (adr r3, 8001400 <parse+0x2a8>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f96c 	bl	8000618 <__aeabi_dmul>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc5e 	bl	8000c08 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <parse+0x2b8>)
 8001350:	615a      	str	r2, [r3, #20]
        if (GPS_data.speed == (float)1.852)
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <parse+0x2b8>)
 8001354:	edd3 7a05 	vldr	s15, [r3, #20]
 8001358:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800141c <parse+0x2c4>
 800135c:	eef4 7a47 	vcmp.f32	s15, s14
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d103      	bne.n	800136e <parse+0x216>
        {
        	GPS_data.speed = (float)0;
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <parse+0x2b8>)
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
        }
        p += strlen(p) + 1;
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7fe ff38 	bl	80001e4 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	3301      	adds	r3, #1
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	607b      	str	r3, [r7, #4]

        //course
        p += strlen(p) + 1;
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7fe ff30 	bl	80001e4 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	3301      	adds	r3, #1
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	607b      	str	r3, [r7, #4]

        //date
        UTC_Date = 100000 + atoi(p);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f004 fbca 	bl	8005b28 <atoi>
 8001394:	4603      	mov	r3, r0
 8001396:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800139a:	33a0      	adds	r3, #160	; 0xa0
 800139c:	60fb      	str	r3, [r7, #12]
        GPS_data.UTC_Day = (UTC_Date / 10000) - 10;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a1a      	ldr	r2, [pc, #104]	; (800140c <parse+0x2b4>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0b5b      	lsrs	r3, r3, #13
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3b0a      	subs	r3, #10
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <parse+0x2b8>)
 80013b0:	76da      	strb	r2, [r3, #27]
		GPS_data.UTC_Month = UTC_Date % 10000 / 100;
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <parse+0x2b4>)
 80013b6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ba:	0b5b      	lsrs	r3, r3, #13
 80013bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <parse+0x2bc>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	095b      	lsrs	r3, r3, #5
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <parse+0x2b8>)
 80013d2:	769a      	strb	r2, [r3, #26]
		GPS_data.UTC_Year = 2000 + (UTC_Date % 100);
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <parse+0x2bc>)
 80013d8:	fba3 1302 	umull	r1, r3, r3, r2
 80013dc:	095b      	lsrs	r3, r3, #5
 80013de:	2164      	movs	r1, #100	; 0x64
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <parse+0x2b8>)
 80013f0:	831a      	strh	r2, [r3, #24]

    }
}
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	c083126f 	.word	0xc083126f
 8001404:	3ffda1ca 	.word	0x3ffda1ca
 8001408:	08009688 	.word	0x08009688
 800140c:	d1b71759 	.word	0xd1b71759
 8001410:	20000914 	.word	0x20000914
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	40590000 	.word	0x40590000
 800141c:	3fed0e56 	.word	0x3fed0e56

08001420 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_I2C1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_I2C1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_I2C1_Init+0x74>)
 800142c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001430:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_I2C1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_I2C1_Init+0x74>)
 800143a:	2201      	movs	r2, #1
 800143c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_I2C1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_I2C1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C1_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_I2C1_Init+0x74>)
 800145e:	f001 fc3e 	bl	8002cde <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 faba 	bl	80019e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146c:	2100      	movs	r1, #0
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_I2C1_Init+0x74>)
 8001470:	f001 ffa0 	bl	80033b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800147a:	f000 fab1 	bl	80019e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_I2C1_Init+0x74>)
 8001482:	f001 ffe2 	bl	800344a <HAL_I2CEx_ConfigDigitalFilter>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800148c:	f000 faa8 	bl	80019e0 <Error_Handler>
  }

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000934 	.word	0x20000934
 8001498:	40005400 	.word	0x40005400

0800149c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_I2C_MspInit+0x7c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d128      	bne.n	8001510 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_I2C_MspInit+0x80>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a16      	ldr	r2, [pc, #88]	; (800151c <HAL_I2C_MspInit+0x80>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_I2C_MspInit+0x80>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80014d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014dc:	2312      	movs	r3, #18
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e8:	2304      	movs	r3, #4
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <HAL_I2C_MspInit+0x84>)
 80014f4:	f001 f9f8 	bl	80028e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_I2C_MspInit+0x80>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_I2C_MspInit+0x80>)
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001502:	6593      	str	r3, [r2, #88]	; 0x58
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_I2C_MspInit+0x80>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40005400 	.word	0x40005400
 800151c:	40021000 	.word	0x40021000
 8001520:	48000400 	.word	0x48000400

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	b093      	sub	sp, #76	; 0x4c
 8001528:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f000 fff1 	bl	8002510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f82d 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f7ff fd39 	bl	8000fa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001536:	f000 fedb 	bl	80022f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800153a:	f000 ff09 	bl	8002350 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800153e:	f7ff ff6f 	bl	8001420 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001542:	f7ff fdaf 	bl	80010a4 <GPS_Init>
  ssd1306_Init(&hi2c1);
 8001546:	480f      	ldr	r0, [pc, #60]	; (8001584 <main+0x60>)
 8001548:	f000 fb42 	bl	8001bd0 <ssd1306_Init>
  menu_show(current_menu->name, hi2c1);
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <main+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	4e0b      	ldr	r6, [pc, #44]	; (8001584 <main+0x60>)
 8001556:	466d      	mov	r5, sp
 8001558:	f106 040c 	add.w	r4, r6, #12
 800155c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001568:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800156c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001570:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fdbd 	bl	80020f4 <menu_show>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button_check();
 800157a:	f000 f8fb 	bl	8001774 <button_check>
	  screen_refresh();
 800157e:	f000 f8c1 	bl	8001704 <screen_refresh>
  {
 8001582:	e7fa      	b.n	800157a <main+0x56>
 8001584:	20000934 	.word	0x20000934
 8001588:	200000b4 	.word	0x200000b4

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0b8      	sub	sp, #224	; 0xe0
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001596:	2244      	movs	r2, #68	; 0x44
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f004 faf2 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2288      	movs	r2, #136	; 0x88
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 fae4 	bl	8005b84 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ca:	2310      	movs	r3, #16
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015e2:	230a      	movs	r3, #10
 80015e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015e8:	2307      	movs	r3, #7
 80015ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 ffd4 	bl	80035ac <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800160a:	f000 f9e9 	bl	80019e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001614:	2303      	movs	r3, #3
 8001616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800162c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001630:	2104      	movs	r1, #4
 8001632:	4618      	mov	r0, r3
 8001634:	f002 fba0 	bl	8003d78 <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800163e:	f000 f9cf 	bl	80019e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001642:	2346      	movs	r3, #70	; 0x46
 8001644:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800164e:	2300      	movs	r3, #0
 8001650:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fd93 	bl	8004180 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001660:	f000 f9be 	bl	80019e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001668:	f001 ff4a 	bl	8003500 <HAL_PWREx_ControlVoltageScaling>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001672:	f000 f9b5 	bl	80019e0 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	37e0      	adds	r7, #224	; 0xe0
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	if(huart == GPS_USART)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_UART_RxCpltCallback+0x1c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_UART_RxCpltCallback+0x14>
	{
		GPS_CallBack();
 8001690:	f7ff fd16 	bl	80010c0 <GPS_CallBack>
	}
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200009c8 	.word	0x200009c8

080016a0 <debounce_button>:

uint8_t debounce_button(uint16_t GPIO_Pin)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(50);
 80016aa:	2032      	movs	r0, #50	; 0x32
 80016ac:	f000 ffa8 	bl	8002600 <HAL_Delay>
	if(!HAL_GPIO_ReadPin (GPIOA, GPIO_Pin))
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f001 fabe 	bl	8002c38 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <debounce_button+0x26>
		return 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <debounce_button+0x28>
	else
		return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <release_button>:

void release_button(uint16_t GPIO_Pin, uint8_t *state)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	80fb      	strh	r3, [r7, #6]
	if (*state && HAL_GPIO_ReadPin(GPIOA, GPIO_Pin))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00b      	beq.n	80016fc <release_button+0x2c>
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f001 faa4 	bl	8002c38 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <release_button+0x2c>
	{
		*state = 0;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
	}
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <screen_refresh>:

void screen_refresh(void)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b091      	sub	sp, #68	; 0x44
 8001708:	af10      	add	r7, sp, #64	; 0x40
	if (data_display && (sec_status != GPS_data.UTC_Sec))
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <screen_refresh+0x5c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d021      	beq.n	8001756 <screen_refresh+0x52>
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <screen_refresh+0x60>)
 8001714:	789a      	ldrb	r2, [r3, #2]
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <screen_refresh+0x64>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d01b      	beq.n	8001756 <screen_refresh+0x52>
	{
		sec_status = GPS_data.UTC_Sec;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <screen_refresh+0x60>)
 8001720:	789a      	ldrb	r2, [r3, #2]
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <screen_refresh+0x64>)
 8001724:	701a      	strb	r2, [r3, #0]
		menu_show(current_menu->menu_f(), hi2c1);
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <screen_refresh+0x68>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	4798      	blx	r3
 800172e:	4684      	mov	ip, r0
 8001730:	4e0f      	ldr	r6, [pc, #60]	; (8001770 <screen_refresh+0x6c>)
 8001732:	466d      	mov	r5, sp
 8001734:	f106 040c 	add.w	r4, r6, #12
 8001738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001748:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800174c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001750:	4660      	mov	r0, ip
 8001752:	f000 fccf 	bl	80020f4 <menu_show>
	}
}
 8001756:	bf00      	nop
 8001758:	3704      	adds	r7, #4
 800175a:	46bd      	mov	sp, r7
 800175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175e:	bf00      	nop
 8001760:	200002b8 	.word	0x200002b8
 8001764:	20000914 	.word	0x20000914
 8001768:	200009c4 	.word	0x200009c4
 800176c:	200000b4 	.word	0x200000b4
 8001770:	20000934 	.word	0x20000934

08001774 <button_check>:

void button_check(void)
{
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	b093      	sub	sp, #76	; 0x4c
 8001778:	af10      	add	r7, sp, #64	; 0x40
	if(!button_state[0] && !HAL_GPIO_ReadPin(GPIOA, button_child_Pin))
 800177a:	4b90      	ldr	r3, [pc, #576]	; (80019bc <button_check+0x248>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d150      	bne.n	8001824 <button_check+0xb0>
 8001782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 fa55 	bl	8002c38 <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d147      	bne.n	8001824 <button_check+0xb0>
	{
		sec_status = GPS_data.UTC_Sec;
 8001794:	4b8a      	ldr	r3, [pc, #552]	; (80019c0 <button_check+0x24c>)
 8001796:	789a      	ldrb	r2, [r3, #2]
 8001798:	4b8a      	ldr	r3, [pc, #552]	; (80019c4 <button_check+0x250>)
 800179a:	701a      	strb	r2, [r3, #0]
		button_state[0] = 1;
 800179c:	4b87      	ldr	r3, [pc, #540]	; (80019bc <button_check+0x248>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
		if(debounce_button(button_child_Pin))
 80017a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017a6:	f7ff ff7b 	bl	80016a0 <debounce_button>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d039      	beq.n	8001824 <button_check+0xb0>
		{
			if (current_menu->menu_f)
 80017b0:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <button_check+0x254>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d01b      	beq.n	80017f2 <button_check+0x7e>
			{
				data_display = 1;
 80017ba:	4b84      	ldr	r3, [pc, #528]	; (80019cc <button_check+0x258>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
				menu_show(current_menu->menu_f(), hi2c1);
 80017c0:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <button_check+0x254>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4798      	blx	r3
 80017c8:	4684      	mov	ip, r0
 80017ca:	4e81      	ldr	r6, [pc, #516]	; (80019d0 <button_check+0x25c>)
 80017cc:	466d      	mov	r5, sp
 80017ce:	f106 040c 	add.w	r4, r6, #12
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017e6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80017ea:	4660      	mov	r0, ip
 80017ec:	f000 fc82 	bl	80020f4 <menu_show>
 80017f0:	e018      	b.n	8001824 <button_check+0xb0>
			}
			else
			{
				menu_sw_child();
 80017f2:	f000 f919 	bl	8001a28 <menu_sw_child>
				menu_show(current_menu->name, hi2c1);
 80017f6:	4b74      	ldr	r3, [pc, #464]	; (80019c8 <button_check+0x254>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4e74      	ldr	r6, [pc, #464]	; (80019d0 <button_check+0x25c>)
 8001800:	466d      	mov	r5, sp
 8001802:	f106 040c 	add.w	r4, r6, #12
 8001806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001816:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800181a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fc68 	bl	80020f4 <menu_show>
			}
		}
	}
	if(!button_state[1] && !HAL_GPIO_ReadPin(GPIOA, button_parrent_Pin))
 8001824:	4b65      	ldr	r3, [pc, #404]	; (80019bc <button_check+0x248>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d14a      	bne.n	80018c2 <button_check+0x14e>
 800182c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f001 fa00 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d141      	bne.n	80018c2 <button_check+0x14e>
	{
		button_state[1] = 1;
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <button_check+0x248>)
 8001840:	2201      	movs	r2, #1
 8001842:	705a      	strb	r2, [r3, #1]
		if(debounce_button(button_parrent_Pin))
 8001844:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001848:	f7ff ff2a 	bl	80016a0 <debounce_button>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d037      	beq.n	80018c2 <button_check+0x14e>
		{
			if (data_display)
 8001852:	4b5e      	ldr	r3, [pc, #376]	; (80019cc <button_check+0x258>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d01a      	beq.n	8001890 <button_check+0x11c>
			{
				data_display = 0;
 800185a:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <button_check+0x258>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
				menu_show(current_menu->name, hi2c1);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <button_check+0x254>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4e59      	ldr	r6, [pc, #356]	; (80019d0 <button_check+0x25c>)
 800186a:	466d      	mov	r5, sp
 800186c:	f106 040c 	add.w	r4, r6, #12
 8001870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001880:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001884:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fc33 	bl	80020f4 <menu_show>
 800188e:	e018      	b.n	80018c2 <button_check+0x14e>
			}
			else
			{
				menu_sw_parent();
 8001890:	f000 f8de 	bl	8001a50 <menu_sw_parent>
				menu_show(current_menu->name, hi2c1);
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <button_check+0x254>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	4e4c      	ldr	r6, [pc, #304]	; (80019d0 <button_check+0x25c>)
 800189e:	466d      	mov	r5, sp
 80018a0:	f106 040c 	add.w	r4, r6, #12
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018b8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fc19 	bl	80020f4 <menu_show>
			}
		}
	}
	if(!button_state[2] && !HAL_GPIO_ReadPin(GPIOA, button_next_Pin))
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <button_check+0x248>)
 80018c4:	789b      	ldrb	r3, [r3, #2]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d12f      	bne.n	800192a <button_check+0x1b6>
 80018ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f001 f9b1 	bl	8002c38 <HAL_GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d126      	bne.n	800192a <button_check+0x1b6>
	{
		button_state[2] = 1;
 80018dc:	4b37      	ldr	r3, [pc, #220]	; (80019bc <button_check+0x248>)
 80018de:	2201      	movs	r2, #1
 80018e0:	709a      	strb	r2, [r3, #2]
		if(debounce_button(button_next_Pin) && !data_display)
 80018e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018e6:	f7ff fedb 	bl	80016a0 <debounce_button>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01c      	beq.n	800192a <button_check+0x1b6>
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <button_check+0x258>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d118      	bne.n	800192a <button_check+0x1b6>
		{
			menu_sw_next();
 80018f8:	f000 f87a 	bl	80019f0 <menu_sw_next>
			menu_show(current_menu->name, hi2c1);
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <button_check+0x254>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	4e32      	ldr	r6, [pc, #200]	; (80019d0 <button_check+0x25c>)
 8001906:	466d      	mov	r5, sp
 8001908:	f106 040c 	add.w	r4, r6, #12
 800190c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001918:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800191c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001920:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fbe5 	bl	80020f4 <menu_show>
		}
	}
	if(!button_state[3] && !HAL_GPIO_ReadPin(GPIOA, button_previous_Pin))
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <button_check+0x248>)
 800192c:	78db      	ldrb	r3, [r3, #3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d12d      	bne.n	800198e <button_check+0x21a>
 8001932:	2140      	movs	r1, #64	; 0x40
 8001934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001938:	f001 f97e 	bl	8002c38 <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d125      	bne.n	800198e <button_check+0x21a>
	{
		button_state[3] = 1;
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <button_check+0x248>)
 8001944:	2201      	movs	r2, #1
 8001946:	70da      	strb	r2, [r3, #3]
		if(debounce_button(button_previous_Pin) && !data_display)
 8001948:	2040      	movs	r0, #64	; 0x40
 800194a:	f7ff fea9 	bl	80016a0 <debounce_button>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01c      	beq.n	800198e <button_check+0x21a>
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <button_check+0x258>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d118      	bne.n	800198e <button_check+0x21a>
		{
			menu_sw_previous();
 800195c:	f000 f856 	bl	8001a0c <menu_sw_previous>
			menu_show(current_menu->name, hi2c1);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <button_check+0x254>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4e19      	ldr	r6, [pc, #100]	; (80019d0 <button_check+0x25c>)
 800196a:	466d      	mov	r5, sp
 800196c:	f106 040c 	add.w	r4, r6, #12
 8001970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001980:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001984:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fbb3 	bl	80020f4 <menu_show>
		}
	}

	release_button(button_child_Pin, &button_state[0]);
 800198e:	490b      	ldr	r1, [pc, #44]	; (80019bc <button_check+0x248>)
 8001990:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001994:	f7ff fe9c 	bl	80016d0 <release_button>
	release_button(button_parrent_Pin, &button_state[1]);
 8001998:	490e      	ldr	r1, [pc, #56]	; (80019d4 <button_check+0x260>)
 800199a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800199e:	f7ff fe97 	bl	80016d0 <release_button>
	release_button(button_next_Pin, &button_state[2]);
 80019a2:	490d      	ldr	r1, [pc, #52]	; (80019d8 <button_check+0x264>)
 80019a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019a8:	f7ff fe92 	bl	80016d0 <release_button>
	release_button(button_previous_Pin, &button_state[3]);
 80019ac:	490b      	ldr	r1, [pc, #44]	; (80019dc <button_check+0x268>)
 80019ae:	2040      	movs	r0, #64	; 0x40
 80019b0:	f7ff fe8e 	bl	80016d0 <release_button>
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019bc:	200002b4 	.word	0x200002b4
 80019c0:	20000914 	.word	0x20000914
 80019c4:	200009c4 	.word	0x200009c4
 80019c8:	200000b4 	.word	0x200000b4
 80019cc:	200002b8 	.word	0x200002b8
 80019d0:	20000934 	.word	0x20000934
 80019d4:	200002b5 	.word	0x200002b5
 80019d8:	200002b6 	.word	0x200002b6
 80019dc:	200002b7 	.word	0x200002b7

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <menu_sw_next>:
menu_t menu_speed = { "Speed", &menu_calendar, &menu_position, NULL, NULL, display_speed };

menu_t *current_menu = &menu_calendar;

void menu_sw_next(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	current_menu = current_menu->next;
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <menu_sw_next+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <menu_sw_next+0x18>)
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	200000b4 	.word	0x200000b4

08001a0c <menu_sw_previous>:

void menu_sw_previous(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
	current_menu = current_menu->previous;
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <menu_sw_previous+0x18>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <menu_sw_previous+0x18>)
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	200000b4 	.word	0x200000b4

08001a28 <menu_sw_child>:

void menu_sw_child(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	if (current_menu->child)
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <menu_sw_child+0x24>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <menu_sw_child+0x18>
	current_menu = current_menu->child;
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <menu_sw_child+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <menu_sw_child+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200000b4 	.word	0x200000b4

08001a50 <menu_sw_parent>:

void menu_sw_parent(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	if (current_menu->parent)
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <menu_sw_parent+0x24>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <menu_sw_parent+0x18>
		current_menu = current_menu->parent;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <menu_sw_parent+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <menu_sw_parent+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200000b4 	.word	0x200000b4

08001a78 <display_time>:

const char *display_time(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af02      	add	r7, sp, #8
	static char data[10];
	sprintf((char *)data, "%i:%i:%i", GPS_data.UTC_Hour, GPS_data.UTC_Min, GPS_data.UTC_Sec);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <display_time+0x2c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <display_time+0x2c>)
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <display_time+0x2c>)
 8001a8c:	789b      	ldrb	r3, [r3, #2]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	460b      	mov	r3, r1
 8001a92:	4905      	ldr	r1, [pc, #20]	; (8001aa8 <display_time+0x30>)
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <display_time+0x34>)
 8001a96:	f004 fec1 	bl	800681c <siprintf>
	return &data[0];
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <display_time+0x34>)
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000914 	.word	0x20000914
 8001aa8:	080096d8 	.word	0x080096d8
 8001aac:	200002bc 	.word	0x200002bc

08001ab0 <display_date>:

const char *display_date(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af02      	add	r7, sp, #8
	static char data[10];
	sprintf((char *)data, "%i.%i.%i", GPS_data.UTC_Year, GPS_data.UTC_Month, GPS_data.UTC_Day);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <display_date+0x2c>)
 8001ab8:	8b1b      	ldrh	r3, [r3, #24]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <display_date+0x2c>)
 8001abe:	7e9b      	ldrb	r3, [r3, #26]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <display_date+0x2c>)
 8001ac4:	7edb      	ldrb	r3, [r3, #27]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4905      	ldr	r1, [pc, #20]	; (8001ae0 <display_date+0x30>)
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <display_date+0x34>)
 8001ace:	f004 fea5 	bl	800681c <siprintf>
	return &data[0];
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <display_date+0x34>)
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000914 	.word	0x20000914
 8001ae0:	080096e4 	.word	0x080096e4
 8001ae4:	200002c8 	.word	0x200002c8

08001ae8 <display_latitude>:

const char *display_latitude(void)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af04      	add	r7, sp, #16
	static char data[15];
	sprintf((char *)data, "%i %f %c", GPS_data.latitude_min, GPS_data.latitude_deg, GPS_data.ns);
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <display_latitude+0x38>)
 8001af0:	78db      	ldrb	r3, [r3, #3]
 8001af2:	461d      	mov	r5, r3
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <display_latitude+0x38>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd35 	bl	8000568 <__aeabi_f2d>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <display_latitude+0x38>)
 8001b04:	7a12      	ldrb	r2, [r2, #8]
 8001b06:	9202      	str	r2, [sp, #8]
 8001b08:	e9cd 3400 	strd	r3, r4, [sp]
 8001b0c:	462a      	mov	r2, r5
 8001b0e:	4905      	ldr	r1, [pc, #20]	; (8001b24 <display_latitude+0x3c>)
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <display_latitude+0x40>)
 8001b12:	f004 fe83 	bl	800681c <siprintf>
	return &data[0];
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <display_latitude+0x40>)
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000914 	.word	0x20000914
 8001b24:	080096f0 	.word	0x080096f0
 8001b28:	200002d4 	.word	0x200002d4

08001b2c <display_longitude>:

const char *display_longitude(void)
{
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af04      	add	r7, sp, #16
	static char data[15];
	sprintf((char *)data, "%i'%f\"%c", GPS_data.longitude_min, GPS_data.longitude_deg, GPS_data.ew);
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <display_longitude+0x38>)
 8001b34:	7a5b      	ldrb	r3, [r3, #9]
 8001b36:	461d      	mov	r5, r3
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <display_longitude+0x38>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd13 	bl	8000568 <__aeabi_f2d>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <display_longitude+0x38>)
 8001b48:	7c12      	ldrb	r2, [r2, #16]
 8001b4a:	9202      	str	r2, [sp, #8]
 8001b4c:	e9cd 3400 	strd	r3, r4, [sp]
 8001b50:	462a      	mov	r2, r5
 8001b52:	4905      	ldr	r1, [pc, #20]	; (8001b68 <display_longitude+0x3c>)
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <display_longitude+0x40>)
 8001b56:	f004 fe61 	bl	800681c <siprintf>
	return &data[0];
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <display_longitude+0x40>)
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000914 	.word	0x20000914
 8001b68:	080096fc 	.word	0x080096fc
 8001b6c:	200002e4 	.word	0x200002e4

08001b70 <display_speed>:

const char *display_speed(void)
{
 8001b70:	b598      	push	{r3, r4, r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	static char data[10];
	sprintf((char *)data, "%f", GPS_data.speed);
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <display_speed+0x24>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcf5 	bl	8000568 <__aeabi_f2d>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460c      	mov	r4, r1
 8001b82:	461a      	mov	r2, r3
 8001b84:	4623      	mov	r3, r4
 8001b86:	4904      	ldr	r1, [pc, #16]	; (8001b98 <display_speed+0x28>)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <display_speed+0x2c>)
 8001b8a:	f004 fe47 	bl	800681c <siprintf>
	return &data[0];
 8001b8e:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <display_speed+0x2c>)
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd98      	pop	{r3, r4, r7, pc}
 8001b94:	20000914 	.word	0x20000914
 8001b98:	08009708 	.word	0x08009708
 8001b9c:	200002f4 	.word	0x200002f4

08001ba0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af04      	add	r7, sp, #16
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001bac:	230a      	movs	r3, #10
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	1cfb      	adds	r3, r7, #3
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2178      	movs	r1, #120	; 0x78
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f001 f91c 	bl	8002dfc <HAL_I2C_Mem_Write>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001bd8:	2064      	movs	r0, #100	; 0x64
 8001bda:	f000 fd11 	bl	8002600 <HAL_Delay>
    int status = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001be2:	21ae      	movs	r1, #174	; 0xae
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffdb 	bl	8001ba0 <ssd1306_WriteCommand>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffd2 	bl	8001ba0 <ssd1306_WriteCommand>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001c06:	2110      	movs	r1, #16
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffc9 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001c18:	21b0      	movs	r1, #176	; 0xb0
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffc0 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001c2a:	21c8      	movs	r1, #200	; 0xc8
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ffb7 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffae 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001c4e:	2110      	movs	r1, #16
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffa5 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001c60:	2140      	movs	r1, #64	; 0x40
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff9c 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001c72:	2181      	movs	r1, #129	; 0x81
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff93 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001c84:	21ff      	movs	r1, #255	; 0xff
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff8a 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001c96:	21a1      	movs	r1, #161	; 0xa1
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff81 	bl	8001ba0 <ssd1306_WriteCommand>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001ca8:	21a6      	movs	r1, #166	; 0xa6
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff78 	bl	8001ba0 <ssd1306_WriteCommand>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001cba:	21a8      	movs	r1, #168	; 0xa8
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff6f 	bl	8001ba0 <ssd1306_WriteCommand>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001ccc:	213f      	movs	r1, #63	; 0x3f
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff66 	bl	8001ba0 <ssd1306_WriteCommand>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cde:	21a4      	movs	r1, #164	; 0xa4
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff5d 	bl	8001ba0 <ssd1306_WriteCommand>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001cf0:	21d3      	movs	r1, #211	; 0xd3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff54 	bl	8001ba0 <ssd1306_WriteCommand>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff4b 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001d14:	21d5      	movs	r1, #213	; 0xd5
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff42 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001d26:	21f0      	movs	r1, #240	; 0xf0
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff39 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001d38:	21d9      	movs	r1, #217	; 0xd9
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff30 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001d4a:	2122      	movs	r1, #34	; 0x22
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff27 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001d5c:	21da      	movs	r1, #218	; 0xda
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ff1e 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001d6e:	2112      	movs	r1, #18
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff15 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001d80:	21db      	movs	r1, #219	; 0xdb
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff0c 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001d92:	2120      	movs	r1, #32
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff03 	bl	8001ba0 <ssd1306_WriteCommand>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001da4:	218d      	movs	r1, #141	; 0x8d
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fefa 	bl	8001ba0 <ssd1306_WriteCommand>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001db6:	2114      	movs	r1, #20
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fef1 	bl	8001ba0 <ssd1306_WriteCommand>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001dc8:	21af      	movs	r1, #175	; 0xaf
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fee8 	bl	8001ba0 <ssd1306_WriteCommand>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <ssd1306_Init+0x214>
        return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e00f      	b.n	8001e04 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f000 f813 	bl	8001e10 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f832 	bl	8001e54 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <ssd1306_Init+0x23c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <ssd1306_Init+0x23c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <ssd1306_Init+0x23c>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	715a      	strb	r2, [r3, #5]

    return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000700 	.word	0x20000700

08001e10 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e00d      	b.n	8001e3c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <ssd1306_Fill+0x1a>
 8001e26:	2100      	movs	r1, #0
 8001e28:	e000      	b.n	8001e2c <ssd1306_Fill+0x1c>
 8001e2a:	21ff      	movs	r1, #255	; 0xff
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <ssd1306_Fill+0x40>)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	460a      	mov	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d3ed      	bcc.n	8001e20 <ssd1306_Fill+0x10>
    }
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	20000300 	.word	0x20000300

08001e54 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e020      	b.n	8001ea4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3b50      	subs	r3, #80	; 0x50
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe98 	bl	8001ba0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001e70:	2100      	movs	r1, #0
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fe94 	bl	8001ba0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001e78:	2110      	movs	r1, #16
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fe90 	bl	8001ba0 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	01db      	lsls	r3, r3, #7
 8001e84:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <ssd1306_UpdateScreen+0x60>)
 8001e86:	4413      	add	r3, r2
 8001e88:	2264      	movs	r2, #100	; 0x64
 8001e8a:	9202      	str	r2, [sp, #8]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	9201      	str	r2, [sp, #4]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	2178      	movs	r1, #120	; 0x78
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 ffaf 	bl	8002dfc <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	d9db      	bls.n	8001e62 <ssd1306_UpdateScreen+0xe>
    }
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000300 	.word	0x20000300

08001eb8 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	71bb      	strb	r3, [r7, #6]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db48      	blt.n	8001f64 <ssd1306_DrawPixel+0xac>
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ed6:	d845      	bhi.n	8001f64 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <ssd1306_DrawPixel+0xb8>)
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001ee0:	797b      	ldrb	r3, [r7, #5]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001eee:	797b      	ldrb	r3, [r7, #5]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d11a      	bne.n	8001f2a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	b2d8      	uxtb	r0, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	01db      	lsls	r3, r3, #7
 8001f00:	4413      	add	r3, r2
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <ssd1306_DrawPixel+0xbc>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	b25a      	sxtb	r2, r3
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b259      	sxtb	r1, r3
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	01db      	lsls	r3, r3, #7
 8001f20:	4413      	add	r3, r2
 8001f22:	b2c9      	uxtb	r1, r1
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <ssd1306_DrawPixel+0xbc>)
 8001f26:	54d1      	strb	r1, [r2, r3]
 8001f28:	e01d      	b.n	8001f66 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	79bb      	ldrb	r3, [r7, #6]
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	b2d8      	uxtb	r0, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	01db      	lsls	r3, r3, #7
 8001f36:	4413      	add	r3, r2
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <ssd1306_DrawPixel+0xbc>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	b259      	sxtb	r1, r3
 8001f54:	79fa      	ldrb	r2, [r7, #7]
 8001f56:	4603      	mov	r3, r0
 8001f58:	01db      	lsls	r3, r3, #7
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2c9      	uxtb	r1, r1
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <ssd1306_DrawPixel+0xbc>)
 8001f60:	54d1      	strb	r1, [r2, r3]
 8001f62:	e000      	b.n	8001f66 <ssd1306_DrawPixel+0xae>
        return;
 8001f64:	bf00      	nop
    }
}
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	20000700 	.word	0x20000700
 8001f74:	20000300 	.word	0x20000300

08001f78 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4604      	mov	r4, r0
 8001f80:	1d38      	adds	r0, r7, #4
 8001f82:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f86:	461a      	mov	r2, r3
 8001f88:	4623      	mov	r3, r4
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001f90:	4b38      	ldr	r3, [pc, #224]	; (8002074 <ssd1306_WriteChar+0xfc>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	793b      	ldrb	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f9c:	dc06      	bgt.n	8001fac <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001f9e:	4b35      	ldr	r3, [pc, #212]	; (8002074 <ssd1306_WriteChar+0xfc>)
 8001fa0:	885b      	ldrh	r3, [r3, #2]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	797b      	ldrb	r3, [r7, #5]
 8001fa6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001fa8:	2b3f      	cmp	r3, #63	; 0x3f
 8001faa:	dd01      	ble.n	8001fb0 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e05d      	b.n	800206c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e04c      	b.n	8002050 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	3b20      	subs	r3, #32
 8001fbc:	7979      	ldrb	r1, [r7, #5]
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	440b      	add	r3, r1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e034      	b.n	8002040 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d012      	beq.n	800200c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <ssd1306_WriteChar+0xfc>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b2d8      	uxtb	r0, r3
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <ssd1306_WriteChar+0xfc>)
 8001ff6:	885b      	ldrh	r3, [r3, #2]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	7bba      	ldrb	r2, [r7, #14]
 8002004:	4619      	mov	r1, r3
 8002006:	f7ff ff57 	bl	8001eb8 <ssd1306_DrawPixel>
 800200a:	e016      	b.n	800203a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <ssd1306_WriteChar+0xfc>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4413      	add	r3, r2
 8002018:	b2d8      	uxtb	r0, r3
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <ssd1306_WriteChar+0xfc>)
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4413      	add	r3, r2
 8002026:	b2d9      	uxtb	r1, r3
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	2b00      	cmp	r3, #0
 800202c:	bf0c      	ite	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	2300      	movne	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	f7ff ff3f 	bl	8001eb8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3301      	adds	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	793b      	ldrb	r3, [r7, #4]
 8002042:	461a      	mov	r2, r3
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4293      	cmp	r3, r2
 8002048:	d3c5      	bcc.n	8001fd6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	797b      	ldrb	r3, [r7, #5]
 8002052:	461a      	mov	r2, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4293      	cmp	r3, r2
 8002058:	d3ad      	bcc.n	8001fb6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <ssd1306_WriteChar+0xfc>)
 800205c:	881a      	ldrh	r2, [r3, #0]
 800205e:	793b      	ldrb	r3, [r7, #4]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4413      	add	r3, r2
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b03      	ldr	r3, [pc, #12]	; (8002074 <ssd1306_WriteChar+0xfc>)
 8002068:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3724      	adds	r7, #36	; 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	20000700 	.word	0x20000700

08002078 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	1d38      	adds	r0, r7, #4
 8002082:	e880 0006 	stmia.w	r0, {r1, r2}
 8002086:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002088:	e012      	b.n	80020b0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	7818      	ldrb	r0, [r3, #0]
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	1d3a      	adds	r2, r7, #4
 8002092:	ca06      	ldmia	r2, {r1, r2}
 8002094:	f7ff ff70 	bl	8001f78 <ssd1306_WriteChar>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d002      	beq.n	80020aa <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	e008      	b.n	80020bc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3301      	adds	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
    while (*str)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e8      	bne.n	800208a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	781b      	ldrb	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	460a      	mov	r2, r1
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <ssd1306_SetCursor+0x2c>)
 80020da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <ssd1306_SetCursor+0x2c>)
 80020e2:	805a      	strh	r2, [r3, #2]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20000700 	.word	0x20000700

080020f4 <menu_show>:

void menu_show(char *word, I2C_HandleTypeDef hi2c)
{
 80020f4:	b084      	sub	sp, #16
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	f107 0014 	add.w	r0, r7, #20
 8002102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ssd1306_Fill(Black);
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff fe82 	bl	8001e10 <ssd1306_Fill>
	ssd1306_SetCursor(0, 30);
 800210c:	211e      	movs	r1, #30
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff ffd8 	bl	80020c4 <ssd1306_SetCursor>
	ssd1306_WriteString(word, Font_11x18, White);
 8002114:	4a08      	ldr	r2, [pc, #32]	; (8002138 <menu_show+0x44>)
 8002116:	2301      	movs	r3, #1
 8002118:	ca06      	ldmia	r2, {r1, r2}
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffac 	bl	8002078 <ssd1306_WriteString>
	ssd1306_UpdateScreen(&hi2c);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe95 	bl	8001e54 <ssd1306_UpdateScreen>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002134:	b004      	add	sp, #16
 8002136:	4770      	bx	lr
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_MspInit+0x44>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_MspInit+0x44>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6613      	str	r3, [r2, #96]	; 0x60
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_MspInit+0x44>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_MspInit+0x44>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_MspInit+0x44>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_MspInit+0x44>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <MemManage_Handler+0x4>

0800219e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <UsageFault_Handler+0x4>

080021aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f000 f9f4 	bl	80025c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <USART2_IRQHandler+0x10>)
 80021e6:	f002 fd6b 	bl	8004cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000a48 	.word	0x20000a48

080021f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <USART3_IRQHandler+0x10>)
 80021fa:	f002 fd61 	bl	8004cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200009c8 	.word	0x200009c8

08002208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800220c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002210:	f000 fd42 	bl	8002c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f003 fc72 	bl	8005b30 <__errno>
 800224c:	4602      	mov	r2, r0
 800224e:	230c      	movs	r3, #12
 8002250:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20018000 	.word	0x20018000
 8002278:	00000400 	.word	0x00000400
 800227c:	20000708 	.word	0x20000708
 8002280:	20000ad0 	.word	0x20000ad0

08002284 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <SystemInit+0x64>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <SystemInit+0x64>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <SystemInit+0x68>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <SystemInit+0x68>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <SystemInit+0x68>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <SystemInit+0x68>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <SystemInit+0x68>)
 80022b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <SystemInit+0x68>)
 80022bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <SystemInit+0x68>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <SystemInit+0x68>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <SystemInit+0x68>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SystemInit+0x64>)
 80022d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022da:	609a      	str	r2, [r3, #8]
#endif
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	40021000 	.word	0x40021000

080022f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <MX_USART2_UART_Init+0x5c>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002334:	f002 fbd4 	bl	8004ae0 <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800233e:	f7ff fb4f 	bl	80019e0 <Error_Handler>
  }

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000a48 	.word	0x20000a48
 800234c:	40004400 	.word	0x40004400

08002350 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <MX_USART3_UART_Init+0x5c>)
 8002358:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800235c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002360:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002394:	f002 fba4 	bl	8004ae0 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800239e:	f7ff fb1f 	bl	80019e0 <Error_Handler>
  }

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200009c8 	.word	0x200009c8
 80023ac:	40004800 	.word	0x40004800

080023b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a37      	ldr	r2, [pc, #220]	; (80024ac <HAL_UART_MspInit+0xfc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d131      	bne.n	8002436 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_UART_MspInit+0x100>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	4a36      	ldr	r2, [pc, #216]	; (80024b0 <HAL_UART_MspInit+0x100>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
 80023de:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_UART_MspInit+0x100>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_UART_MspInit+0x100>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a30      	ldr	r2, [pc, #192]	; (80024b0 <HAL_UART_MspInit+0x100>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_UART_MspInit+0x100>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002402:	230c      	movs	r3, #12
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002412:	2307      	movs	r3, #7
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4619      	mov	r1, r3
 800241c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002420:	f000 fa62 	bl	80028e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2026      	movs	r0, #38	; 0x26
 800242a:	f000 f9e6 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800242e:	2026      	movs	r0, #38	; 0x26
 8002430:	f000 f9ff 	bl	8002832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002434:	e035      	b.n	80024a2 <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_UART_MspInit+0x104>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d130      	bne.n	80024a2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_UART_MspInit+0x100>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_UART_MspInit+0x100>)
 8002446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244a:	6593      	str	r3, [r2, #88]	; 0x58
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_UART_MspInit+0x100>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_UART_MspInit+0x100>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_UART_MspInit+0x100>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_UART_MspInit+0x100>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8002470:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002482:	2307      	movs	r3, #7
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	480a      	ldr	r0, [pc, #40]	; (80024b8 <HAL_UART_MspInit+0x108>)
 800248e:	f000 fa2b 	bl	80028e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2027      	movs	r0, #39	; 0x27
 8002498:	f000 f9af 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800249c:	2027      	movs	r0, #39	; 0x27
 800249e:	f000 f9c8 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40004400 	.word	0x40004400
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40004800 	.word	0x40004800
 80024b8:	48000800 	.word	0x48000800

080024bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024c2:	e003      	b.n	80024cc <LoopCopyDataInit>

080024c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024ca:	3104      	adds	r1, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024cc:	480b      	ldr	r0, [pc, #44]	; (80024fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024d4:	d3f6      	bcc.n	80024c4 <CopyDataInit>
	ldr	r2, =_sbss
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024d8:	e002      	b.n	80024e0 <LoopFillZerobss>

080024da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024dc:	f842 3b04 	str.w	r3, [r2], #4

080024e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <LoopForever+0x16>)
	cmp	r2, r3
 80024e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024e4:	d3f9      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e6:	f7ff fecd 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ea:	f003 fb27 	bl	8005b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ee:	f7ff f819 	bl	8001524 <main>

080024f2 <LoopForever>:

LoopForever:
    b LoopForever
 80024f2:	e7fe      	b.n	80024f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024f8:	0800a778 	.word	0x0800a778
	ldr	r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002500:	20000294 	.word	0x20000294
	ldr	r2, =_sbss
 8002504:	20000294 	.word	0x20000294
	ldr	r3, = _ebss
 8002508:	20000ad0 	.word	0x20000ad0

0800250c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC1_2_IRQHandler>
	...

08002510 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_Init+0x3c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a0b      	ldr	r2, [pc, #44]	; (800254c <HAL_Init+0x3c>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002526:	2003      	movs	r0, #3
 8002528:	f000 f95c 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252c:	2000      	movs	r0, #0
 800252e:	f000 f80f 	bl	8002550 <HAL_InitTick>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	71fb      	strb	r3, [r7, #7]
 800253c:	e001      	b.n	8002542 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800253e:	f7ff fdfd 	bl	800213c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002542:	79fb      	ldrb	r3, [r7, #7]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40022000 	.word	0x40022000

08002550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_InitTick+0x68>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_InitTick+0x6c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_InitTick+0x68>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002570:	fbb1 f3f3 	udiv	r3, r1, r3
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f968 	bl	800284e <HAL_SYSTICK_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10f      	bne.n	80025a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	d809      	bhi.n	800259e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258a:	2200      	movs	r2, #0
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	f04f 30ff 	mov.w	r0, #4294967295
 8002592:	f000 f932 	bl	80027fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_InitTick+0x70>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	e007      	b.n	80025ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e004      	b.n	80025ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e001      	b.n	80025ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200000c0 	.word	0x200000c0
 80025bc:	200000b8 	.word	0x200000b8
 80025c0:	200000bc 	.word	0x200000bc

080025c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_IncTick+0x1c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_IncTick+0x20>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <HAL_IncTick+0x1c>)
 80025d4:	6013      	str	r3, [r2, #0]
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20000ac8 	.word	0x20000ac8
 80025e4:	200000c0 	.word	0x200000c0

080025e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_GetTick+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000ac8 	.word	0x20000ac8

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff ffee 	bl	80025e8 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d004      	beq.n	8002624 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_Delay+0x40>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002624:	bf00      	nop
 8002626:	f7ff ffdf 	bl	80025e8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d8f7      	bhi.n	8002626 <HAL_Delay+0x26>
  {
  }
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200000c0 	.word	0x200000c0

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff29 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff3e 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff31 	bl	80026a8 <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffa2 	bl	80027a0 <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d005      	beq.n	800288a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2204      	movs	r2, #4
 8002882:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e029      	b.n	80028de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 020e 	bic.w	r2, r2, #14
 8002898:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f003 021c 	and.w	r2, r3, #28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
    }
  }
  return status;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f6:	e17f      	b.n	8002bf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8171 	beq.w	8002bf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d00b      	beq.n	8002930 <HAL_GPIO_Init+0x48>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002924:	2b11      	cmp	r3, #17
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b12      	cmp	r3, #18
 800292e:	d130      	bne.n	8002992 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002966:	2201      	movs	r2, #1
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0201 	and.w	r2, r3, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b03      	cmp	r3, #3
 800299c:	d118      	bne.n	80029d0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029a4:	2201      	movs	r2, #1
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	f003 0201 	and.w	r2, r3, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x128>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d123      	bne.n	8002a58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	08da      	lsrs	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3208      	adds	r2, #8
 8002a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	220f      	movs	r2, #15
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	08da      	lsrs	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3208      	adds	r2, #8
 8002a52:	6939      	ldr	r1, [r7, #16]
 8002a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0203 	and.w	r2, r3, #3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80ac 	beq.w	8002bf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_GPIO_Init+0x32c>)
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	4a5d      	ldr	r2, [pc, #372]	; (8002c14 <HAL_GPIO_Init+0x32c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_GPIO_Init+0x32c>)
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab2:	4a59      	ldr	r2, [pc, #356]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x242>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	; (8002c1c <HAL_GPIO_Init+0x334>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x23e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4d      	ldr	r2, [pc, #308]	; (8002c20 <HAL_GPIO_Init+0x338>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x23a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_GPIO_Init+0x33c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x236>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	; (8002c28 <HAL_GPIO_Init+0x340>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x232>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <HAL_GPIO_Init+0x344>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x22e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <HAL_GPIO_Init+0x348>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x22a>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00c      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00a      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b16:	2305      	movs	r3, #5
 8002b18:	e008      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e004      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	f002 0203 	and.w	r2, r2, #3
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	4093      	lsls	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b3c:	4936      	ldr	r1, [pc, #216]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	3302      	adds	r3, #2
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b6e:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b98:	4a26      	ldr	r2, [pc, #152]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f47f ae78 	bne.w	80028f8 <HAL_GPIO_Init+0x10>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	48000800 	.word	0x48000800
 8002c24:	48000c00 	.word	0x48000c00
 8002c28:	48001000 	.word	0x48001000
 8002c2c:	48001400 	.word	0x48001400
 8002c30:	48001800 	.word	0x48001800
 8002c34:	40010400 	.word	0x40010400

08002c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f806 	bl	8002cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e081      	b.n	8002df4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fe fbc9 	bl	800149c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2224      	movs	r2, #36	; 0x24
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	e006      	b.n	8002d66 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d104      	bne.n	8002d78 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	ea42 0103 	orr.w	r1, r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	021a      	lsls	r2, r3, #8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69d9      	ldr	r1, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	f040 80f9 	bne.w	8003016 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_I2C_Mem_Write+0x34>
 8002e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0ed      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Mem_Write+0x4e>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0e6      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e52:	f7ff fbc9 	bl	80025e8 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f955 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d1      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2221      	movs	r2, #33	; 0x21
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e9c:	88f8      	ldrh	r0, [r7, #6]
 8002e9e:	893a      	ldrh	r2, [r7, #8]
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	4603      	mov	r3, r0
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f8b9 	bl	8003024 <I2C_RequestMemoryWrite>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0a9      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2bff      	cmp	r3, #255	; 0xff
 8002ecc:	d90e      	bls.n	8002eec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	22ff      	movs	r2, #255	; 0xff
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	2300      	movs	r3, #0
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fa37 	bl	8003358 <I2C_TransferConfig>
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	8979      	ldrh	r1, [r7, #10]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa26 	bl	8003358 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f93f 	bl	8003194 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e07b      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d034      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d130      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f8d1 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e04d      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2bff      	cmp	r3, #255	; 0xff
 8002f84:	d90e      	bls.n	8002fa4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f9db 	bl	8003358 <I2C_TransferConfig>
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f9ca 	bl	8003358 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d19e      	bne.n	8002f0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f91e 	bl	8003214 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e01a      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_I2C_Mem_Write+0x224>)
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	fe00e800 	.word	0xfe00e800

08003024 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <I2C_RequestMemoryWrite+0xa4>)
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f983 	bl	8003358 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	69b9      	ldr	r1, [r7, #24]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f89c 	bl	8003194 <I2C_WaitOnTXISFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e02c      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
 8003076:	e015      	b.n	80030a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f882 	bl	8003194 <I2C_WaitOnTXISFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e012      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f830 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	80002000 	.word	0x80002000

080030cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d103      	bne.n	80030ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d007      	beq.n	8003108 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	619a      	str	r2, [r3, #24]
  }
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003124:	e022      	b.n	800316c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d01e      	beq.n	800316c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7ff fa5b 	bl	80025e8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d113      	bne.n	800316c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e00f      	b.n	800318c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	429a      	cmp	r2, r3
 8003188:	d0cd      	beq.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031a0:	e02c      	b.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f870 	bl	800328c <I2C_IsAcknowledgeFailed>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e02a      	b.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d01e      	beq.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7ff fa13 	bl	80025e8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d113      	bne.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e007      	b.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d1cb      	bne.n	80031a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003220:	e028      	b.n	8003274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f830 	bl	800328c <I2C_IsAcknowledgeFailed>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e026      	b.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7ff f9d7 	bl	80025e8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d113      	bne.n	8003274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e007      	b.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b20      	cmp	r3, #32
 8003280:	d1cf      	bne.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d151      	bne.n	800334a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a6:	e022      	b.n	80032ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d01e      	beq.n	80032ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7ff f99a 	bl	80025e8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <I2C_IsAcknowledgeFailed+0x3a>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d113      	bne.n	80032ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f043 0220 	orr.w	r2, r3, #32
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e02e      	b.n	800334c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d1d5      	bne.n	80032a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2210      	movs	r2, #16
 8003302:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2220      	movs	r2, #32
 800330a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fedd 	bl	80030cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <I2C_IsAcknowledgeFailed+0xc8>)
 800331e:	400b      	ands	r3, r1
 8003320:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	fe00e800 	.word	0xfe00e800

08003358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	4613      	mov	r3, r2
 8003368:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	0d5b      	lsrs	r3, r3, #21
 8003374:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <I2C_TransferConfig+0x58>)
 800337a:	430b      	orrs	r3, r1
 800337c:	43db      	mvns	r3, r3
 800337e:	ea02 0103 	and.w	r1, r2, r3
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003388:	7a7b      	ldrb	r3, [r7, #9]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	431a      	orrs	r2, r3
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	03ff63ff 	.word	0x03ff63ff

080033b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d138      	bne.n	800343c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e032      	b.n	800343e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003406:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b20      	cmp	r3, #32
 800345e:	d139      	bne.n	80034d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800346a:	2302      	movs	r3, #2
 800346c:	e033      	b.n	80034d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2224      	movs	r2, #36	; 0x24
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800349c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e000      	b.n	80034d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034d4:	2302      	movs	r3, #2
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_PWREx_GetVoltageRange+0x18>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000

08003500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350e:	d130      	bne.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351c:	d038      	beq.n	8003590 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003526:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800352c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2232      	movs	r2, #50	; 0x32
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0c9b      	lsrs	r3, r3, #18
 8003540:	3301      	adds	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003544:	e002      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b01      	subs	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003558:	d102      	bne.n	8003560 <HAL_PWREx_ControlVoltageScaling+0x60>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f2      	bne.n	8003546 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356c:	d110      	bne.n	8003590 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d007      	beq.n	8003590 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003588:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40007000 	.word	0x40007000
 80035a4:	200000b8 	.word	0x200000b8
 80035a8:	431bde83 	.word	0x431bde83

080035ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e3d4      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035be:	4ba1      	ldr	r3, [pc, #644]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80e4 	beq.w	80037a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4a>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	f040 808b 	bne.w	8003704 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f040 8087 	bne.w	8003704 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035f6:	4b93      	ldr	r3, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e3ac      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_RCC_OscConfig+0x7c>
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003626:	e005      	b.n	8003634 <HAL_RCC_OscConfig+0x88>
 8003628:	4b86      	ldr	r3, [pc, #536]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800362a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003634:	4293      	cmp	r3, r2
 8003636:	d223      	bcs.n	8003680 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fd3f 	bl	80040c0 <RCC_SetFlashLatencyFromMSIRange>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e38d      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800364c:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a7c      	ldr	r2, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4977      	ldr	r1, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	4972      	ldr	r1, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
 800367e:	e025      	b.n	80036cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003680:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6f      	ldr	r2, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003686:	f043 0308 	orr.w	r3, r3, #8
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	496a      	ldr	r1, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800369e:	4b69      	ldr	r3, [pc, #420]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	4965      	ldr	r1, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fcff 	bl	80040c0 <RCC_SetFlashLatencyFromMSIRange>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e34d      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036cc:	f000 fc36 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80036d0:	4601      	mov	r1, r0
 80036d2:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	4a5a      	ldr	r2, [pc, #360]	; (8003848 <HAL_RCC_OscConfig+0x29c>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa21 f303 	lsr.w	r3, r1, r3
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x2a0>)
 80036ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036ec:	4b58      	ldr	r3, [pc, #352]	; (8003850 <HAL_RCC_OscConfig+0x2a4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe ff2d 	bl	8002550 <HAL_InitTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d052      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	e331      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d032      	beq.n	8003772 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800370c:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003718:	f7fe ff66 	bl	80025e8 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003720:	f7fe ff62 	bl	80025e8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e31a      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a40      	ldr	r2, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	493b      	ldr	r1, [pc, #236]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	4936      	ldr	r1, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
 8003770:	e01a      	b.n	80037a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a33      	ldr	r2, [pc, #204]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800377e:	f7fe ff33 	bl	80025e8 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003786:	f7fe ff2f 	bl	80025e8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e2e7      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCC_OscConfig+0x1da>
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d074      	beq.n	800389e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x21a>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	d10e      	bne.n	80037de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d10b      	bne.n	80037de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d064      	beq.n	800389c <HAL_RCC_OscConfig+0x2f0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d160      	bne.n	800389c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e2c4      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x24a>
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e01d      	b.n	8003832 <HAL_RCC_OscConfig+0x286>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x26e>
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x286>
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800382c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01c      	beq.n	8003874 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe fed5 	bl	80025e8 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003840:	e011      	b.n	8003866 <HAL_RCC_OscConfig+0x2ba>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	0800a468 	.word	0x0800a468
 800384c:	200000b8 	.word	0x200000b8
 8003850:	200000bc 	.word	0x200000bc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fec8 	bl	80025e8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e280      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003866:	4baf      	ldr	r3, [pc, #700]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x2a8>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe feb8 	bl	80025e8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe feb4 	bl	80025e8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e26c      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	4ba5      	ldr	r3, [pc, #660]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x2d0>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d060      	beq.n	800396c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x310>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d119      	bne.n	80038ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d116      	bne.n	80038ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	4b99      	ldr	r3, [pc, #612]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x328>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e249      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b93      	ldr	r3, [pc, #588]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4990      	ldr	r1, [pc, #576]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e8:	e040      	b.n	800396c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d023      	beq.n	800393a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f2:	4b8c      	ldr	r3, [pc, #560]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a8b      	ldr	r2, [pc, #556]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fe73 	bl	80025e8 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe fe6f 	bl	80025e8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e227      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003918:	4b82      	ldr	r3, [pc, #520]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b7f      	ldr	r3, [pc, #508]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	497c      	ldr	r1, [pc, #496]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	e018      	b.n	800396c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b7a      	ldr	r3, [pc, #488]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a79      	ldr	r2, [pc, #484]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe fe4f 	bl	80025e8 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394e:	f7fe fe4b 	bl	80025e8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e203      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003960:	4b70      	ldr	r3, [pc, #448]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d03c      	beq.n	80039f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01c      	beq.n	80039ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003986:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fe fe2a 	bl	80025e8 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003998:	f7fe fe26 	bl	80025e8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1de      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039aa:	4b5e      	ldr	r3, [pc, #376]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ef      	beq.n	8003998 <HAL_RCC_OscConfig+0x3ec>
 80039b8:	e01b      	b.n	80039f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b5a      	ldr	r3, [pc, #360]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fe fe0d 	bl	80025e8 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d2:	f7fe fe09 	bl	80025e8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e1c1      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1ef      	bne.n	80039d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a6 	beq.w	8003b4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a04:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1c:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2c:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d118      	bne.n	8003a6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a44:	f7fe fdd0 	bl	80025e8 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4c:	f7fe fdcc 	bl	80025e8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e184      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5e:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d108      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4d8>
 8003a72:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a82:	e024      	b.n	8003ace <HAL_RCC_OscConfig+0x522>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d110      	bne.n	8003aae <HAL_RCC_OscConfig+0x502>
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aac:	e00f      	b.n	8003ace <HAL_RCC_OscConfig+0x522>
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fd87 	bl	80025e8 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fe fd83 	bl	80025e8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e139      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ed      	beq.n	8003ade <HAL_RCC_OscConfig+0x532>
 8003b02:	e01a      	b.n	8003b3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe fd70 	bl	80025e8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b0a:	e00f      	b.n	8003b2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fd6c 	bl	80025e8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d906      	bls.n	8003b2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e122      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b2c:	4b90      	ldr	r3, [pc, #576]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e8      	bne.n	8003b0c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3a:	7ffb      	ldrb	r3, [r7, #31]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b8b      	ldr	r3, [pc, #556]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	4a8a      	ldr	r2, [pc, #552]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8108 	beq.w	8003d66 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	f040 80d0 	bne.w	8003d00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b60:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0203 	and.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d130      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d127      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11f      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba0:	2a07      	cmp	r2, #7
 8003ba2:	bf14      	ite	ne
 8003ba4:	2201      	movne	r2, #1
 8003ba6:	2200      	moveq	r2, #0
 8003ba8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d113      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d06e      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d069      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bdc:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b7      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5c      	ldr	r2, [pc, #368]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c04:	f7fe fcf0 	bl	80025e8 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe fcec 	bl	80025e8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0a4      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1e:	4b54      	ldr	r3, [pc, #336]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2a:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <HAL_RCC_OscConfig+0x7c8>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c44:	0212      	lsls	r2, r2, #8
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c4c:	0852      	lsrs	r2, r2, #1
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0552      	lsls	r2, r2, #21
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c58:	0852      	lsrs	r2, r2, #1
 8003c5a:	3a01      	subs	r2, #1
 8003c5c:	0652      	lsls	r2, r2, #25
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c64:	0912      	lsrs	r2, r2, #4
 8003c66:	0452      	lsls	r2, r2, #17
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	4941      	ldr	r1, [pc, #260]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c70:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3e      	ldr	r2, [pc, #248]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c7c:	4b3c      	ldr	r3, [pc, #240]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a3b      	ldr	r2, [pc, #236]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c88:	f7fe fcae 	bl	80025e8 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fe fcaa 	bl	80025e8 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e062      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b33      	ldr	r3, [pc, #204]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cae:	e05a      	b.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e059      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d152      	bne.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cc0:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd8:	f7fe fc86 	bl	80025e8 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fe fc82 	bl	80025e8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e03a      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x734>
 8003cfe:	e032      	b.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d02d      	beq.n	8003d62 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d10:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d12:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d24:	f023 0303 	bic.w	r3, r3, #3
 8003d28:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fc55 	bl	80025e8 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fe fc51 	bl	80025e8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e009      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x796>
 8003d60:	e001      	b.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	f99d808c 	.word	0xf99d808c

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0c8      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4961      	ldr	r1, [pc, #388]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b5f      	ldr	r3, [pc, #380]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b0      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d04c      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d121      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e09e      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d115      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e092      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e00:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e086      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e10:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e07e      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 0203 	bic.w	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	493f      	ldr	r1, [pc, #252]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e32:	f7fe fbd9 	bl	80025e8 <HAL_GetTick>
 8003e36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3a:	f7fe fbd5 	bl	80025e8 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e066      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e50:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 020c 	and.w	r2, r3, #12
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d1eb      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	492c      	ldr	r1, [pc, #176]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e80:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d210      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 0207 	bic.w	r2, r3, #7
 8003e96:	4924      	ldr	r1, [pc, #144]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e036      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4918      	ldr	r1, [pc, #96]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4910      	ldr	r1, [pc, #64]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eee:	f000 f825 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8003ef2:	4601      	mov	r1, r0
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	fa21 f303 	lsr.w	r3, r1, r3
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fb1c 	bl	8002550 <HAL_InitTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	0800a468 	.word	0x0800a468
 8003f34:	200000b8 	.word	0x200000b8
 8003f38:	200000bc 	.word	0x200000bc

08003f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f54:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x34>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d121      	bne.n	8003fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d11e      	bne.n	8003fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f70:	4b33      	ldr	r3, [pc, #204]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f7c:	4b30      	ldr	r3, [pc, #192]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	e005      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d102      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d133      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa4>
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0xaa>
 8003fde:	e005      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fe2:	617b      	str	r3, [r7, #20]
      break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fe8:	617b      	str	r3, [r7, #20]
      break;
 8003fea:	e002      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	617b      	str	r3, [r7, #20]
      break;
 8003ff0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	fb02 f203 	mul.w	r2, r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0e5b      	lsrs	r3, r3, #25
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004032:	69bb      	ldr	r3, [r7, #24]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3724      	adds	r7, #36	; 0x24
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40021000 	.word	0x40021000
 8004044:	0800a480 	.word	0x0800a480
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200000b8 	.word	0x200000b8

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4601      	mov	r1, r0
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	0800a478 	.word	0x0800a478

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004098:	f7ff ffda 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800409c:	4601      	mov	r1, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0adb      	lsrs	r3, r3, #11
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	0800a478 	.word	0x0800a478

080040c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040d8:	f7ff fa04 	bl	80034e4 <HAL_PWREx_GetVoltageRange>
 80040dc:	6178      	str	r0, [r7, #20]
 80040de:	e014      	b.n	800410a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	4a24      	ldr	r2, [pc, #144]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	; 0x58
 80040ec:	4b22      	ldr	r3, [pc, #136]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040f8:	f7ff f9f4 	bl	80034e4 <HAL_PWREx_GetVoltageRange>
 80040fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d10b      	bne.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d919      	bls.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2ba0      	cmp	r3, #160	; 0xa0
 800411c:	d902      	bls.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800411e:	2302      	movs	r3, #2
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	e013      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e010      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d902      	bls.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004130:	2303      	movs	r3, #3
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e00a      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d102      	bne.n	8004142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413c:	2302      	movs	r3, #2
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e004      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b70      	cmp	r3, #112	; 0x70
 8004146:	d101      	bne.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004148:	2301      	movs	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 0207 	bic.w	r2, r3, #7
 8004154:	4909      	ldr	r1, [pc, #36]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	40022000 	.word	0x40022000

08004180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004188:	2300      	movs	r3, #0
 800418a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800418c:	2300      	movs	r3, #0
 800418e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a4:	d01c      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041aa:	d802      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80041b0:	e01f      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80041b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80041b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041bc:	d01c      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80041be:	e018      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041c0:	4b85      	ldr	r3, [pc, #532]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a84      	ldr	r2, [pc, #528]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041cc:	e015      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fab9 	bl	800474c <RCCEx_PLLSAI1_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041de:	e00c      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3320      	adds	r3, #32
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fba0 	bl	800492c <RCCEx_PLLSAI2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	74fb      	strb	r3, [r7, #19]
      break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80041f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004200:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420e:	4972      	ldr	r1, [pc, #456]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004216:	e001      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d01c      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004236:	d802      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800423c:	e01f      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800423e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004242:	d003      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004244:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004248:	d01c      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800424a:	e018      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800424c:	4b62      	ldr	r3, [pc, #392]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a61      	ldr	r2, [pc, #388]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004256:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004258:	e015      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2100      	movs	r1, #0
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa73 	bl	800474c <RCCEx_PLLSAI1_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800426a:	e00c      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3320      	adds	r3, #32
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb5a 	bl	800492c <RCCEx_PLLSAI2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	74fb      	strb	r3, [r7, #19]
      break;
 8004282:	e000      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10b      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800428c:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800429a:	494f      	ldr	r1, [pc, #316]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042a2:	e001      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80a0 	beq.w	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00d      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d0:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6593      	str	r3, [r2, #88]	; 0x58
 80042dc:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e8:	2301      	movs	r3, #1
 80042ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ec:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3a      	ldr	r2, [pc, #232]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042f8:	f7fe f976 	bl	80025e8 <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042fe:	e009      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004300:	f7fe f972 	bl	80025e8 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d902      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	74fb      	strb	r3, [r7, #19]
        break;
 8004312:	e005      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ef      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d15c      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004330:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	d019      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fe f931 	bl	80025e8 <HAL_GetTick>
 8004386:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004388:	e00b      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fe f92d 	bl	80025e8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d902      	bls.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	74fb      	strb	r3, [r7, #19]
            break;
 80043a0:	e006      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ec      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c6:	4904      	ldr	r1, [pc, #16]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043ce:	e009      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
 80043d4:	e006      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e4:	7c7b      	ldrb	r3, [r7, #17]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4b9e      	ldr	r3, [pc, #632]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	4a9d      	ldr	r2, [pc, #628]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004402:	4b98      	ldr	r3, [pc, #608]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0203 	bic.w	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	4994      	ldr	r1, [pc, #592]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004424:	4b8f      	ldr	r3, [pc, #572]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 020c 	bic.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	498c      	ldr	r1, [pc, #560]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004446:	4b87      	ldr	r3, [pc, #540]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4983      	ldr	r1, [pc, #524]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004468:	4b7e      	ldr	r3, [pc, #504]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	497b      	ldr	r1, [pc, #492]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800448a:	4b76      	ldr	r3, [pc, #472]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004498:	4972      	ldr	r1, [pc, #456]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ac:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	496a      	ldr	r1, [pc, #424]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044dc:	4961      	ldr	r1, [pc, #388]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f0:	4b5c      	ldr	r3, [pc, #368]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	4959      	ldr	r1, [pc, #356]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	4950      	ldr	r1, [pc, #320]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004534:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	4948      	ldr	r1, [pc, #288]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004556:	4b43      	ldr	r3, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	493f      	ldr	r1, [pc, #252]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d028      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004578:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004586:	4937      	ldr	r1, [pc, #220]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004596:	d106      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004598:	4b32      	ldr	r3, [pc, #200]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a31      	ldr	r2, [pc, #196]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800459e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a2:	60d3      	str	r3, [r2, #12]
 80045a4:	e011      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ae:	d10c      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f8c8 	bl	800474c <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	491f      	ldr	r1, [pc, #124]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f4:	d106      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004600:	60d3      	str	r3, [r2, #12]
 8004602:	e011      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f899 	bl	800474c <RCCEx_PLLSAI1_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	4908      	ldr	r1, [pc, #32]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004652:	d109      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a02      	ldr	r2, [pc, #8]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
 8004660:	e014      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004670:	d10c      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f867 	bl	800474c <RCCEx_PLLSAI1_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d02f      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004698:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a6:	4928      	ldr	r1, [pc, #160]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f844 	bl	800474c <RCCEx_PLLSAI1_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	74bb      	strb	r3, [r7, #18]
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3320      	adds	r3, #32
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f921 	bl	800492c <RCCEx_PLLSAI2_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004712:	490d      	ldr	r1, [pc, #52]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004736:	4904      	ldr	r1, [pc, #16]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800473e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40021000 	.word	0x40021000

0800474c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800475a:	4b73      	ldr	r3, [pc, #460]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d018      	beq.n	8004798 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004766:	4b70      	ldr	r3, [pc, #448]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0203 	and.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d10d      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
       ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800477e:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
       ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d044      	beq.n	800481c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e041      	b.n	800481c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d00c      	beq.n	80047ba <RCCEx_PLLSAI1_Config+0x6e>
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d013      	beq.n	80047cc <RCCEx_PLLSAI1_Config+0x80>
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d120      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047a8:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11d      	bne.n	80047f0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b8:	e01a      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047ba:	4b5b      	ldr	r3, [pc, #364]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d116      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ca:	e013      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047cc:	4b56      	ldr	r3, [pc, #344]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047e8:	e006      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
      break;
 80047ee:	e004      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10d      	bne.n	800481c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004800:	4b49      	ldr	r3, [pc, #292]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	3b01      	subs	r3, #1
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	430b      	orrs	r3, r1
 8004816:	4944      	ldr	r1, [pc, #272]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004818:	4313      	orrs	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d17d      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a40      	ldr	r2, [pc, #256]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004828:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800482c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fd fedb 	bl	80025e8 <HAL_GetTick>
 8004832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004834:	e009      	b.n	800484a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004836:	f7fd fed7 	bl	80025e8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d902      	bls.n	800484a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	73fb      	strb	r3, [r7, #15]
        break;
 8004848:	e005      	b.n	8004856 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ef      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d160      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d111      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004862:	4b31      	ldr	r3, [pc, #196]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68d2      	ldr	r2, [r2, #12]
 8004878:	0912      	lsrs	r2, r2, #4
 800487a:	0452      	lsls	r2, r2, #17
 800487c:	430a      	orrs	r2, r1
 800487e:	492a      	ldr	r1, [pc, #168]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	610b      	str	r3, [r1, #16]
 8004884:	e027      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d112      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488c:	4b26      	ldr	r3, [pc, #152]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6892      	ldr	r2, [r2, #8]
 800489c:	0211      	lsls	r1, r2, #8
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6912      	ldr	r2, [r2, #16]
 80048a2:	0852      	lsrs	r2, r2, #1
 80048a4:	3a01      	subs	r2, #1
 80048a6:	0552      	lsls	r2, r2, #21
 80048a8:	430a      	orrs	r2, r1
 80048aa:	491f      	ldr	r1, [pc, #124]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	610b      	str	r3, [r1, #16]
 80048b0:	e011      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6892      	ldr	r2, [r2, #8]
 80048c2:	0211      	lsls	r1, r2, #8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6952      	ldr	r2, [r2, #20]
 80048c8:	0852      	lsrs	r2, r2, #1
 80048ca:	3a01      	subs	r2, #1
 80048cc:	0652      	lsls	r2, r2, #25
 80048ce:	430a      	orrs	r2, r1
 80048d0:	4915      	ldr	r1, [pc, #84]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd fe81 	bl	80025e8 <HAL_GetTick>
 80048e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e8:	e009      	b.n	80048fe <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ea:	f7fd fe7d 	bl	80025e8 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d902      	bls.n	80048fe <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	73fb      	strb	r3, [r7, #15]
          break;
 80048fc:	e005      	b.n	800490a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ef      	beq.n	80048ea <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	4903      	ldr	r1, [pc, #12]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000

0800492c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493a:	4b68      	ldr	r3, [pc, #416]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10d      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
       ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
       ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d044      	beq.n	80049fc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e041      	b.n	80049fc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d00c      	beq.n	800499a <RCCEx_PLLSAI2_Config+0x6e>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d013      	beq.n	80049ac <RCCEx_PLLSAI2_Config+0x80>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d120      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004988:	4b54      	ldr	r3, [pc, #336]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11d      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004998:	e01a      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800499a:	4b50      	ldr	r3, [pc, #320]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049aa:	e013      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ac:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049b8:	4b48      	ldr	r3, [pc, #288]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049c8:	e006      	b.n	80049d8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
      break;
 80049ce:	e004      	b.n	80049da <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e0:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	430b      	orrs	r3, r1
 80049f6:	4939      	ldr	r1, [pc, #228]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d167      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a02:	4b36      	ldr	r3, [pc, #216]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a35      	ldr	r2, [pc, #212]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0e:	f7fd fdeb 	bl	80025e8 <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a14:	e009      	b.n	8004a2a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a16:	f7fd fde7 	bl	80025e8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d902      	bls.n	8004a2a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	73fb      	strb	r3, [r7, #15]
        break;
 8004a28:	e005      	b.n	8004a36 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ef      	bne.n	8004a16 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14a      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68d2      	ldr	r2, [r2, #12]
 8004a58:	0912      	lsrs	r2, r2, #4
 8004a5a:	0452      	lsls	r2, r2, #17
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	491f      	ldr	r1, [pc, #124]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	614b      	str	r3, [r1, #20]
 8004a64:	e011      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	0211      	lsls	r1, r2, #8
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6912      	ldr	r2, [r2, #16]
 8004a7c:	0852      	lsrs	r2, r2, #1
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	0652      	lsls	r2, r2, #25
 8004a82:	430a      	orrs	r2, r1
 8004a84:	4915      	ldr	r1, [pc, #84]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fd fda7 	bl	80025e8 <HAL_GetTick>
 8004a9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a9c:	e009      	b.n	8004ab2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a9e:	f7fd fda3 	bl	80025e8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d902      	bls.n	8004ab2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab0:	e005      	b.n	8004abe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000

08004ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e040      	b.n	8004b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fd fc54 	bl	80023b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2224      	movs	r2, #36	; 0x24
 8004b0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa28 	bl	8004f74 <UART_SetConfig>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e022      	b.n	8004b74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fd8e 	bl	8005658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fe15 	bl	800579c <UART_CheckIdleState>
 8004b72:	4603      	mov	r3, r0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	f040 808a 	bne.w	8004ca8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_UART_Receive_IT+0x24>
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e082      	b.n	8004caa <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Receive_IT+0x36>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e07b      	b.n	8004caa <HAL_UART_Receive_IT+0x12e>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bde:	d10e      	bne.n	8004bfe <HAL_UART_Receive_IT+0x82>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_UART_Receive_IT+0x78>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bf2:	e02d      	b.n	8004c50 <HAL_UART_Receive_IT+0xd4>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	22ff      	movs	r2, #255	; 0xff
 8004bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bfc:	e028      	b.n	8004c50 <HAL_UART_Receive_IT+0xd4>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <HAL_UART_Receive_IT+0xa6>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Receive_IT+0x9c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c16:	e01b      	b.n	8004c50 <HAL_UART_Receive_IT+0xd4>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	227f      	movs	r2, #127	; 0x7f
 8004c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c20:	e016      	b.n	8004c50 <HAL_UART_Receive_IT+0xd4>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2a:	d10d      	bne.n	8004c48 <HAL_UART_Receive_IT+0xcc>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_UART_Receive_IT+0xc2>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	227f      	movs	r2, #127	; 0x7f
 8004c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3c:	e008      	b.n	8004c50 <HAL_UART_Receive_IT+0xd4>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	223f      	movs	r2, #63	; 0x3f
 8004c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c46:	e003      	b.n	8004c50 <HAL_UART_Receive_IT+0xd4>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2222      	movs	r2, #34	; 0x22
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d107      	bne.n	8004c86 <HAL_UART_Receive_IT+0x10a>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <HAL_UART_Receive_IT+0x13c>)
 8004c82:	661a      	str	r2, [r3, #96]	; 0x60
 8004c84:	e002      	b.n	8004c8c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <HAL_UART_Receive_IT+0x140>)
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004ca2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	08005a65 	.word	0x08005a65
 8004cbc:	080059bb 	.word	0x080059bb

08004cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d113      	bne.n	8004d18 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00e      	beq.n	8004d18 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8114 	beq.w	8004f36 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
      }
      return;
 8004d16:	e10e      	b.n	8004f36 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80d6 	beq.w	8004ecc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80cb 	beq.w	8004ecc <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <HAL_UART_IRQHandler+0x9e>
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00e      	beq.n	8004d86 <HAL_UART_IRQHandler+0xc6>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2202      	movs	r2, #2
 8004d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7e:	f043 0204 	orr.w	r2, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <HAL_UART_IRQHandler+0xee>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da6:	f043 0202 	orr.w	r2, r3, #2
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d013      	beq.n	8004de0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd8:	f043 0208 	orr.w	r2, r3, #8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00f      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14a>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8093 	beq.w	8004f3a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d004      	beq.n	8004e56 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d031      	beq.n	8004eba <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fd60 	bl	800591c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d123      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e78:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d013      	beq.n	8004eaa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e86:	4a30      	ldr	r2, [pc, #192]	; (8004f48 <HAL_UART_IRQHandler+0x288>)
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fd fce9 	bl	8002866 <HAL_DMA_Abort_IT>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e00e      	b.n	8004ec8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f858 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e00a      	b.n	8004ec8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f854 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	e006      	b.n	8004ec8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f850 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004ec6:	e038      	b.n	8004f3a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	bf00      	nop
    return;
 8004eca:	e036      	b.n	8004f3a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00d      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x232>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fe0f 	bl	8005b0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ef0:	e026      	b.n	8004f40 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d017      	beq.n	8004f3e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	4798      	blx	r3
    }
    return;
 8004f16:	e012      	b.n	8004f3e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00e      	beq.n	8004f40 <HAL_UART_IRQHandler+0x280>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fd2b 	bl	8005988 <UART_EndTransmit_IT>
    return;
 8004f32:	bf00      	nop
 8004f34:	e004      	b.n	8004f40 <HAL_UART_IRQHandler+0x280>
      return;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <HAL_UART_IRQHandler+0x280>
    return;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HAL_UART_IRQHandler+0x280>
    return;
 8004f3e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	0800595d 	.word	0x0800595d

08004f4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f78:	b08a      	sub	sp, #40	; 0x28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4bb8      	ldr	r3, [pc, #736]	; (800528c <UART_SetConfig+0x318>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4aae      	ldr	r2, [pc, #696]	; (8005290 <UART_SetConfig+0x31c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4aa5      	ldr	r2, [pc, #660]	; (8005294 <UART_SetConfig+0x320>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d126      	bne.n	8005052 <UART_SetConfig+0xde>
 8005004:	4ba4      	ldr	r3, [pc, #656]	; (8005298 <UART_SetConfig+0x324>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d81a      	bhi.n	8005048 <UART_SetConfig+0xd4>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0xa4>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	08005029 	.word	0x08005029
 800501c:	08005039 	.word	0x08005039
 8005020:	08005031 	.word	0x08005031
 8005024:	08005041 	.word	0x08005041
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502e:	e105      	b.n	800523c <UART_SetConfig+0x2c8>
 8005030:	2302      	movs	r3, #2
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e101      	b.n	800523c <UART_SetConfig+0x2c8>
 8005038:	2304      	movs	r3, #4
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e0fd      	b.n	800523c <UART_SetConfig+0x2c8>
 8005040:	2308      	movs	r3, #8
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	e0f9      	b.n	800523c <UART_SetConfig+0x2c8>
 8005048:	2310      	movs	r3, #16
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	bf00      	nop
 8005050:	e0f4      	b.n	800523c <UART_SetConfig+0x2c8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a91      	ldr	r2, [pc, #580]	; (800529c <UART_SetConfig+0x328>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d138      	bne.n	80050ce <UART_SetConfig+0x15a>
 800505c:	4b8e      	ldr	r3, [pc, #568]	; (8005298 <UART_SetConfig+0x324>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d82c      	bhi.n	80050c4 <UART_SetConfig+0x150>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0xfc>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080050c5 	.word	0x080050c5
 8005078:	080050c5 	.word	0x080050c5
 800507c:	080050c5 	.word	0x080050c5
 8005080:	080050b5 	.word	0x080050b5
 8005084:	080050c5 	.word	0x080050c5
 8005088:	080050c5 	.word	0x080050c5
 800508c:	080050c5 	.word	0x080050c5
 8005090:	080050ad 	.word	0x080050ad
 8005094:	080050c5 	.word	0x080050c5
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e0c7      	b.n	800523c <UART_SetConfig+0x2c8>
 80050ac:	2302      	movs	r3, #2
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e0c3      	b.n	800523c <UART_SetConfig+0x2c8>
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e0bf      	b.n	800523c <UART_SetConfig+0x2c8>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e0bb      	b.n	800523c <UART_SetConfig+0x2c8>
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	bf00      	nop
 80050cc:	e0b6      	b.n	800523c <UART_SetConfig+0x2c8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a73      	ldr	r2, [pc, #460]	; (80052a0 <UART_SetConfig+0x32c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d125      	bne.n	8005124 <UART_SetConfig+0x1b0>
 80050d8:	4b6f      	ldr	r3, [pc, #444]	; (8005298 <UART_SetConfig+0x324>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d011      	beq.n	800510a <UART_SetConfig+0x196>
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d802      	bhi.n	80050f0 <UART_SetConfig+0x17c>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <UART_SetConfig+0x186>
 80050ee:	e014      	b.n	800511a <UART_SetConfig+0x1a6>
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d006      	beq.n	8005102 <UART_SetConfig+0x18e>
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d00c      	beq.n	8005112 <UART_SetConfig+0x19e>
 80050f8:	e00f      	b.n	800511a <UART_SetConfig+0x1a6>
 80050fa:	2300      	movs	r3, #0
 80050fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005100:	e09c      	b.n	800523c <UART_SetConfig+0x2c8>
 8005102:	2302      	movs	r3, #2
 8005104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005108:	e098      	b.n	800523c <UART_SetConfig+0x2c8>
 800510a:	2304      	movs	r3, #4
 800510c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005110:	e094      	b.n	800523c <UART_SetConfig+0x2c8>
 8005112:	2308      	movs	r3, #8
 8005114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005118:	e090      	b.n	800523c <UART_SetConfig+0x2c8>
 800511a:	2310      	movs	r3, #16
 800511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005120:	bf00      	nop
 8005122:	e08b      	b.n	800523c <UART_SetConfig+0x2c8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a5e      	ldr	r2, [pc, #376]	; (80052a4 <UART_SetConfig+0x330>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d125      	bne.n	800517a <UART_SetConfig+0x206>
 800512e:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <UART_SetConfig+0x324>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d011      	beq.n	8005160 <UART_SetConfig+0x1ec>
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d802      	bhi.n	8005146 <UART_SetConfig+0x1d2>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <UART_SetConfig+0x1dc>
 8005144:	e014      	b.n	8005170 <UART_SetConfig+0x1fc>
 8005146:	2b80      	cmp	r3, #128	; 0x80
 8005148:	d006      	beq.n	8005158 <UART_SetConfig+0x1e4>
 800514a:	2bc0      	cmp	r3, #192	; 0xc0
 800514c:	d00c      	beq.n	8005168 <UART_SetConfig+0x1f4>
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x1fc>
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e071      	b.n	800523c <UART_SetConfig+0x2c8>
 8005158:	2302      	movs	r3, #2
 800515a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515e:	e06d      	b.n	800523c <UART_SetConfig+0x2c8>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005166:	e069      	b.n	800523c <UART_SetConfig+0x2c8>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516e:	e065      	b.n	800523c <UART_SetConfig+0x2c8>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005176:	bf00      	nop
 8005178:	e060      	b.n	800523c <UART_SetConfig+0x2c8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a4a      	ldr	r2, [pc, #296]	; (80052a8 <UART_SetConfig+0x334>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d129      	bne.n	80051d8 <UART_SetConfig+0x264>
 8005184:	4b44      	ldr	r3, [pc, #272]	; (8005298 <UART_SetConfig+0x324>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d014      	beq.n	80051be <UART_SetConfig+0x24a>
 8005194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005198:	d802      	bhi.n	80051a0 <UART_SetConfig+0x22c>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <UART_SetConfig+0x23a>
 800519e:	e016      	b.n	80051ce <UART_SetConfig+0x25a>
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a4:	d007      	beq.n	80051b6 <UART_SetConfig+0x242>
 80051a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051aa:	d00c      	beq.n	80051c6 <UART_SetConfig+0x252>
 80051ac:	e00f      	b.n	80051ce <UART_SetConfig+0x25a>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b4:	e042      	b.n	800523c <UART_SetConfig+0x2c8>
 80051b6:	2302      	movs	r3, #2
 80051b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051bc:	e03e      	b.n	800523c <UART_SetConfig+0x2c8>
 80051be:	2304      	movs	r3, #4
 80051c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c4:	e03a      	b.n	800523c <UART_SetConfig+0x2c8>
 80051c6:	2308      	movs	r3, #8
 80051c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051cc:	e036      	b.n	800523c <UART_SetConfig+0x2c8>
 80051ce:	2310      	movs	r3, #16
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d4:	bf00      	nop
 80051d6:	e031      	b.n	800523c <UART_SetConfig+0x2c8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2c      	ldr	r2, [pc, #176]	; (8005290 <UART_SetConfig+0x31c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d129      	bne.n	8005236 <UART_SetConfig+0x2c2>
 80051e2:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <UART_SetConfig+0x324>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f0:	d014      	beq.n	800521c <UART_SetConfig+0x2a8>
 80051f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f6:	d802      	bhi.n	80051fe <UART_SetConfig+0x28a>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <UART_SetConfig+0x298>
 80051fc:	e016      	b.n	800522c <UART_SetConfig+0x2b8>
 80051fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005202:	d007      	beq.n	8005214 <UART_SetConfig+0x2a0>
 8005204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005208:	d00c      	beq.n	8005224 <UART_SetConfig+0x2b0>
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x2b8>
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e013      	b.n	800523c <UART_SetConfig+0x2c8>
 8005214:	2302      	movs	r3, #2
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e00f      	b.n	800523c <UART_SetConfig+0x2c8>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e00b      	b.n	800523c <UART_SetConfig+0x2c8>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e007      	b.n	800523c <UART_SetConfig+0x2c8>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	bf00      	nop
 8005234:	e002      	b.n	800523c <UART_SetConfig+0x2c8>
 8005236:	2310      	movs	r3, #16
 8005238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <UART_SetConfig+0x31c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	f040 80fe 	bne.w	8005444 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800524c:	2b08      	cmp	r3, #8
 800524e:	d837      	bhi.n	80052c0 <UART_SetConfig+0x34c>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0x2e4>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	0800527d 	.word	0x0800527d
 800525c:	080052c1 	.word	0x080052c1
 8005260:	08005285 	.word	0x08005285
 8005264:	080052c1 	.word	0x080052c1
 8005268:	080052b1 	.word	0x080052b1
 800526c:	080052c1 	.word	0x080052c1
 8005270:	080052c1 	.word	0x080052c1
 8005274:	080052c1 	.word	0x080052c1
 8005278:	080052b9 	.word	0x080052b9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800527c:	f7fe fef4 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8005280:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005282:	e020      	b.n	80052c6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <UART_SetConfig+0x338>)
 8005286:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005288:	e01d      	b.n	80052c6 <UART_SetConfig+0x352>
 800528a:	bf00      	nop
 800528c:	efff69f3 	.word	0xefff69f3
 8005290:	40008000 	.word	0x40008000
 8005294:	40013800 	.word	0x40013800
 8005298:	40021000 	.word	0x40021000
 800529c:	40004400 	.word	0x40004400
 80052a0:	40004800 	.word	0x40004800
 80052a4:	40004c00 	.word	0x40004c00
 80052a8:	40005000 	.word	0x40005000
 80052ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80052b0:	f7fe fe44 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80052b4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052b6:	e006      	b.n	80052c6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80052b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052be:	e002      	b.n	80052c6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	76fb      	strb	r3, [r7, #27]
        break;
 80052c4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 81b9 	beq.w	8005640 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d305      	bcc.n	80052ea <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d902      	bls.n	80052f0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	76fb      	strb	r3, [r7, #27]
 80052ee:	e1a7      	b.n	8005640 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80052f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	f200 8092 	bhi.w	800541e <UART_SetConfig+0x4aa>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <UART_SetConfig+0x38c>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005325 	.word	0x08005325
 8005304:	0800541f 	.word	0x0800541f
 8005308:	08005373 	.word	0x08005373
 800530c:	0800541f 	.word	0x0800541f
 8005310:	080053a7 	.word	0x080053a7
 8005314:	0800541f 	.word	0x0800541f
 8005318:	0800541f 	.word	0x0800541f
 800531c:	0800541f 	.word	0x0800541f
 8005320:	080053f5 	.word	0x080053f5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005324:	f7fe fea0 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8005328:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4619      	mov	r1, r3
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	f04f 0400 	mov.w	r4, #0
 800533a:	0214      	lsls	r4, r2, #8
 800533c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005340:	020b      	lsls	r3, r1, #8
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6852      	ldr	r2, [r2, #4]
 8005346:	0852      	lsrs	r2, r2, #1
 8005348:	4611      	mov	r1, r2
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	eb13 0b01 	adds.w	fp, r3, r1
 8005352:	eb44 0c02 	adc.w	ip, r4, r2
 8005356:	4658      	mov	r0, fp
 8005358:	4661      	mov	r1, ip
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	461a      	mov	r2, r3
 8005364:	4623      	mov	r3, r4
 8005366:	f7fb fc9f 	bl	8000ca8 <__aeabi_uldivmod>
 800536a:	4603      	mov	r3, r0
 800536c:	460c      	mov	r4, r1
 800536e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005370:	e058      	b.n	8005424 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	f04f 0400 	mov.w	r4, #0
 800537c:	49ae      	ldr	r1, [pc, #696]	; (8005638 <UART_SetConfig+0x6c4>)
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	eb13 0b01 	adds.w	fp, r3, r1
 8005386:	eb44 0c02 	adc.w	ip, r4, r2
 800538a:	4658      	mov	r0, fp
 800538c:	4661      	mov	r1, ip
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f04f 0400 	mov.w	r4, #0
 8005396:	461a      	mov	r2, r3
 8005398:	4623      	mov	r3, r4
 800539a:	f7fb fc85 	bl	8000ca8 <__aeabi_uldivmod>
 800539e:	4603      	mov	r3, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80053a4:	e03e      	b.n	8005424 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80053a6:	f7fe fdc9 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80053aa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4619      	mov	r1, r3
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	f04f 0400 	mov.w	r4, #0
 80053bc:	0214      	lsls	r4, r2, #8
 80053be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80053c2:	020b      	lsls	r3, r1, #8
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6852      	ldr	r2, [r2, #4]
 80053c8:	0852      	lsrs	r2, r2, #1
 80053ca:	4611      	mov	r1, r2
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	eb13 0b01 	adds.w	fp, r3, r1
 80053d4:	eb44 0c02 	adc.w	ip, r4, r2
 80053d8:	4658      	mov	r0, fp
 80053da:	4661      	mov	r1, ip
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	461a      	mov	r2, r3
 80053e6:	4623      	mov	r3, r4
 80053e8:	f7fb fc5e 	bl	8000ca8 <__aeabi_uldivmod>
 80053ec:	4603      	mov	r3, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80053f2:	e017      	b.n	8005424 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005402:	f144 0100 	adc.w	r1, r4, #0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f04f 0400 	mov.w	r4, #0
 800540e:	461a      	mov	r2, r3
 8005410:	4623      	mov	r3, r4
 8005412:	f7fb fc49 	bl	8000ca8 <__aeabi_uldivmod>
 8005416:	4603      	mov	r3, r0
 8005418:	460c      	mov	r4, r1
 800541a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800541c:	e002      	b.n	8005424 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	76fb      	strb	r3, [r7, #27]
            break;
 8005422:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800542a:	d308      	bcc.n	800543e <UART_SetConfig+0x4ca>
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d204      	bcs.n	800543e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	e100      	b.n	8005640 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	76fb      	strb	r3, [r7, #27]
 8005442:	e0fd      	b.n	8005640 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544c:	f040 8084 	bne.w	8005558 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005454:	2b08      	cmp	r3, #8
 8005456:	d85f      	bhi.n	8005518 <UART_SetConfig+0x5a4>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0x4ec>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005485 	.word	0x08005485
 8005464:	080054a5 	.word	0x080054a5
 8005468:	080054c5 	.word	0x080054c5
 800546c:	08005519 	.word	0x08005519
 8005470:	080054e1 	.word	0x080054e1
 8005474:	08005519 	.word	0x08005519
 8005478:	08005519 	.word	0x08005519
 800547c:	08005519 	.word	0x08005519
 8005480:	08005501 	.word	0x08005501
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005484:	f7fe fdf0 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8005488:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	005a      	lsls	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	441a      	add	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	b29b      	uxth	r3, r3
 80054a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054a2:	e03c      	b.n	800551e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fe fdf6 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80054a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	005a      	lsls	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	441a      	add	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	b29b      	uxth	r3, r3
 80054c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054c2:	e02c      	b.n	800551e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80054ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6852      	ldr	r2, [r2, #4]
 80054d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054de:	e01e      	b.n	800551e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e0:	f7fe fd2c 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80054e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	005a      	lsls	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054fe:	e00e      	b.n	800551e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	b29b      	uxth	r3, r3
 8005514:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005516:	e002      	b.n	800551e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	76fb      	strb	r3, [r7, #27]
        break;
 800551c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	2b0f      	cmp	r3, #15
 8005522:	d916      	bls.n	8005552 <UART_SetConfig+0x5de>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552a:	d212      	bcs.n	8005552 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f023 030f 	bic.w	r3, r3, #15
 8005534:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	b29b      	uxth	r3, r3
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	b29a      	uxth	r2, r3
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	4313      	orrs	r3, r2
 8005546:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	89fa      	ldrh	r2, [r7, #14]
 800554e:	60da      	str	r2, [r3, #12]
 8005550:	e076      	b.n	8005640 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	76fb      	strb	r3, [r7, #27]
 8005556:	e073      	b.n	8005640 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800555c:	2b08      	cmp	r3, #8
 800555e:	d85c      	bhi.n	800561a <UART_SetConfig+0x6a6>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <UART_SetConfig+0x5f4>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800558d 	.word	0x0800558d
 800556c:	080055ab 	.word	0x080055ab
 8005570:	080055c9 	.word	0x080055c9
 8005574:	0800561b 	.word	0x0800561b
 8005578:	080055e5 	.word	0x080055e5
 800557c:	0800561b 	.word	0x0800561b
 8005580:	0800561b 	.word	0x0800561b
 8005584:	0800561b 	.word	0x0800561b
 8005588:	08005603 	.word	0x08005603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800558c:	f7fe fd6c 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8005590:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	085a      	lsrs	r2, r3, #1
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	441a      	add	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055a8:	e03a      	b.n	8005620 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055aa:	f7fe fd73 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80055ae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	085a      	lsrs	r2, r3, #1
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055c6:	e02b      	b.n	8005620 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80055d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6852      	ldr	r2, [r2, #4]
 80055da:	fbb3 f3f2 	udiv	r3, r3, r2
 80055de:	b29b      	uxth	r3, r3
 80055e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055e2:	e01d      	b.n	8005620 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e4:	f7fe fcaa 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80055e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	085a      	lsrs	r2, r3, #1
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	441a      	add	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005600:	e00e      	b.n	8005620 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005618:	e002      	b.n	8005620 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	76fb      	strb	r3, [r7, #27]
        break;
 800561e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b0f      	cmp	r3, #15
 8005624:	d90a      	bls.n	800563c <UART_SetConfig+0x6c8>
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d206      	bcs.n	800563c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	e003      	b.n	8005640 <UART_SetConfig+0x6cc>
 8005638:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800564c:	7efb      	ldrb	r3, [r7, #27]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3728      	adds	r7, #40	; 0x28
 8005652:	46bd      	mov	sp, r7
 8005654:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01a      	beq.n	800576e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005756:	d10a      	bne.n	800576e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  }
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80057aa:	f7fc ff1d 	bl	80025e8 <HAL_GetTick>
 80057ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d10e      	bne.n	80057dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f82a 	bl	8005826 <UART_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e020      	b.n	800581e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d10e      	bne.n	8005808 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f814 	bl	8005826 <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e00a      	b.n	800581e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	4613      	mov	r3, r2
 8005834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005836:	e05d      	b.n	80058f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d059      	beq.n	80058f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005840:	f7fc fed2 	bl	80025e8 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <UART_WaitOnFlagUntilTimeout+0x30>
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11b      	bne.n	800588e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005864:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e042      	b.n	8005914 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02b      	beq.n	80058f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058aa:	d123      	bne.n	80058f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e00f      	b.n	8005914 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	429a      	cmp	r2, r3
 8005910:	d092      	beq.n	8005838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005932:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff faf0 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800599e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff facd 	bl	8004f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059c8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ce:	2b22      	cmp	r3, #34	; 0x22
 80059d0:	d13a      	bne.n	8005a48 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059d8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059da:	89bb      	ldrh	r3, [r7, #12]
 80059dc:	b2d9      	uxtb	r1, r3
 80059de:	89fb      	ldrh	r3, [r7, #14]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	400a      	ands	r2, r1
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d123      	bne.n	8005a5c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a22:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fb fe1d 	bl	8001680 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a46:	e009      	b.n	8005a5c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	8b1b      	ldrh	r3, [r3, #24]
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0208 	orr.w	r2, r2, #8
 8005a58:	b292      	uxth	r2, r2
 8005a5a:	831a      	strh	r2, [r3, #24]
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a72:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a78:	2b22      	cmp	r3, #34	; 0x22
 8005a7a:	d13a      	bne.n	8005af2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a82:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a8a:	89ba      	ldrh	r2, [r7, #12]
 8005a8c:	89fb      	ldrh	r3, [r7, #14]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d123      	bne.n	8005b06 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005acc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fb fdc8 	bl	8001680 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005af0:	e009      	b.n	8005b06 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	8b1b      	ldrh	r3, [r3, #24]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0208 	orr.w	r2, r2, #8
 8005b02:	b292      	uxth	r2, r2
 8005b04:	831a      	strh	r2, [r3, #24]
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <atof>:
 8005b22:	2100      	movs	r1, #0
 8005b24:	f001 bcc8 	b.w	80074b8 <strtod>

08005b28 <atoi>:
 8005b28:	220a      	movs	r2, #10
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f001 bd66 	b.w	80075fc <strtol>

08005b30 <__errno>:
 8005b30:	4b01      	ldr	r3, [pc, #4]	; (8005b38 <__errno+0x8>)
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	200000c4 	.word	0x200000c4

08005b3c <__libc_init_array>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4e0d      	ldr	r6, [pc, #52]	; (8005b74 <__libc_init_array+0x38>)
 8005b40:	4c0d      	ldr	r4, [pc, #52]	; (8005b78 <__libc_init_array+0x3c>)
 8005b42:	1ba4      	subs	r4, r4, r6
 8005b44:	10a4      	asrs	r4, r4, #2
 8005b46:	2500      	movs	r5, #0
 8005b48:	42a5      	cmp	r5, r4
 8005b4a:	d109      	bne.n	8005b60 <__libc_init_array+0x24>
 8005b4c:	4e0b      	ldr	r6, [pc, #44]	; (8005b7c <__libc_init_array+0x40>)
 8005b4e:	4c0c      	ldr	r4, [pc, #48]	; (8005b80 <__libc_init_array+0x44>)
 8005b50:	f003 fd8c 	bl	800966c <_init>
 8005b54:	1ba4      	subs	r4, r4, r6
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	2500      	movs	r5, #0
 8005b5a:	42a5      	cmp	r5, r4
 8005b5c:	d105      	bne.n	8005b6a <__libc_init_array+0x2e>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b64:	4798      	blx	r3
 8005b66:	3501      	adds	r5, #1
 8005b68:	e7ee      	b.n	8005b48 <__libc_init_array+0xc>
 8005b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b6e:	4798      	blx	r3
 8005b70:	3501      	adds	r5, #1
 8005b72:	e7f2      	b.n	8005b5a <__libc_init_array+0x1e>
 8005b74:	0800a770 	.word	0x0800a770
 8005b78:	0800a770 	.word	0x0800a770
 8005b7c:	0800a770 	.word	0x0800a770
 8005b80:	0800a774 	.word	0x0800a774

08005b84 <memset>:
 8005b84:	4402      	add	r2, r0
 8005b86:	4603      	mov	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <__cvt>:
 8005b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	ec55 4b10 	vmov	r4, r5, d0
 8005b9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005b9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	460e      	mov	r6, r1
 8005ba6:	4691      	mov	r9, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	bfb8      	it	lt
 8005bac:	4622      	movlt	r2, r4
 8005bae:	462b      	mov	r3, r5
 8005bb0:	f027 0720 	bic.w	r7, r7, #32
 8005bb4:	bfbb      	ittet	lt
 8005bb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bba:	461d      	movlt	r5, r3
 8005bbc:	2300      	movge	r3, #0
 8005bbe:	232d      	movlt	r3, #45	; 0x2d
 8005bc0:	bfb8      	it	lt
 8005bc2:	4614      	movlt	r4, r2
 8005bc4:	2f46      	cmp	r7, #70	; 0x46
 8005bc6:	700b      	strb	r3, [r1, #0]
 8005bc8:	d004      	beq.n	8005bd4 <__cvt+0x40>
 8005bca:	2f45      	cmp	r7, #69	; 0x45
 8005bcc:	d100      	bne.n	8005bd0 <__cvt+0x3c>
 8005bce:	3601      	adds	r6, #1
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	e000      	b.n	8005bd6 <__cvt+0x42>
 8005bd4:	2103      	movs	r1, #3
 8005bd6:	ab03      	add	r3, sp, #12
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	ab02      	add	r3, sp, #8
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	4632      	mov	r2, r6
 8005be0:	4653      	mov	r3, sl
 8005be2:	ec45 4b10 	vmov	d0, r4, r5
 8005be6:	f001 fdab 	bl	8007740 <_dtoa_r>
 8005bea:	2f47      	cmp	r7, #71	; 0x47
 8005bec:	4680      	mov	r8, r0
 8005bee:	d102      	bne.n	8005bf6 <__cvt+0x62>
 8005bf0:	f019 0f01 	tst.w	r9, #1
 8005bf4:	d026      	beq.n	8005c44 <__cvt+0xb0>
 8005bf6:	2f46      	cmp	r7, #70	; 0x46
 8005bf8:	eb08 0906 	add.w	r9, r8, r6
 8005bfc:	d111      	bne.n	8005c22 <__cvt+0x8e>
 8005bfe:	f898 3000 	ldrb.w	r3, [r8]
 8005c02:	2b30      	cmp	r3, #48	; 0x30
 8005c04:	d10a      	bne.n	8005c1c <__cvt+0x88>
 8005c06:	2200      	movs	r2, #0
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7fa ff6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c12:	b918      	cbnz	r0, 8005c1c <__cvt+0x88>
 8005c14:	f1c6 0601 	rsb	r6, r6, #1
 8005c18:	f8ca 6000 	str.w	r6, [sl]
 8005c1c:	f8da 3000 	ldr.w	r3, [sl]
 8005c20:	4499      	add	r9, r3
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	4620      	mov	r0, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	f7fa ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c2e:	b938      	cbnz	r0, 8005c40 <__cvt+0xac>
 8005c30:	2230      	movs	r2, #48	; 0x30
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	454b      	cmp	r3, r9
 8005c36:	d205      	bcs.n	8005c44 <__cvt+0xb0>
 8005c38:	1c59      	adds	r1, r3, #1
 8005c3a:	9103      	str	r1, [sp, #12]
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e7f8      	b.n	8005c32 <__cvt+0x9e>
 8005c40:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c48:	eba3 0308 	sub.w	r3, r3, r8
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	b004      	add	sp, #16
 8005c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c56 <__exponent>:
 8005c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	bfba      	itte	lt
 8005c5e:	4249      	neglt	r1, r1
 8005c60:	232d      	movlt	r3, #45	; 0x2d
 8005c62:	232b      	movge	r3, #43	; 0x2b
 8005c64:	2909      	cmp	r1, #9
 8005c66:	f804 2b02 	strb.w	r2, [r4], #2
 8005c6a:	7043      	strb	r3, [r0, #1]
 8005c6c:	dd20      	ble.n	8005cb0 <__exponent+0x5a>
 8005c6e:	f10d 0307 	add.w	r3, sp, #7
 8005c72:	461f      	mov	r7, r3
 8005c74:	260a      	movs	r6, #10
 8005c76:	fb91 f5f6 	sdiv	r5, r1, r6
 8005c7a:	fb06 1115 	mls	r1, r6, r5, r1
 8005c7e:	3130      	adds	r1, #48	; 0x30
 8005c80:	2d09      	cmp	r5, #9
 8005c82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c86:	f103 32ff 	add.w	r2, r3, #4294967295
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	dc09      	bgt.n	8005ca2 <__exponent+0x4c>
 8005c8e:	3130      	adds	r1, #48	; 0x30
 8005c90:	3b02      	subs	r3, #2
 8005c92:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005c96:	42bb      	cmp	r3, r7
 8005c98:	4622      	mov	r2, r4
 8005c9a:	d304      	bcc.n	8005ca6 <__exponent+0x50>
 8005c9c:	1a10      	subs	r0, r2, r0
 8005c9e:	b003      	add	sp, #12
 8005ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	e7e7      	b.n	8005c76 <__exponent+0x20>
 8005ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005caa:	f804 2b01 	strb.w	r2, [r4], #1
 8005cae:	e7f2      	b.n	8005c96 <__exponent+0x40>
 8005cb0:	2330      	movs	r3, #48	; 0x30
 8005cb2:	4419      	add	r1, r3
 8005cb4:	7083      	strb	r3, [r0, #2]
 8005cb6:	1d02      	adds	r2, r0, #4
 8005cb8:	70c1      	strb	r1, [r0, #3]
 8005cba:	e7ef      	b.n	8005c9c <__exponent+0x46>

08005cbc <_printf_float>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	b08d      	sub	sp, #52	; 0x34
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005cc8:	4616      	mov	r6, r2
 8005cca:	461f      	mov	r7, r3
 8005ccc:	4605      	mov	r5, r0
 8005cce:	f002 fe1b 	bl	8008908 <_localeconv_r>
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fa84 	bl	80001e4 <strlen>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	930a      	str	r3, [sp, #40]	; 0x28
 8005ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce4:	9005      	str	r0, [sp, #20]
 8005ce6:	3307      	adds	r3, #7
 8005ce8:	f023 0307 	bic.w	r3, r3, #7
 8005cec:	f103 0208 	add.w	r2, r3, #8
 8005cf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cf4:	f8d4 b000 	ldr.w	fp, [r4]
 8005cf8:	f8c8 2000 	str.w	r2, [r8]
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d04:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d0c:	9307      	str	r3, [sp, #28]
 8005d0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295
 8005d16:	4ba7      	ldr	r3, [pc, #668]	; (8005fb4 <_printf_float+0x2f8>)
 8005d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d1c:	f7fa ff16 	bl	8000b4c <__aeabi_dcmpun>
 8005d20:	bb70      	cbnz	r0, 8005d80 <_printf_float+0xc4>
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	4ba3      	ldr	r3, [pc, #652]	; (8005fb4 <_printf_float+0x2f8>)
 8005d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d2c:	f7fa fef0 	bl	8000b10 <__aeabi_dcmple>
 8005d30:	bb30      	cbnz	r0, 8005d80 <_printf_float+0xc4>
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	f7fa fedf 	bl	8000afc <__aeabi_dcmplt>
 8005d3e:	b110      	cbz	r0, 8005d46 <_printf_float+0x8a>
 8005d40:	232d      	movs	r3, #45	; 0x2d
 8005d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d46:	4a9c      	ldr	r2, [pc, #624]	; (8005fb8 <_printf_float+0x2fc>)
 8005d48:	4b9c      	ldr	r3, [pc, #624]	; (8005fbc <_printf_float+0x300>)
 8005d4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005d4e:	bf8c      	ite	hi
 8005d50:	4690      	movhi	r8, r2
 8005d52:	4698      	movls	r8, r3
 8005d54:	2303      	movs	r3, #3
 8005d56:	f02b 0204 	bic.w	r2, fp, #4
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	6022      	str	r2, [r4, #0]
 8005d5e:	f04f 0900 	mov.w	r9, #0
 8005d62:	9700      	str	r7, [sp, #0]
 8005d64:	4633      	mov	r3, r6
 8005d66:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 f9e6 	bl	800613c <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f040 808d 	bne.w	8005e90 <_printf_float+0x1d4>
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	b00d      	add	sp, #52	; 0x34
 8005d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa fee0 	bl	8000b4c <__aeabi_dcmpun>
 8005d8c:	b110      	cbz	r0, 8005d94 <_printf_float+0xd8>
 8005d8e:	4a8c      	ldr	r2, [pc, #560]	; (8005fc0 <_printf_float+0x304>)
 8005d90:	4b8c      	ldr	r3, [pc, #560]	; (8005fc4 <_printf_float+0x308>)
 8005d92:	e7da      	b.n	8005d4a <_printf_float+0x8e>
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	1c4b      	adds	r3, r1, #1
 8005d98:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005d9c:	a80a      	add	r0, sp, #40	; 0x28
 8005d9e:	d13e      	bne.n	8005e1e <_printf_float+0x162>
 8005da0:	2306      	movs	r3, #6
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	2300      	movs	r3, #0
 8005da6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005daa:	ab09      	add	r3, sp, #36	; 0x24
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	ec49 8b10 	vmov	d0, r8, r9
 8005db2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005db6:	6022      	str	r2, [r4, #0]
 8005db8:	f8cd a004 	str.w	sl, [sp, #4]
 8005dbc:	6861      	ldr	r1, [r4, #4]
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7ff fee8 	bl	8005b94 <__cvt>
 8005dc4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005dc8:	2b47      	cmp	r3, #71	; 0x47
 8005dca:	4680      	mov	r8, r0
 8005dcc:	d109      	bne.n	8005de2 <_printf_float+0x126>
 8005dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd0:	1cd8      	adds	r0, r3, #3
 8005dd2:	db02      	blt.n	8005dda <_printf_float+0x11e>
 8005dd4:	6862      	ldr	r2, [r4, #4]
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	dd47      	ble.n	8005e6a <_printf_float+0x1ae>
 8005dda:	f1aa 0a02 	sub.w	sl, sl, #2
 8005dde:	fa5f fa8a 	uxtb.w	sl, sl
 8005de2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005de8:	d824      	bhi.n	8005e34 <_printf_float+0x178>
 8005dea:	3901      	subs	r1, #1
 8005dec:	4652      	mov	r2, sl
 8005dee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005df2:	9109      	str	r1, [sp, #36]	; 0x24
 8005df4:	f7ff ff2f 	bl	8005c56 <__exponent>
 8005df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dfa:	1813      	adds	r3, r2, r0
 8005dfc:	2a01      	cmp	r2, #1
 8005dfe:	4681      	mov	r9, r0
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	dc02      	bgt.n	8005e0a <_printf_float+0x14e>
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	07d1      	lsls	r1, r2, #31
 8005e08:	d501      	bpl.n	8005e0e <_printf_float+0x152>
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0a5      	beq.n	8005d62 <_printf_float+0xa6>
 8005e16:	232d      	movs	r3, #45	; 0x2d
 8005e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e1c:	e7a1      	b.n	8005d62 <_printf_float+0xa6>
 8005e1e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005e22:	f000 8177 	beq.w	8006114 <_printf_float+0x458>
 8005e26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005e2a:	d1bb      	bne.n	8005da4 <_printf_float+0xe8>
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d1b9      	bne.n	8005da4 <_printf_float+0xe8>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e7b6      	b.n	8005da2 <_printf_float+0xe6>
 8005e34:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005e38:	d119      	bne.n	8005e6e <_printf_float+0x1b2>
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	dd0c      	ble.n	8005e5a <_printf_float+0x19e>
 8005e40:	6121      	str	r1, [r4, #16]
 8005e42:	b913      	cbnz	r3, 8005e4a <_printf_float+0x18e>
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	07d2      	lsls	r2, r2, #31
 8005e48:	d502      	bpl.n	8005e50 <_printf_float+0x194>
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	440b      	add	r3, r1
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e52:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e54:	f04f 0900 	mov.w	r9, #0
 8005e58:	e7d9      	b.n	8005e0e <_printf_float+0x152>
 8005e5a:	b913      	cbnz	r3, 8005e62 <_printf_float+0x1a6>
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	07d0      	lsls	r0, r2, #31
 8005e60:	d501      	bpl.n	8005e66 <_printf_float+0x1aa>
 8005e62:	3302      	adds	r3, #2
 8005e64:	e7f3      	b.n	8005e4e <_printf_float+0x192>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e7f1      	b.n	8005e4e <_printf_float+0x192>
 8005e6a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005e6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e72:	4293      	cmp	r3, r2
 8005e74:	db05      	blt.n	8005e82 <_printf_float+0x1c6>
 8005e76:	6822      	ldr	r2, [r4, #0]
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	07d1      	lsls	r1, r2, #31
 8005e7c:	d5e8      	bpl.n	8005e50 <_printf_float+0x194>
 8005e7e:	3301      	adds	r3, #1
 8005e80:	e7e5      	b.n	8005e4e <_printf_float+0x192>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfd4      	ite	le
 8005e86:	f1c3 0302 	rsble	r3, r3, #2
 8005e8a:	2301      	movgt	r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	e7de      	b.n	8005e4e <_printf_float+0x192>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	055a      	lsls	r2, r3, #21
 8005e94:	d407      	bmi.n	8005ea6 <_printf_float+0x1ea>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d12b      	bne.n	8005efc <_printf_float+0x240>
 8005ea4:	e767      	b.n	8005d76 <_printf_float+0xba>
 8005ea6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005eaa:	f240 80dc 	bls.w	8006066 <_printf_float+0x3aa>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eb6:	f7fa fe17 	bl	8000ae8 <__aeabi_dcmpeq>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d033      	beq.n	8005f26 <_printf_float+0x26a>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4a41      	ldr	r2, [pc, #260]	; (8005fc8 <_printf_float+0x30c>)
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f af54 	beq.w	8005d76 <_printf_float+0xba>
 8005ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	db02      	blt.n	8005edc <_printf_float+0x220>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	07d8      	lsls	r0, r3, #31
 8005eda:	d50f      	bpl.n	8005efc <_printf_float+0x240>
 8005edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f af45 	beq.w	8005d76 <_printf_float+0xba>
 8005eec:	f04f 0800 	mov.w	r8, #0
 8005ef0:	f104 091a 	add.w	r9, r4, #26
 8005ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	4543      	cmp	r3, r8
 8005efa:	dc09      	bgt.n	8005f10 <_printf_float+0x254>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	079b      	lsls	r3, r3, #30
 8005f00:	f100 8103 	bmi.w	800610a <_printf_float+0x44e>
 8005f04:	68e0      	ldr	r0, [r4, #12]
 8005f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f08:	4298      	cmp	r0, r3
 8005f0a:	bfb8      	it	lt
 8005f0c:	4618      	movlt	r0, r3
 8005f0e:	e734      	b.n	8005d7a <_printf_float+0xbe>
 8005f10:	2301      	movs	r3, #1
 8005f12:	464a      	mov	r2, r9
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af2b 	beq.w	8005d76 <_printf_float+0xba>
 8005f20:	f108 0801 	add.w	r8, r8, #1
 8005f24:	e7e6      	b.n	8005ef4 <_printf_float+0x238>
 8005f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc2b      	bgt.n	8005f84 <_printf_float+0x2c8>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4a26      	ldr	r2, [pc, #152]	; (8005fc8 <_printf_float+0x30c>)
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f af1d 	beq.w	8005d76 <_printf_float+0xba>
 8005f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3e:	b923      	cbnz	r3, 8005f4a <_printf_float+0x28e>
 8005f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f42:	b913      	cbnz	r3, 8005f4a <_printf_float+0x28e>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	07d9      	lsls	r1, r3, #31
 8005f48:	d5d8      	bpl.n	8005efc <_printf_float+0x240>
 8005f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f af0e 	beq.w	8005d76 <_printf_float+0xba>
 8005f5a:	f04f 0900 	mov.w	r9, #0
 8005f5e:	f104 0a1a 	add.w	sl, r4, #26
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	425b      	negs	r3, r3
 8005f66:	454b      	cmp	r3, r9
 8005f68:	dc01      	bgt.n	8005f6e <_printf_float+0x2b2>
 8005f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6c:	e794      	b.n	8005e98 <_printf_float+0x1dc>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f aefc 	beq.w	8005d76 <_printf_float+0xba>
 8005f7e:	f109 0901 	add.w	r9, r9, #1
 8005f82:	e7ee      	b.n	8005f62 <_printf_float+0x2a6>
 8005f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	bfa8      	it	ge
 8005f8c:	461a      	movge	r2, r3
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	4691      	mov	r9, r2
 8005f92:	dd07      	ble.n	8005fa4 <_printf_float+0x2e8>
 8005f94:	4613      	mov	r3, r2
 8005f96:	4631      	mov	r1, r6
 8005f98:	4642      	mov	r2, r8
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f aee9 	beq.w	8005d76 <_printf_float+0xba>
 8005fa4:	f104 031a 	add.w	r3, r4, #26
 8005fa8:	f04f 0b00 	mov.w	fp, #0
 8005fac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb0:	9306      	str	r3, [sp, #24]
 8005fb2:	e015      	b.n	8005fe0 <_printf_float+0x324>
 8005fb4:	7fefffff 	.word	0x7fefffff
 8005fb8:	0800a4b4 	.word	0x0800a4b4
 8005fbc:	0800a4b0 	.word	0x0800a4b0
 8005fc0:	0800a4bc 	.word	0x0800a4bc
 8005fc4:	0800a4b8 	.word	0x0800a4b8
 8005fc8:	0800a4c0 	.word	0x0800a4c0
 8005fcc:	2301      	movs	r3, #1
 8005fce:	9a06      	ldr	r2, [sp, #24]
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	f43f aecd 	beq.w	8005d76 <_printf_float+0xba>
 8005fdc:	f10b 0b01 	add.w	fp, fp, #1
 8005fe0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005fe4:	ebaa 0309 	sub.w	r3, sl, r9
 8005fe8:	455b      	cmp	r3, fp
 8005fea:	dcef      	bgt.n	8005fcc <_printf_float+0x310>
 8005fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	44d0      	add	r8, sl
 8005ff4:	db15      	blt.n	8006022 <_printf_float+0x366>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	07da      	lsls	r2, r3, #31
 8005ffa:	d412      	bmi.n	8006022 <_printf_float+0x366>
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006000:	eba3 020a 	sub.w	r2, r3, sl
 8006004:	eba3 0a01 	sub.w	sl, r3, r1
 8006008:	4592      	cmp	sl, r2
 800600a:	bfa8      	it	ge
 800600c:	4692      	movge	sl, r2
 800600e:	f1ba 0f00 	cmp.w	sl, #0
 8006012:	dc0e      	bgt.n	8006032 <_printf_float+0x376>
 8006014:	f04f 0800 	mov.w	r8, #0
 8006018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800601c:	f104 091a 	add.w	r9, r4, #26
 8006020:	e019      	b.n	8006056 <_printf_float+0x39a>
 8006022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006026:	4631      	mov	r1, r6
 8006028:	4628      	mov	r0, r5
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	d1e5      	bne.n	8005ffc <_printf_float+0x340>
 8006030:	e6a1      	b.n	8005d76 <_printf_float+0xba>
 8006032:	4653      	mov	r3, sl
 8006034:	4642      	mov	r2, r8
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	d1e9      	bne.n	8006014 <_printf_float+0x358>
 8006040:	e699      	b.n	8005d76 <_printf_float+0xba>
 8006042:	2301      	movs	r3, #1
 8006044:	464a      	mov	r2, r9
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	f43f ae92 	beq.w	8005d76 <_printf_float+0xba>
 8006052:	f108 0801 	add.w	r8, r8, #1
 8006056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	eba3 030a 	sub.w	r3, r3, sl
 8006060:	4543      	cmp	r3, r8
 8006062:	dcee      	bgt.n	8006042 <_printf_float+0x386>
 8006064:	e74a      	b.n	8005efc <_printf_float+0x240>
 8006066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006068:	2a01      	cmp	r2, #1
 800606a:	dc01      	bgt.n	8006070 <_printf_float+0x3b4>
 800606c:	07db      	lsls	r3, r3, #31
 800606e:	d53a      	bpl.n	80060e6 <_printf_float+0x42a>
 8006070:	2301      	movs	r3, #1
 8006072:	4642      	mov	r2, r8
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	f43f ae7b 	beq.w	8005d76 <_printf_float+0xba>
 8006080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f108 0801 	add.w	r8, r8, #1
 8006090:	f43f ae71 	beq.w	8005d76 <_printf_float+0xba>
 8006094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006096:	2200      	movs	r2, #0
 8006098:	f103 3aff 	add.w	sl, r3, #4294967295
 800609c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060a0:	2300      	movs	r3, #0
 80060a2:	f7fa fd21 	bl	8000ae8 <__aeabi_dcmpeq>
 80060a6:	b9c8      	cbnz	r0, 80060dc <_printf_float+0x420>
 80060a8:	4653      	mov	r3, sl
 80060aa:	4642      	mov	r2, r8
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	d10e      	bne.n	80060d4 <_printf_float+0x418>
 80060b6:	e65e      	b.n	8005d76 <_printf_float+0xba>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4652      	mov	r2, sl
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f ae57 	beq.w	8005d76 <_printf_float+0xba>
 80060c8:	f108 0801 	add.w	r8, r8, #1
 80060cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4543      	cmp	r3, r8
 80060d2:	dcf1      	bgt.n	80060b8 <_printf_float+0x3fc>
 80060d4:	464b      	mov	r3, r9
 80060d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060da:	e6de      	b.n	8005e9a <_printf_float+0x1de>
 80060dc:	f04f 0800 	mov.w	r8, #0
 80060e0:	f104 0a1a 	add.w	sl, r4, #26
 80060e4:	e7f2      	b.n	80060cc <_printf_float+0x410>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e7df      	b.n	80060aa <_printf_float+0x3ee>
 80060ea:	2301      	movs	r3, #1
 80060ec:	464a      	mov	r2, r9
 80060ee:	4631      	mov	r1, r6
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b8      	blx	r7
 80060f4:	3001      	adds	r0, #1
 80060f6:	f43f ae3e 	beq.w	8005d76 <_printf_float+0xba>
 80060fa:	f108 0801 	add.w	r8, r8, #1
 80060fe:	68e3      	ldr	r3, [r4, #12]
 8006100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	4543      	cmp	r3, r8
 8006106:	dcf0      	bgt.n	80060ea <_printf_float+0x42e>
 8006108:	e6fc      	b.n	8005f04 <_printf_float+0x248>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	f104 0919 	add.w	r9, r4, #25
 8006112:	e7f4      	b.n	80060fe <_printf_float+0x442>
 8006114:	2900      	cmp	r1, #0
 8006116:	f43f ae8b 	beq.w	8005e30 <_printf_float+0x174>
 800611a:	2300      	movs	r3, #0
 800611c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006120:	ab09      	add	r3, sp, #36	; 0x24
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	ec49 8b10 	vmov	d0, r8, r9
 8006128:	6022      	str	r2, [r4, #0]
 800612a:	f8cd a004 	str.w	sl, [sp, #4]
 800612e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff fd2e 	bl	8005b94 <__cvt>
 8006138:	4680      	mov	r8, r0
 800613a:	e648      	b.n	8005dce <_printf_float+0x112>

0800613c <_printf_common>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	4691      	mov	r9, r2
 8006142:	461f      	mov	r7, r3
 8006144:	688a      	ldr	r2, [r1, #8]
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800614c:	4293      	cmp	r3, r2
 800614e:	bfb8      	it	lt
 8006150:	4613      	movlt	r3, r2
 8006152:	f8c9 3000 	str.w	r3, [r9]
 8006156:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800615a:	4606      	mov	r6, r0
 800615c:	460c      	mov	r4, r1
 800615e:	b112      	cbz	r2, 8006166 <_printf_common+0x2a>
 8006160:	3301      	adds	r3, #1
 8006162:	f8c9 3000 	str.w	r3, [r9]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	0699      	lsls	r1, r3, #26
 800616a:	bf42      	ittt	mi
 800616c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006170:	3302      	addmi	r3, #2
 8006172:	f8c9 3000 	strmi.w	r3, [r9]
 8006176:	6825      	ldr	r5, [r4, #0]
 8006178:	f015 0506 	ands.w	r5, r5, #6
 800617c:	d107      	bne.n	800618e <_printf_common+0x52>
 800617e:	f104 0a19 	add.w	sl, r4, #25
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	f8d9 2000 	ldr.w	r2, [r9]
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	42ab      	cmp	r3, r5
 800618c:	dc28      	bgt.n	80061e0 <_printf_common+0xa4>
 800618e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	3300      	adds	r3, #0
 8006196:	bf18      	it	ne
 8006198:	2301      	movne	r3, #1
 800619a:	0692      	lsls	r2, r2, #26
 800619c:	d42d      	bmi.n	80061fa <_printf_common+0xbe>
 800619e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a2:	4639      	mov	r1, r7
 80061a4:	4630      	mov	r0, r6
 80061a6:	47c0      	blx	r8
 80061a8:	3001      	adds	r0, #1
 80061aa:	d020      	beq.n	80061ee <_printf_common+0xb2>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	68e5      	ldr	r5, [r4, #12]
 80061b0:	f8d9 2000 	ldr.w	r2, [r9]
 80061b4:	f003 0306 	and.w	r3, r3, #6
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	bf08      	it	eq
 80061bc:	1aad      	subeq	r5, r5, r2
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	6922      	ldr	r2, [r4, #16]
 80061c2:	bf0c      	ite	eq
 80061c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061c8:	2500      	movne	r5, #0
 80061ca:	4293      	cmp	r3, r2
 80061cc:	bfc4      	itt	gt
 80061ce:	1a9b      	subgt	r3, r3, r2
 80061d0:	18ed      	addgt	r5, r5, r3
 80061d2:	f04f 0900 	mov.w	r9, #0
 80061d6:	341a      	adds	r4, #26
 80061d8:	454d      	cmp	r5, r9
 80061da:	d11a      	bne.n	8006212 <_printf_common+0xd6>
 80061dc:	2000      	movs	r0, #0
 80061de:	e008      	b.n	80061f2 <_printf_common+0xb6>
 80061e0:	2301      	movs	r3, #1
 80061e2:	4652      	mov	r2, sl
 80061e4:	4639      	mov	r1, r7
 80061e6:	4630      	mov	r0, r6
 80061e8:	47c0      	blx	r8
 80061ea:	3001      	adds	r0, #1
 80061ec:	d103      	bne.n	80061f6 <_printf_common+0xba>
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295
 80061f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f6:	3501      	adds	r5, #1
 80061f8:	e7c3      	b.n	8006182 <_printf_common+0x46>
 80061fa:	18e1      	adds	r1, r4, r3
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	2030      	movs	r0, #48	; 0x30
 8006200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006204:	4422      	add	r2, r4
 8006206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800620a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800620e:	3302      	adds	r3, #2
 8006210:	e7c5      	b.n	800619e <_printf_common+0x62>
 8006212:	2301      	movs	r3, #1
 8006214:	4622      	mov	r2, r4
 8006216:	4639      	mov	r1, r7
 8006218:	4630      	mov	r0, r6
 800621a:	47c0      	blx	r8
 800621c:	3001      	adds	r0, #1
 800621e:	d0e6      	beq.n	80061ee <_printf_common+0xb2>
 8006220:	f109 0901 	add.w	r9, r9, #1
 8006224:	e7d8      	b.n	80061d8 <_printf_common+0x9c>
	...

08006228 <_printf_i>:
 8006228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800622c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006230:	460c      	mov	r4, r1
 8006232:	7e09      	ldrb	r1, [r1, #24]
 8006234:	b085      	sub	sp, #20
 8006236:	296e      	cmp	r1, #110	; 0x6e
 8006238:	4617      	mov	r7, r2
 800623a:	4606      	mov	r6, r0
 800623c:	4698      	mov	r8, r3
 800623e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006240:	f000 80b3 	beq.w	80063aa <_printf_i+0x182>
 8006244:	d822      	bhi.n	800628c <_printf_i+0x64>
 8006246:	2963      	cmp	r1, #99	; 0x63
 8006248:	d036      	beq.n	80062b8 <_printf_i+0x90>
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x3a>
 800624c:	2900      	cmp	r1, #0
 800624e:	f000 80b9 	beq.w	80063c4 <_printf_i+0x19c>
 8006252:	2958      	cmp	r1, #88	; 0x58
 8006254:	f000 8083 	beq.w	800635e <_printf_i+0x136>
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006260:	e032      	b.n	80062c8 <_printf_i+0xa0>
 8006262:	2964      	cmp	r1, #100	; 0x64
 8006264:	d001      	beq.n	800626a <_printf_i+0x42>
 8006266:	2969      	cmp	r1, #105	; 0x69
 8006268:	d1f6      	bne.n	8006258 <_printf_i+0x30>
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	6813      	ldr	r3, [r2, #0]
 800626e:	0605      	lsls	r5, r0, #24
 8006270:	f103 0104 	add.w	r1, r3, #4
 8006274:	d52a      	bpl.n	80062cc <_printf_i+0xa4>
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	da03      	bge.n	8006286 <_printf_i+0x5e>
 800627e:	222d      	movs	r2, #45	; 0x2d
 8006280:	425b      	negs	r3, r3
 8006282:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006286:	486f      	ldr	r0, [pc, #444]	; (8006444 <_printf_i+0x21c>)
 8006288:	220a      	movs	r2, #10
 800628a:	e039      	b.n	8006300 <_printf_i+0xd8>
 800628c:	2973      	cmp	r1, #115	; 0x73
 800628e:	f000 809d 	beq.w	80063cc <_printf_i+0x1a4>
 8006292:	d808      	bhi.n	80062a6 <_printf_i+0x7e>
 8006294:	296f      	cmp	r1, #111	; 0x6f
 8006296:	d020      	beq.n	80062da <_printf_i+0xb2>
 8006298:	2970      	cmp	r1, #112	; 0x70
 800629a:	d1dd      	bne.n	8006258 <_printf_i+0x30>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	f043 0320 	orr.w	r3, r3, #32
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	e003      	b.n	80062ae <_printf_i+0x86>
 80062a6:	2975      	cmp	r1, #117	; 0x75
 80062a8:	d017      	beq.n	80062da <_printf_i+0xb2>
 80062aa:	2978      	cmp	r1, #120	; 0x78
 80062ac:	d1d4      	bne.n	8006258 <_printf_i+0x30>
 80062ae:	2378      	movs	r3, #120	; 0x78
 80062b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062b4:	4864      	ldr	r0, [pc, #400]	; (8006448 <_printf_i+0x220>)
 80062b6:	e055      	b.n	8006364 <_printf_i+0x13c>
 80062b8:	6813      	ldr	r3, [r2, #0]
 80062ba:	1d19      	adds	r1, r3, #4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6011      	str	r1, [r2, #0]
 80062c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c8:	2301      	movs	r3, #1
 80062ca:	e08c      	b.n	80063e6 <_printf_i+0x1be>
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6011      	str	r1, [r2, #0]
 80062d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062d4:	bf18      	it	ne
 80062d6:	b21b      	sxthne	r3, r3
 80062d8:	e7cf      	b.n	800627a <_printf_i+0x52>
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	6825      	ldr	r5, [r4, #0]
 80062de:	1d18      	adds	r0, r3, #4
 80062e0:	6010      	str	r0, [r2, #0]
 80062e2:	0628      	lsls	r0, r5, #24
 80062e4:	d501      	bpl.n	80062ea <_printf_i+0xc2>
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	e002      	b.n	80062f0 <_printf_i+0xc8>
 80062ea:	0668      	lsls	r0, r5, #25
 80062ec:	d5fb      	bpl.n	80062e6 <_printf_i+0xbe>
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	4854      	ldr	r0, [pc, #336]	; (8006444 <_printf_i+0x21c>)
 80062f2:	296f      	cmp	r1, #111	; 0x6f
 80062f4:	bf14      	ite	ne
 80062f6:	220a      	movne	r2, #10
 80062f8:	2208      	moveq	r2, #8
 80062fa:	2100      	movs	r1, #0
 80062fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006300:	6865      	ldr	r5, [r4, #4]
 8006302:	60a5      	str	r5, [r4, #8]
 8006304:	2d00      	cmp	r5, #0
 8006306:	f2c0 8095 	blt.w	8006434 <_printf_i+0x20c>
 800630a:	6821      	ldr	r1, [r4, #0]
 800630c:	f021 0104 	bic.w	r1, r1, #4
 8006310:	6021      	str	r1, [r4, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13d      	bne.n	8006392 <_printf_i+0x16a>
 8006316:	2d00      	cmp	r5, #0
 8006318:	f040 808e 	bne.w	8006438 <_printf_i+0x210>
 800631c:	4665      	mov	r5, ip
 800631e:	2a08      	cmp	r2, #8
 8006320:	d10b      	bne.n	800633a <_printf_i+0x112>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	07db      	lsls	r3, r3, #31
 8006326:	d508      	bpl.n	800633a <_printf_i+0x112>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	6862      	ldr	r2, [r4, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	bfde      	ittt	le
 8006330:	2330      	movle	r3, #48	; 0x30
 8006332:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006336:	f105 35ff 	addle.w	r5, r5, #4294967295
 800633a:	ebac 0305 	sub.w	r3, ip, r5
 800633e:	6123      	str	r3, [r4, #16]
 8006340:	f8cd 8000 	str.w	r8, [sp]
 8006344:	463b      	mov	r3, r7
 8006346:	aa03      	add	r2, sp, #12
 8006348:	4621      	mov	r1, r4
 800634a:	4630      	mov	r0, r6
 800634c:	f7ff fef6 	bl	800613c <_printf_common>
 8006350:	3001      	adds	r0, #1
 8006352:	d14d      	bne.n	80063f0 <_printf_i+0x1c8>
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	b005      	add	sp, #20
 800635a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800635e:	4839      	ldr	r0, [pc, #228]	; (8006444 <_printf_i+0x21c>)
 8006360:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006364:	6813      	ldr	r3, [r2, #0]
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	1d1d      	adds	r5, r3, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6015      	str	r5, [r2, #0]
 800636e:	060a      	lsls	r2, r1, #24
 8006370:	d50b      	bpl.n	800638a <_printf_i+0x162>
 8006372:	07ca      	lsls	r2, r1, #31
 8006374:	bf44      	itt	mi
 8006376:	f041 0120 	orrmi.w	r1, r1, #32
 800637a:	6021      	strmi	r1, [r4, #0]
 800637c:	b91b      	cbnz	r3, 8006386 <_printf_i+0x15e>
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	f022 0220 	bic.w	r2, r2, #32
 8006384:	6022      	str	r2, [r4, #0]
 8006386:	2210      	movs	r2, #16
 8006388:	e7b7      	b.n	80062fa <_printf_i+0xd2>
 800638a:	064d      	lsls	r5, r1, #25
 800638c:	bf48      	it	mi
 800638e:	b29b      	uxthmi	r3, r3
 8006390:	e7ef      	b.n	8006372 <_printf_i+0x14a>
 8006392:	4665      	mov	r5, ip
 8006394:	fbb3 f1f2 	udiv	r1, r3, r2
 8006398:	fb02 3311 	mls	r3, r2, r1, r3
 800639c:	5cc3      	ldrb	r3, [r0, r3]
 800639e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063a2:	460b      	mov	r3, r1
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d1f5      	bne.n	8006394 <_printf_i+0x16c>
 80063a8:	e7b9      	b.n	800631e <_printf_i+0xf6>
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	6825      	ldr	r5, [r4, #0]
 80063ae:	6961      	ldr	r1, [r4, #20]
 80063b0:	1d18      	adds	r0, r3, #4
 80063b2:	6010      	str	r0, [r2, #0]
 80063b4:	0628      	lsls	r0, r5, #24
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	d501      	bpl.n	80063be <_printf_i+0x196>
 80063ba:	6019      	str	r1, [r3, #0]
 80063bc:	e002      	b.n	80063c4 <_printf_i+0x19c>
 80063be:	066a      	lsls	r2, r5, #25
 80063c0:	d5fb      	bpl.n	80063ba <_printf_i+0x192>
 80063c2:	8019      	strh	r1, [r3, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	4665      	mov	r5, ip
 80063ca:	e7b9      	b.n	8006340 <_printf_i+0x118>
 80063cc:	6813      	ldr	r3, [r2, #0]
 80063ce:	1d19      	adds	r1, r3, #4
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	681d      	ldr	r5, [r3, #0]
 80063d4:	6862      	ldr	r2, [r4, #4]
 80063d6:	2100      	movs	r1, #0
 80063d8:	4628      	mov	r0, r5
 80063da:	f7f9 ff11 	bl	8000200 <memchr>
 80063de:	b108      	cbz	r0, 80063e4 <_printf_i+0x1bc>
 80063e0:	1b40      	subs	r0, r0, r5
 80063e2:	6060      	str	r0, [r4, #4]
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	2300      	movs	r3, #0
 80063ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ee:	e7a7      	b.n	8006340 <_printf_i+0x118>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	462a      	mov	r2, r5
 80063f4:	4639      	mov	r1, r7
 80063f6:	4630      	mov	r0, r6
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d0aa      	beq.n	8006354 <_printf_i+0x12c>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	079b      	lsls	r3, r3, #30
 8006402:	d413      	bmi.n	800642c <_printf_i+0x204>
 8006404:	68e0      	ldr	r0, [r4, #12]
 8006406:	9b03      	ldr	r3, [sp, #12]
 8006408:	4298      	cmp	r0, r3
 800640a:	bfb8      	it	lt
 800640c:	4618      	movlt	r0, r3
 800640e:	e7a3      	b.n	8006358 <_printf_i+0x130>
 8006410:	2301      	movs	r3, #1
 8006412:	464a      	mov	r2, r9
 8006414:	4639      	mov	r1, r7
 8006416:	4630      	mov	r0, r6
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d09a      	beq.n	8006354 <_printf_i+0x12c>
 800641e:	3501      	adds	r5, #1
 8006420:	68e3      	ldr	r3, [r4, #12]
 8006422:	9a03      	ldr	r2, [sp, #12]
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	42ab      	cmp	r3, r5
 8006428:	dcf2      	bgt.n	8006410 <_printf_i+0x1e8>
 800642a:	e7eb      	b.n	8006404 <_printf_i+0x1dc>
 800642c:	2500      	movs	r5, #0
 800642e:	f104 0919 	add.w	r9, r4, #25
 8006432:	e7f5      	b.n	8006420 <_printf_i+0x1f8>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ac      	bne.n	8006392 <_printf_i+0x16a>
 8006438:	7803      	ldrb	r3, [r0, #0]
 800643a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800643e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006442:	e76c      	b.n	800631e <_printf_i+0xf6>
 8006444:	0800a4c2 	.word	0x0800a4c2
 8006448:	0800a4d3 	.word	0x0800a4d3

0800644c <_scanf_float>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	469a      	mov	sl, r3
 8006452:	688b      	ldr	r3, [r1, #8]
 8006454:	4616      	mov	r6, r2
 8006456:	1e5a      	subs	r2, r3, #1
 8006458:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800645c:	b087      	sub	sp, #28
 800645e:	bf83      	ittte	hi
 8006460:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006464:	189b      	addhi	r3, r3, r2
 8006466:	9301      	strhi	r3, [sp, #4]
 8006468:	2300      	movls	r3, #0
 800646a:	bf86      	itte	hi
 800646c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006470:	608b      	strhi	r3, [r1, #8]
 8006472:	9301      	strls	r3, [sp, #4]
 8006474:	680b      	ldr	r3, [r1, #0]
 8006476:	4688      	mov	r8, r1
 8006478:	f04f 0b00 	mov.w	fp, #0
 800647c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006480:	f848 3b1c 	str.w	r3, [r8], #28
 8006484:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006488:	4607      	mov	r7, r0
 800648a:	460c      	mov	r4, r1
 800648c:	4645      	mov	r5, r8
 800648e:	465a      	mov	r2, fp
 8006490:	46d9      	mov	r9, fp
 8006492:	f8cd b008 	str.w	fp, [sp, #8]
 8006496:	68a1      	ldr	r1, [r4, #8]
 8006498:	b181      	cbz	r1, 80064bc <_scanf_float+0x70>
 800649a:	6833      	ldr	r3, [r6, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b49      	cmp	r3, #73	; 0x49
 80064a0:	d071      	beq.n	8006586 <_scanf_float+0x13a>
 80064a2:	d84d      	bhi.n	8006540 <_scanf_float+0xf4>
 80064a4:	2b39      	cmp	r3, #57	; 0x39
 80064a6:	d840      	bhi.n	800652a <_scanf_float+0xde>
 80064a8:	2b31      	cmp	r3, #49	; 0x31
 80064aa:	f080 8088 	bcs.w	80065be <_scanf_float+0x172>
 80064ae:	2b2d      	cmp	r3, #45	; 0x2d
 80064b0:	f000 8090 	beq.w	80065d4 <_scanf_float+0x188>
 80064b4:	d815      	bhi.n	80064e2 <_scanf_float+0x96>
 80064b6:	2b2b      	cmp	r3, #43	; 0x2b
 80064b8:	f000 808c 	beq.w	80065d4 <_scanf_float+0x188>
 80064bc:	f1b9 0f00 	cmp.w	r9, #0
 80064c0:	d003      	beq.n	80064ca <_scanf_float+0x7e>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	3a01      	subs	r2, #1
 80064cc:	2a01      	cmp	r2, #1
 80064ce:	f200 80ea 	bhi.w	80066a6 <_scanf_float+0x25a>
 80064d2:	4545      	cmp	r5, r8
 80064d4:	f200 80dc 	bhi.w	8006690 <_scanf_float+0x244>
 80064d8:	2601      	movs	r6, #1
 80064da:	4630      	mov	r0, r6
 80064dc:	b007      	add	sp, #28
 80064de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e2:	2b2e      	cmp	r3, #46	; 0x2e
 80064e4:	f000 809f 	beq.w	8006626 <_scanf_float+0x1da>
 80064e8:	2b30      	cmp	r3, #48	; 0x30
 80064ea:	d1e7      	bne.n	80064bc <_scanf_float+0x70>
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	f410 7f80 	tst.w	r0, #256	; 0x100
 80064f2:	d064      	beq.n	80065be <_scanf_float+0x172>
 80064f4:	9b01      	ldr	r3, [sp, #4]
 80064f6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80064fa:	6020      	str	r0, [r4, #0]
 80064fc:	f109 0901 	add.w	r9, r9, #1
 8006500:	b11b      	cbz	r3, 800650a <_scanf_float+0xbe>
 8006502:	3b01      	subs	r3, #1
 8006504:	3101      	adds	r1, #1
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	60a1      	str	r1, [r4, #8]
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	3b01      	subs	r3, #1
 800650e:	60a3      	str	r3, [r4, #8]
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	3301      	adds	r3, #1
 8006514:	6123      	str	r3, [r4, #16]
 8006516:	6873      	ldr	r3, [r6, #4]
 8006518:	3b01      	subs	r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	6073      	str	r3, [r6, #4]
 800651e:	f340 80ac 	ble.w	800667a <_scanf_float+0x22e>
 8006522:	6833      	ldr	r3, [r6, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	e7b5      	b.n	8006496 <_scanf_float+0x4a>
 800652a:	2b45      	cmp	r3, #69	; 0x45
 800652c:	f000 8085 	beq.w	800663a <_scanf_float+0x1ee>
 8006530:	2b46      	cmp	r3, #70	; 0x46
 8006532:	d06a      	beq.n	800660a <_scanf_float+0x1be>
 8006534:	2b41      	cmp	r3, #65	; 0x41
 8006536:	d1c1      	bne.n	80064bc <_scanf_float+0x70>
 8006538:	2a01      	cmp	r2, #1
 800653a:	d1bf      	bne.n	80064bc <_scanf_float+0x70>
 800653c:	2202      	movs	r2, #2
 800653e:	e046      	b.n	80065ce <_scanf_float+0x182>
 8006540:	2b65      	cmp	r3, #101	; 0x65
 8006542:	d07a      	beq.n	800663a <_scanf_float+0x1ee>
 8006544:	d818      	bhi.n	8006578 <_scanf_float+0x12c>
 8006546:	2b54      	cmp	r3, #84	; 0x54
 8006548:	d066      	beq.n	8006618 <_scanf_float+0x1cc>
 800654a:	d811      	bhi.n	8006570 <_scanf_float+0x124>
 800654c:	2b4e      	cmp	r3, #78	; 0x4e
 800654e:	d1b5      	bne.n	80064bc <_scanf_float+0x70>
 8006550:	2a00      	cmp	r2, #0
 8006552:	d146      	bne.n	80065e2 <_scanf_float+0x196>
 8006554:	f1b9 0f00 	cmp.w	r9, #0
 8006558:	d145      	bne.n	80065e6 <_scanf_float+0x19a>
 800655a:	6821      	ldr	r1, [r4, #0]
 800655c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006560:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006564:	d13f      	bne.n	80065e6 <_scanf_float+0x19a>
 8006566:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800656a:	6021      	str	r1, [r4, #0]
 800656c:	2201      	movs	r2, #1
 800656e:	e02e      	b.n	80065ce <_scanf_float+0x182>
 8006570:	2b59      	cmp	r3, #89	; 0x59
 8006572:	d01e      	beq.n	80065b2 <_scanf_float+0x166>
 8006574:	2b61      	cmp	r3, #97	; 0x61
 8006576:	e7de      	b.n	8006536 <_scanf_float+0xea>
 8006578:	2b6e      	cmp	r3, #110	; 0x6e
 800657a:	d0e9      	beq.n	8006550 <_scanf_float+0x104>
 800657c:	d815      	bhi.n	80065aa <_scanf_float+0x15e>
 800657e:	2b66      	cmp	r3, #102	; 0x66
 8006580:	d043      	beq.n	800660a <_scanf_float+0x1be>
 8006582:	2b69      	cmp	r3, #105	; 0x69
 8006584:	d19a      	bne.n	80064bc <_scanf_float+0x70>
 8006586:	f1bb 0f00 	cmp.w	fp, #0
 800658a:	d138      	bne.n	80065fe <_scanf_float+0x1b2>
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	d197      	bne.n	80064c2 <_scanf_float+0x76>
 8006592:	6821      	ldr	r1, [r4, #0]
 8006594:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006598:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800659c:	d195      	bne.n	80064ca <_scanf_float+0x7e>
 800659e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80065a2:	6021      	str	r1, [r4, #0]
 80065a4:	f04f 0b01 	mov.w	fp, #1
 80065a8:	e011      	b.n	80065ce <_scanf_float+0x182>
 80065aa:	2b74      	cmp	r3, #116	; 0x74
 80065ac:	d034      	beq.n	8006618 <_scanf_float+0x1cc>
 80065ae:	2b79      	cmp	r3, #121	; 0x79
 80065b0:	d184      	bne.n	80064bc <_scanf_float+0x70>
 80065b2:	f1bb 0f07 	cmp.w	fp, #7
 80065b6:	d181      	bne.n	80064bc <_scanf_float+0x70>
 80065b8:	f04f 0b08 	mov.w	fp, #8
 80065bc:	e007      	b.n	80065ce <_scanf_float+0x182>
 80065be:	eb12 0f0b 	cmn.w	r2, fp
 80065c2:	f47f af7b 	bne.w	80064bc <_scanf_float+0x70>
 80065c6:	6821      	ldr	r1, [r4, #0]
 80065c8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80065cc:	6021      	str	r1, [r4, #0]
 80065ce:	702b      	strb	r3, [r5, #0]
 80065d0:	3501      	adds	r5, #1
 80065d2:	e79a      	b.n	800650a <_scanf_float+0xbe>
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	0608      	lsls	r0, r1, #24
 80065d8:	f57f af70 	bpl.w	80064bc <_scanf_float+0x70>
 80065dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065e0:	e7f4      	b.n	80065cc <_scanf_float+0x180>
 80065e2:	2a02      	cmp	r2, #2
 80065e4:	d047      	beq.n	8006676 <_scanf_float+0x22a>
 80065e6:	f1bb 0f01 	cmp.w	fp, #1
 80065ea:	d003      	beq.n	80065f4 <_scanf_float+0x1a8>
 80065ec:	f1bb 0f04 	cmp.w	fp, #4
 80065f0:	f47f af64 	bne.w	80064bc <_scanf_float+0x70>
 80065f4:	f10b 0b01 	add.w	fp, fp, #1
 80065f8:	fa5f fb8b 	uxtb.w	fp, fp
 80065fc:	e7e7      	b.n	80065ce <_scanf_float+0x182>
 80065fe:	f1bb 0f03 	cmp.w	fp, #3
 8006602:	d0f7      	beq.n	80065f4 <_scanf_float+0x1a8>
 8006604:	f1bb 0f05 	cmp.w	fp, #5
 8006608:	e7f2      	b.n	80065f0 <_scanf_float+0x1a4>
 800660a:	f1bb 0f02 	cmp.w	fp, #2
 800660e:	f47f af55 	bne.w	80064bc <_scanf_float+0x70>
 8006612:	f04f 0b03 	mov.w	fp, #3
 8006616:	e7da      	b.n	80065ce <_scanf_float+0x182>
 8006618:	f1bb 0f06 	cmp.w	fp, #6
 800661c:	f47f af4e 	bne.w	80064bc <_scanf_float+0x70>
 8006620:	f04f 0b07 	mov.w	fp, #7
 8006624:	e7d3      	b.n	80065ce <_scanf_float+0x182>
 8006626:	6821      	ldr	r1, [r4, #0]
 8006628:	0588      	lsls	r0, r1, #22
 800662a:	f57f af47 	bpl.w	80064bc <_scanf_float+0x70>
 800662e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006632:	6021      	str	r1, [r4, #0]
 8006634:	f8cd 9008 	str.w	r9, [sp, #8]
 8006638:	e7c9      	b.n	80065ce <_scanf_float+0x182>
 800663a:	6821      	ldr	r1, [r4, #0]
 800663c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006640:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006644:	d006      	beq.n	8006654 <_scanf_float+0x208>
 8006646:	0548      	lsls	r0, r1, #21
 8006648:	f57f af38 	bpl.w	80064bc <_scanf_float+0x70>
 800664c:	f1b9 0f00 	cmp.w	r9, #0
 8006650:	f43f af3b 	beq.w	80064ca <_scanf_float+0x7e>
 8006654:	0588      	lsls	r0, r1, #22
 8006656:	bf58      	it	pl
 8006658:	9802      	ldrpl	r0, [sp, #8]
 800665a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800665e:	bf58      	it	pl
 8006660:	eba9 0000 	subpl.w	r0, r9, r0
 8006664:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006668:	bf58      	it	pl
 800666a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800666e:	6021      	str	r1, [r4, #0]
 8006670:	f04f 0900 	mov.w	r9, #0
 8006674:	e7ab      	b.n	80065ce <_scanf_float+0x182>
 8006676:	2203      	movs	r2, #3
 8006678:	e7a9      	b.n	80065ce <_scanf_float+0x182>
 800667a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800667e:	9205      	str	r2, [sp, #20]
 8006680:	4631      	mov	r1, r6
 8006682:	4638      	mov	r0, r7
 8006684:	4798      	blx	r3
 8006686:	9a05      	ldr	r2, [sp, #20]
 8006688:	2800      	cmp	r0, #0
 800668a:	f43f af04 	beq.w	8006496 <_scanf_float+0x4a>
 800668e:	e715      	b.n	80064bc <_scanf_float+0x70>
 8006690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006694:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006698:	4632      	mov	r2, r6
 800669a:	4638      	mov	r0, r7
 800669c:	4798      	blx	r3
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	e715      	b.n	80064d2 <_scanf_float+0x86>
 80066a6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80066aa:	2b06      	cmp	r3, #6
 80066ac:	d80a      	bhi.n	80066c4 <_scanf_float+0x278>
 80066ae:	f1bb 0f02 	cmp.w	fp, #2
 80066b2:	d968      	bls.n	8006786 <_scanf_float+0x33a>
 80066b4:	f1ab 0b03 	sub.w	fp, fp, #3
 80066b8:	fa5f fb8b 	uxtb.w	fp, fp
 80066bc:	eba5 0b0b 	sub.w	fp, r5, fp
 80066c0:	455d      	cmp	r5, fp
 80066c2:	d14b      	bne.n	800675c <_scanf_float+0x310>
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	05da      	lsls	r2, r3, #23
 80066c8:	d51f      	bpl.n	800670a <_scanf_float+0x2be>
 80066ca:	055b      	lsls	r3, r3, #21
 80066cc:	d468      	bmi.n	80067a0 <_scanf_float+0x354>
 80066ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	2965      	cmp	r1, #101	; 0x65
 80066d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80066da:	f105 3bff 	add.w	fp, r5, #4294967295
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	d00d      	beq.n	80066fe <_scanf_float+0x2b2>
 80066e2:	2945      	cmp	r1, #69	; 0x45
 80066e4:	d00b      	beq.n	80066fe <_scanf_float+0x2b2>
 80066e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ea:	4632      	mov	r2, r6
 80066ec:	4638      	mov	r0, r7
 80066ee:	4798      	blx	r3
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	f1a5 0b02 	sub.w	fp, r5, #2
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006702:	4632      	mov	r2, r6
 8006704:	4638      	mov	r0, r7
 8006706:	4798      	blx	r3
 8006708:	465d      	mov	r5, fp
 800670a:	6826      	ldr	r6, [r4, #0]
 800670c:	f016 0610 	ands.w	r6, r6, #16
 8006710:	d17a      	bne.n	8006808 <_scanf_float+0x3bc>
 8006712:	702e      	strb	r6, [r5, #0]
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d142      	bne.n	80067a6 <_scanf_float+0x35a>
 8006720:	9b02      	ldr	r3, [sp, #8]
 8006722:	eba9 0303 	sub.w	r3, r9, r3
 8006726:	425a      	negs	r2, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d149      	bne.n	80067c0 <_scanf_float+0x374>
 800672c:	2200      	movs	r2, #0
 800672e:	4641      	mov	r1, r8
 8006730:	4638      	mov	r0, r7
 8006732:	f000 feb1 	bl	8007498 <_strtod_r>
 8006736:	6825      	ldr	r5, [r4, #0]
 8006738:	f8da 3000 	ldr.w	r3, [sl]
 800673c:	f015 0f02 	tst.w	r5, #2
 8006740:	f103 0204 	add.w	r2, r3, #4
 8006744:	ec59 8b10 	vmov	r8, r9, d0
 8006748:	f8ca 2000 	str.w	r2, [sl]
 800674c:	d043      	beq.n	80067d6 <_scanf_float+0x38a>
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	e9c3 8900 	strd	r8, r9, [r3]
 8006754:	68e3      	ldr	r3, [r4, #12]
 8006756:	3301      	adds	r3, #1
 8006758:	60e3      	str	r3, [r4, #12]
 800675a:	e6be      	b.n	80064da <_scanf_float+0x8e>
 800675c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006760:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006764:	4632      	mov	r2, r6
 8006766:	4638      	mov	r0, r7
 8006768:	4798      	blx	r3
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	3b01      	subs	r3, #1
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	e7a6      	b.n	80066c0 <_scanf_float+0x274>
 8006772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006776:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800677a:	4632      	mov	r2, r6
 800677c:	4638      	mov	r0, r7
 800677e:	4798      	blx	r3
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	3b01      	subs	r3, #1
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	4545      	cmp	r5, r8
 8006788:	d8f3      	bhi.n	8006772 <_scanf_float+0x326>
 800678a:	e6a5      	b.n	80064d8 <_scanf_float+0x8c>
 800678c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006790:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006794:	4632      	mov	r2, r6
 8006796:	4638      	mov	r0, r7
 8006798:	4798      	blx	r3
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	3b01      	subs	r3, #1
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	4545      	cmp	r5, r8
 80067a2:	d8f3      	bhi.n	800678c <_scanf_float+0x340>
 80067a4:	e698      	b.n	80064d8 <_scanf_float+0x8c>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0bf      	beq.n	800672c <_scanf_float+0x2e0>
 80067ac:	9904      	ldr	r1, [sp, #16]
 80067ae:	230a      	movs	r3, #10
 80067b0:	4632      	mov	r2, r6
 80067b2:	3101      	adds	r1, #1
 80067b4:	4638      	mov	r0, r7
 80067b6:	f000 ff0f 	bl	80075d8 <_strtol_r>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	9d04      	ldr	r5, [sp, #16]
 80067be:	1ac2      	subs	r2, r0, r3
 80067c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80067c4:	429d      	cmp	r5, r3
 80067c6:	bf28      	it	cs
 80067c8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80067cc:	490f      	ldr	r1, [pc, #60]	; (800680c <_scanf_float+0x3c0>)
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f824 	bl	800681c <siprintf>
 80067d4:	e7aa      	b.n	800672c <_scanf_float+0x2e0>
 80067d6:	f015 0504 	ands.w	r5, r5, #4
 80067da:	d1b8      	bne.n	800674e <_scanf_float+0x302>
 80067dc:	681f      	ldr	r7, [r3, #0]
 80067de:	ee10 2a10 	vmov	r2, s0
 80067e2:	464b      	mov	r3, r9
 80067e4:	ee10 0a10 	vmov	r0, s0
 80067e8:	4649      	mov	r1, r9
 80067ea:	f7fa f9af 	bl	8000b4c <__aeabi_dcmpun>
 80067ee:	b128      	cbz	r0, 80067fc <_scanf_float+0x3b0>
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 f80d 	bl	8006810 <nanf>
 80067f6:	ed87 0a00 	vstr	s0, [r7]
 80067fa:	e7ab      	b.n	8006754 <_scanf_float+0x308>
 80067fc:	4640      	mov	r0, r8
 80067fe:	4649      	mov	r1, r9
 8006800:	f7fa fa02 	bl	8000c08 <__aeabi_d2f>
 8006804:	6038      	str	r0, [r7, #0]
 8006806:	e7a5      	b.n	8006754 <_scanf_float+0x308>
 8006808:	2600      	movs	r6, #0
 800680a:	e666      	b.n	80064da <_scanf_float+0x8e>
 800680c:	0800a4e4 	.word	0x0800a4e4

08006810 <nanf>:
 8006810:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006818 <nanf+0x8>
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	7fc00000 	.word	0x7fc00000

0800681c <siprintf>:
 800681c:	b40e      	push	{r1, r2, r3}
 800681e:	b500      	push	{lr}
 8006820:	b09c      	sub	sp, #112	; 0x70
 8006822:	ab1d      	add	r3, sp, #116	; 0x74
 8006824:	9002      	str	r0, [sp, #8]
 8006826:	9006      	str	r0, [sp, #24]
 8006828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800682c:	4809      	ldr	r0, [pc, #36]	; (8006854 <siprintf+0x38>)
 800682e:	9107      	str	r1, [sp, #28]
 8006830:	9104      	str	r1, [sp, #16]
 8006832:	4909      	ldr	r1, [pc, #36]	; (8006858 <siprintf+0x3c>)
 8006834:	f853 2b04 	ldr.w	r2, [r3], #4
 8006838:	9105      	str	r1, [sp, #20]
 800683a:	6800      	ldr	r0, [r0, #0]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	a902      	add	r1, sp, #8
 8006840:	f002 fda4 	bl	800938c <_svfiprintf_r>
 8006844:	9b02      	ldr	r3, [sp, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	b01c      	add	sp, #112	; 0x70
 800684c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006850:	b003      	add	sp, #12
 8006852:	4770      	bx	lr
 8006854:	200000c4 	.word	0x200000c4
 8006858:	ffff0208 	.word	0xffff0208

0800685c <strchr>:
 800685c:	b2c9      	uxtb	r1, r1
 800685e:	4603      	mov	r3, r0
 8006860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006864:	b11a      	cbz	r2, 800686e <strchr+0x12>
 8006866:	428a      	cmp	r2, r1
 8006868:	d1f9      	bne.n	800685e <strchr+0x2>
 800686a:	4618      	mov	r0, r3
 800686c:	4770      	bx	lr
 800686e:	2900      	cmp	r1, #0
 8006870:	bf18      	it	ne
 8006872:	2300      	movne	r3, #0
 8006874:	e7f9      	b.n	800686a <strchr+0xe>

08006876 <sulp>:
 8006876:	b570      	push	{r4, r5, r6, lr}
 8006878:	4604      	mov	r4, r0
 800687a:	460d      	mov	r5, r1
 800687c:	ec45 4b10 	vmov	d0, r4, r5
 8006880:	4616      	mov	r6, r2
 8006882:	f002 fb3f 	bl	8008f04 <__ulp>
 8006886:	ec51 0b10 	vmov	r0, r1, d0
 800688a:	b17e      	cbz	r6, 80068ac <sulp+0x36>
 800688c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006890:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006894:	2b00      	cmp	r3, #0
 8006896:	dd09      	ble.n	80068ac <sulp+0x36>
 8006898:	051b      	lsls	r3, r3, #20
 800689a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800689e:	2400      	movs	r4, #0
 80068a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068a4:	4622      	mov	r2, r4
 80068a6:	462b      	mov	r3, r5
 80068a8:	f7f9 feb6 	bl	8000618 <__aeabi_dmul>
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080068b0 <_strtod_l>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	461f      	mov	r7, r3
 80068b6:	b0a1      	sub	sp, #132	; 0x84
 80068b8:	2300      	movs	r3, #0
 80068ba:	4681      	mov	r9, r0
 80068bc:	4638      	mov	r0, r7
 80068be:	460e      	mov	r6, r1
 80068c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80068c2:	931c      	str	r3, [sp, #112]	; 0x70
 80068c4:	f002 f81d 	bl	8008902 <__localeconv_l>
 80068c8:	4680      	mov	r8, r0
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	f7f9 fc8a 	bl	80001e4 <strlen>
 80068d0:	f04f 0a00 	mov.w	sl, #0
 80068d4:	4604      	mov	r4, r0
 80068d6:	f04f 0b00 	mov.w	fp, #0
 80068da:	961b      	str	r6, [sp, #108]	; 0x6c
 80068dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068de:	781a      	ldrb	r2, [r3, #0]
 80068e0:	2a0d      	cmp	r2, #13
 80068e2:	d832      	bhi.n	800694a <_strtod_l+0x9a>
 80068e4:	2a09      	cmp	r2, #9
 80068e6:	d236      	bcs.n	8006956 <_strtod_l+0xa6>
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	d03e      	beq.n	800696a <_strtod_l+0xba>
 80068ec:	2300      	movs	r3, #0
 80068ee:	930d      	str	r3, [sp, #52]	; 0x34
 80068f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80068f2:	782b      	ldrb	r3, [r5, #0]
 80068f4:	2b30      	cmp	r3, #48	; 0x30
 80068f6:	f040 80ac 	bne.w	8006a52 <_strtod_l+0x1a2>
 80068fa:	786b      	ldrb	r3, [r5, #1]
 80068fc:	2b58      	cmp	r3, #88	; 0x58
 80068fe:	d001      	beq.n	8006904 <_strtod_l+0x54>
 8006900:	2b78      	cmp	r3, #120	; 0x78
 8006902:	d167      	bne.n	80069d4 <_strtod_l+0x124>
 8006904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	ab1c      	add	r3, sp, #112	; 0x70
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	9702      	str	r7, [sp, #8]
 800690e:	ab1d      	add	r3, sp, #116	; 0x74
 8006910:	4a88      	ldr	r2, [pc, #544]	; (8006b34 <_strtod_l+0x284>)
 8006912:	a91b      	add	r1, sp, #108	; 0x6c
 8006914:	4648      	mov	r0, r9
 8006916:	f001 fd1a 	bl	800834e <__gethex>
 800691a:	f010 0407 	ands.w	r4, r0, #7
 800691e:	4606      	mov	r6, r0
 8006920:	d005      	beq.n	800692e <_strtod_l+0x7e>
 8006922:	2c06      	cmp	r4, #6
 8006924:	d12b      	bne.n	800697e <_strtod_l+0xce>
 8006926:	3501      	adds	r5, #1
 8006928:	2300      	movs	r3, #0
 800692a:	951b      	str	r5, [sp, #108]	; 0x6c
 800692c:	930d      	str	r3, [sp, #52]	; 0x34
 800692e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 859a 	bne.w	800746a <_strtod_l+0xbba>
 8006936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006938:	b1e3      	cbz	r3, 8006974 <_strtod_l+0xc4>
 800693a:	4652      	mov	r2, sl
 800693c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006940:	ec43 2b10 	vmov	d0, r2, r3
 8006944:	b021      	add	sp, #132	; 0x84
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	2a2b      	cmp	r2, #43	; 0x2b
 800694c:	d015      	beq.n	800697a <_strtod_l+0xca>
 800694e:	2a2d      	cmp	r2, #45	; 0x2d
 8006950:	d004      	beq.n	800695c <_strtod_l+0xac>
 8006952:	2a20      	cmp	r2, #32
 8006954:	d1ca      	bne.n	80068ec <_strtod_l+0x3c>
 8006956:	3301      	adds	r3, #1
 8006958:	931b      	str	r3, [sp, #108]	; 0x6c
 800695a:	e7bf      	b.n	80068dc <_strtod_l+0x2c>
 800695c:	2201      	movs	r2, #1
 800695e:	920d      	str	r2, [sp, #52]	; 0x34
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	921b      	str	r2, [sp, #108]	; 0x6c
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1c2      	bne.n	80068f0 <_strtod_l+0x40>
 800696a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800696c:	961b      	str	r6, [sp, #108]	; 0x6c
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 8579 	bne.w	8007466 <_strtod_l+0xbb6>
 8006974:	4652      	mov	r2, sl
 8006976:	465b      	mov	r3, fp
 8006978:	e7e2      	b.n	8006940 <_strtod_l+0x90>
 800697a:	2200      	movs	r2, #0
 800697c:	e7ef      	b.n	800695e <_strtod_l+0xae>
 800697e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006980:	b13a      	cbz	r2, 8006992 <_strtod_l+0xe2>
 8006982:	2135      	movs	r1, #53	; 0x35
 8006984:	a81e      	add	r0, sp, #120	; 0x78
 8006986:	f002 fbb5 	bl	80090f4 <__copybits>
 800698a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800698c:	4648      	mov	r0, r9
 800698e:	f002 f822 	bl	80089d6 <_Bfree>
 8006992:	3c01      	subs	r4, #1
 8006994:	2c04      	cmp	r4, #4
 8006996:	d806      	bhi.n	80069a6 <_strtod_l+0xf6>
 8006998:	e8df f004 	tbb	[pc, r4]
 800699c:	1714030a 	.word	0x1714030a
 80069a0:	0a          	.byte	0x0a
 80069a1:	00          	.byte	0x00
 80069a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80069a6:	0730      	lsls	r0, r6, #28
 80069a8:	d5c1      	bpl.n	800692e <_strtod_l+0x7e>
 80069aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80069ae:	e7be      	b.n	800692e <_strtod_l+0x7e>
 80069b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80069b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80069b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069c2:	e7f0      	b.n	80069a6 <_strtod_l+0xf6>
 80069c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006b38 <_strtod_l+0x288>
 80069c8:	e7ed      	b.n	80069a6 <_strtod_l+0xf6>
 80069ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80069ce:	f04f 3aff 	mov.w	sl, #4294967295
 80069d2:	e7e8      	b.n	80069a6 <_strtod_l+0xf6>
 80069d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b30      	cmp	r3, #48	; 0x30
 80069de:	d0f9      	beq.n	80069d4 <_strtod_l+0x124>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0a4      	beq.n	800692e <_strtod_l+0x7e>
 80069e4:	2301      	movs	r3, #1
 80069e6:	2500      	movs	r5, #0
 80069e8:	9306      	str	r3, [sp, #24]
 80069ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ec:	9308      	str	r3, [sp, #32]
 80069ee:	9507      	str	r5, [sp, #28]
 80069f0:	9505      	str	r5, [sp, #20]
 80069f2:	220a      	movs	r2, #10
 80069f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80069f6:	7807      	ldrb	r7, [r0, #0]
 80069f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80069fc:	b2d9      	uxtb	r1, r3
 80069fe:	2909      	cmp	r1, #9
 8006a00:	d929      	bls.n	8006a56 <_strtod_l+0x1a6>
 8006a02:	4622      	mov	r2, r4
 8006a04:	f8d8 1000 	ldr.w	r1, [r8]
 8006a08:	f002 fdc8 	bl	800959c <strncmp>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d031      	beq.n	8006a74 <_strtod_l+0x1c4>
 8006a10:	2000      	movs	r0, #0
 8006a12:	9c05      	ldr	r4, [sp, #20]
 8006a14:	9004      	str	r0, [sp, #16]
 8006a16:	463b      	mov	r3, r7
 8006a18:	4602      	mov	r2, r0
 8006a1a:	2b65      	cmp	r3, #101	; 0x65
 8006a1c:	d001      	beq.n	8006a22 <_strtod_l+0x172>
 8006a1e:	2b45      	cmp	r3, #69	; 0x45
 8006a20:	d114      	bne.n	8006a4c <_strtod_l+0x19c>
 8006a22:	b924      	cbnz	r4, 8006a2e <_strtod_l+0x17e>
 8006a24:	b910      	cbnz	r0, 8006a2c <_strtod_l+0x17c>
 8006a26:	9b06      	ldr	r3, [sp, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d09e      	beq.n	800696a <_strtod_l+0xba>
 8006a2c:	2400      	movs	r4, #0
 8006a2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006a30:	1c73      	adds	r3, r6, #1
 8006a32:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a34:	7873      	ldrb	r3, [r6, #1]
 8006a36:	2b2b      	cmp	r3, #43	; 0x2b
 8006a38:	d078      	beq.n	8006b2c <_strtod_l+0x27c>
 8006a3a:	2b2d      	cmp	r3, #45	; 0x2d
 8006a3c:	d070      	beq.n	8006b20 <_strtod_l+0x270>
 8006a3e:	f04f 0c00 	mov.w	ip, #0
 8006a42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006a46:	2f09      	cmp	r7, #9
 8006a48:	d97c      	bls.n	8006b44 <_strtod_l+0x294>
 8006a4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006a4c:	f04f 0e00 	mov.w	lr, #0
 8006a50:	e09a      	b.n	8006b88 <_strtod_l+0x2d8>
 8006a52:	2300      	movs	r3, #0
 8006a54:	e7c7      	b.n	80069e6 <_strtod_l+0x136>
 8006a56:	9905      	ldr	r1, [sp, #20]
 8006a58:	2908      	cmp	r1, #8
 8006a5a:	bfdd      	ittte	le
 8006a5c:	9907      	ldrle	r1, [sp, #28]
 8006a5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a62:	9307      	strle	r3, [sp, #28]
 8006a64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006a68:	9b05      	ldr	r3, [sp, #20]
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	901b      	str	r0, [sp, #108]	; 0x6c
 8006a72:	e7bf      	b.n	80069f4 <_strtod_l+0x144>
 8006a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a76:	191a      	adds	r2, r3, r4
 8006a78:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a7a:	9a05      	ldr	r2, [sp, #20]
 8006a7c:	5d1b      	ldrb	r3, [r3, r4]
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	d037      	beq.n	8006af2 <_strtod_l+0x242>
 8006a82:	9c05      	ldr	r4, [sp, #20]
 8006a84:	4602      	mov	r2, r0
 8006a86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006a8a:	2909      	cmp	r1, #9
 8006a8c:	d913      	bls.n	8006ab6 <_strtod_l+0x206>
 8006a8e:	2101      	movs	r1, #1
 8006a90:	9104      	str	r1, [sp, #16]
 8006a92:	e7c2      	b.n	8006a1a <_strtod_l+0x16a>
 8006a94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	2b30      	cmp	r3, #48	; 0x30
 8006aa0:	d0f8      	beq.n	8006a94 <_strtod_l+0x1e4>
 8006aa2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006aa6:	2a08      	cmp	r2, #8
 8006aa8:	f200 84e4 	bhi.w	8007474 <_strtod_l+0xbc4>
 8006aac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006aae:	9208      	str	r2, [sp, #32]
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006aba:	f100 0101 	add.w	r1, r0, #1
 8006abe:	d012      	beq.n	8006ae6 <_strtod_l+0x236>
 8006ac0:	440a      	add	r2, r1
 8006ac2:	eb00 0c04 	add.w	ip, r0, r4
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	270a      	movs	r7, #10
 8006aca:	458c      	cmp	ip, r1
 8006acc:	d113      	bne.n	8006af6 <_strtod_l+0x246>
 8006ace:	1821      	adds	r1, r4, r0
 8006ad0:	2908      	cmp	r1, #8
 8006ad2:	f104 0401 	add.w	r4, r4, #1
 8006ad6:	4404      	add	r4, r0
 8006ad8:	dc19      	bgt.n	8006b0e <_strtod_l+0x25e>
 8006ada:	9b07      	ldr	r3, [sp, #28]
 8006adc:	210a      	movs	r1, #10
 8006ade:	fb01 e303 	mla	r3, r1, r3, lr
 8006ae2:	9307      	str	r3, [sp, #28]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ae8:	1c58      	adds	r0, r3, #1
 8006aea:	901b      	str	r0, [sp, #108]	; 0x6c
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	4608      	mov	r0, r1
 8006af0:	e7c9      	b.n	8006a86 <_strtod_l+0x1d6>
 8006af2:	9805      	ldr	r0, [sp, #20]
 8006af4:	e7d3      	b.n	8006a9e <_strtod_l+0x1ee>
 8006af6:	2908      	cmp	r1, #8
 8006af8:	f101 0101 	add.w	r1, r1, #1
 8006afc:	dc03      	bgt.n	8006b06 <_strtod_l+0x256>
 8006afe:	9b07      	ldr	r3, [sp, #28]
 8006b00:	437b      	muls	r3, r7
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	e7e1      	b.n	8006aca <_strtod_l+0x21a>
 8006b06:	2910      	cmp	r1, #16
 8006b08:	bfd8      	it	le
 8006b0a:	437d      	mulle	r5, r7
 8006b0c:	e7dd      	b.n	8006aca <_strtod_l+0x21a>
 8006b0e:	2c10      	cmp	r4, #16
 8006b10:	bfdc      	itt	le
 8006b12:	210a      	movle	r1, #10
 8006b14:	fb01 e505 	mlale	r5, r1, r5, lr
 8006b18:	e7e4      	b.n	8006ae4 <_strtod_l+0x234>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	e781      	b.n	8006a24 <_strtod_l+0x174>
 8006b20:	f04f 0c01 	mov.w	ip, #1
 8006b24:	1cb3      	adds	r3, r6, #2
 8006b26:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b28:	78b3      	ldrb	r3, [r6, #2]
 8006b2a:	e78a      	b.n	8006a42 <_strtod_l+0x192>
 8006b2c:	f04f 0c00 	mov.w	ip, #0
 8006b30:	e7f8      	b.n	8006b24 <_strtod_l+0x274>
 8006b32:	bf00      	nop
 8006b34:	0800a4ec 	.word	0x0800a4ec
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b3e:	1c5f      	adds	r7, r3, #1
 8006b40:	971b      	str	r7, [sp, #108]	; 0x6c
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b30      	cmp	r3, #48	; 0x30
 8006b46:	d0f9      	beq.n	8006b3c <_strtod_l+0x28c>
 8006b48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006b4c:	2f08      	cmp	r7, #8
 8006b4e:	f63f af7d 	bhi.w	8006a4c <_strtod_l+0x19c>
 8006b52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006b56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b58:	930a      	str	r3, [sp, #40]	; 0x28
 8006b5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b5c:	1c5f      	adds	r7, r3, #1
 8006b5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006b66:	f1b8 0f09 	cmp.w	r8, #9
 8006b6a:	d937      	bls.n	8006bdc <_strtod_l+0x32c>
 8006b6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b6e:	1a7f      	subs	r7, r7, r1
 8006b70:	2f08      	cmp	r7, #8
 8006b72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006b76:	dc37      	bgt.n	8006be8 <_strtod_l+0x338>
 8006b78:	45be      	cmp	lr, r7
 8006b7a:	bfa8      	it	ge
 8006b7c:	46be      	movge	lr, r7
 8006b7e:	f1bc 0f00 	cmp.w	ip, #0
 8006b82:	d001      	beq.n	8006b88 <_strtod_l+0x2d8>
 8006b84:	f1ce 0e00 	rsb	lr, lr, #0
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d151      	bne.n	8006c30 <_strtod_l+0x380>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f47f aece 	bne.w	800692e <_strtod_l+0x7e>
 8006b92:	9a06      	ldr	r2, [sp, #24]
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	f47f aeca 	bne.w	800692e <_strtod_l+0x7e>
 8006b9a:	9a04      	ldr	r2, [sp, #16]
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	f47f aee4 	bne.w	800696a <_strtod_l+0xba>
 8006ba2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ba4:	d027      	beq.n	8006bf6 <_strtod_l+0x346>
 8006ba6:	dc21      	bgt.n	8006bec <_strtod_l+0x33c>
 8006ba8:	2b49      	cmp	r3, #73	; 0x49
 8006baa:	f47f aede 	bne.w	800696a <_strtod_l+0xba>
 8006bae:	49a0      	ldr	r1, [pc, #640]	; (8006e30 <_strtod_l+0x580>)
 8006bb0:	a81b      	add	r0, sp, #108	; 0x6c
 8006bb2:	f001 fdff 	bl	80087b4 <__match>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f43f aed7 	beq.w	800696a <_strtod_l+0xba>
 8006bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bbe:	499d      	ldr	r1, [pc, #628]	; (8006e34 <_strtod_l+0x584>)
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	a81b      	add	r0, sp, #108	; 0x6c
 8006bc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bc6:	f001 fdf5 	bl	80087b4 <__match>
 8006bca:	b910      	cbnz	r0, 8006bd2 <_strtod_l+0x322>
 8006bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bce:	3301      	adds	r3, #1
 8006bd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006e48 <_strtod_l+0x598>
 8006bd6:	f04f 0a00 	mov.w	sl, #0
 8006bda:	e6a8      	b.n	800692e <_strtod_l+0x7e>
 8006bdc:	210a      	movs	r1, #10
 8006bde:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006be2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006be6:	e7b8      	b.n	8006b5a <_strtod_l+0x2aa>
 8006be8:	46be      	mov	lr, r7
 8006bea:	e7c8      	b.n	8006b7e <_strtod_l+0x2ce>
 8006bec:	2b69      	cmp	r3, #105	; 0x69
 8006bee:	d0de      	beq.n	8006bae <_strtod_l+0x2fe>
 8006bf0:	2b6e      	cmp	r3, #110	; 0x6e
 8006bf2:	f47f aeba 	bne.w	800696a <_strtod_l+0xba>
 8006bf6:	4990      	ldr	r1, [pc, #576]	; (8006e38 <_strtod_l+0x588>)
 8006bf8:	a81b      	add	r0, sp, #108	; 0x6c
 8006bfa:	f001 fddb 	bl	80087b4 <__match>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f43f aeb3 	beq.w	800696a <_strtod_l+0xba>
 8006c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b28      	cmp	r3, #40	; 0x28
 8006c0a:	d10e      	bne.n	8006c2a <_strtod_l+0x37a>
 8006c0c:	aa1e      	add	r2, sp, #120	; 0x78
 8006c0e:	498b      	ldr	r1, [pc, #556]	; (8006e3c <_strtod_l+0x58c>)
 8006c10:	a81b      	add	r0, sp, #108	; 0x6c
 8006c12:	f001 fde3 	bl	80087dc <__hexnan>
 8006c16:	2805      	cmp	r0, #5
 8006c18:	d107      	bne.n	8006c2a <_strtod_l+0x37a>
 8006c1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006c20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006c24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006c28:	e681      	b.n	800692e <_strtod_l+0x7e>
 8006c2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006e50 <_strtod_l+0x5a0>
 8006c2e:	e7d2      	b.n	8006bd6 <_strtod_l+0x326>
 8006c30:	ebae 0302 	sub.w	r3, lr, r2
 8006c34:	9306      	str	r3, [sp, #24]
 8006c36:	9b05      	ldr	r3, [sp, #20]
 8006c38:	9807      	ldr	r0, [sp, #28]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bf08      	it	eq
 8006c3e:	4623      	moveq	r3, r4
 8006c40:	2c10      	cmp	r4, #16
 8006c42:	9305      	str	r3, [sp, #20]
 8006c44:	46a0      	mov	r8, r4
 8006c46:	bfa8      	it	ge
 8006c48:	f04f 0810 	movge.w	r8, #16
 8006c4c:	f7f9 fc6a 	bl	8000524 <__aeabi_ui2d>
 8006c50:	2c09      	cmp	r4, #9
 8006c52:	4682      	mov	sl, r0
 8006c54:	468b      	mov	fp, r1
 8006c56:	dc13      	bgt.n	8006c80 <_strtod_l+0x3d0>
 8006c58:	9b06      	ldr	r3, [sp, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f43f ae67 	beq.w	800692e <_strtod_l+0x7e>
 8006c60:	9b06      	ldr	r3, [sp, #24]
 8006c62:	dd7a      	ble.n	8006d5a <_strtod_l+0x4aa>
 8006c64:	2b16      	cmp	r3, #22
 8006c66:	dc61      	bgt.n	8006d2c <_strtod_l+0x47c>
 8006c68:	4a75      	ldr	r2, [pc, #468]	; (8006e40 <_strtod_l+0x590>)
 8006c6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006c6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8006c72:	4652      	mov	r2, sl
 8006c74:	465b      	mov	r3, fp
 8006c76:	f7f9 fccf 	bl	8000618 <__aeabi_dmul>
 8006c7a:	4682      	mov	sl, r0
 8006c7c:	468b      	mov	fp, r1
 8006c7e:	e656      	b.n	800692e <_strtod_l+0x7e>
 8006c80:	4b6f      	ldr	r3, [pc, #444]	; (8006e40 <_strtod_l+0x590>)
 8006c82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c8a:	f7f9 fcc5 	bl	8000618 <__aeabi_dmul>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	4628      	mov	r0, r5
 8006c92:	460f      	mov	r7, r1
 8006c94:	f7f9 fc46 	bl	8000524 <__aeabi_ui2d>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f7f9 fb04 	bl	80002ac <__adddf3>
 8006ca4:	2c0f      	cmp	r4, #15
 8006ca6:	4682      	mov	sl, r0
 8006ca8:	468b      	mov	fp, r1
 8006caa:	ddd5      	ble.n	8006c58 <_strtod_l+0x3a8>
 8006cac:	9b06      	ldr	r3, [sp, #24]
 8006cae:	eba4 0808 	sub.w	r8, r4, r8
 8006cb2:	4498      	add	r8, r3
 8006cb4:	f1b8 0f00 	cmp.w	r8, #0
 8006cb8:	f340 8096 	ble.w	8006de8 <_strtod_l+0x538>
 8006cbc:	f018 030f 	ands.w	r3, r8, #15
 8006cc0:	d00a      	beq.n	8006cd8 <_strtod_l+0x428>
 8006cc2:	495f      	ldr	r1, [pc, #380]	; (8006e40 <_strtod_l+0x590>)
 8006cc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cc8:	4652      	mov	r2, sl
 8006cca:	465b      	mov	r3, fp
 8006ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd0:	f7f9 fca2 	bl	8000618 <__aeabi_dmul>
 8006cd4:	4682      	mov	sl, r0
 8006cd6:	468b      	mov	fp, r1
 8006cd8:	f038 080f 	bics.w	r8, r8, #15
 8006cdc:	d073      	beq.n	8006dc6 <_strtod_l+0x516>
 8006cde:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006ce2:	dd47      	ble.n	8006d74 <_strtod_l+0x4c4>
 8006ce4:	2400      	movs	r4, #0
 8006ce6:	46a0      	mov	r8, r4
 8006ce8:	9407      	str	r4, [sp, #28]
 8006cea:	9405      	str	r4, [sp, #20]
 8006cec:	2322      	movs	r3, #34	; 0x22
 8006cee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006e48 <_strtod_l+0x598>
 8006cf2:	f8c9 3000 	str.w	r3, [r9]
 8006cf6:	f04f 0a00 	mov.w	sl, #0
 8006cfa:	9b07      	ldr	r3, [sp, #28]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f43f ae16 	beq.w	800692e <_strtod_l+0x7e>
 8006d02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d04:	4648      	mov	r0, r9
 8006d06:	f001 fe66 	bl	80089d6 <_Bfree>
 8006d0a:	9905      	ldr	r1, [sp, #20]
 8006d0c:	4648      	mov	r0, r9
 8006d0e:	f001 fe62 	bl	80089d6 <_Bfree>
 8006d12:	4641      	mov	r1, r8
 8006d14:	4648      	mov	r0, r9
 8006d16:	f001 fe5e 	bl	80089d6 <_Bfree>
 8006d1a:	9907      	ldr	r1, [sp, #28]
 8006d1c:	4648      	mov	r0, r9
 8006d1e:	f001 fe5a 	bl	80089d6 <_Bfree>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4648      	mov	r0, r9
 8006d26:	f001 fe56 	bl	80089d6 <_Bfree>
 8006d2a:	e600      	b.n	800692e <_strtod_l+0x7e>
 8006d2c:	9a06      	ldr	r2, [sp, #24]
 8006d2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006d32:	4293      	cmp	r3, r2
 8006d34:	dbba      	blt.n	8006cac <_strtod_l+0x3fc>
 8006d36:	4d42      	ldr	r5, [pc, #264]	; (8006e40 <_strtod_l+0x590>)
 8006d38:	f1c4 040f 	rsb	r4, r4, #15
 8006d3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006d40:	4652      	mov	r2, sl
 8006d42:	465b      	mov	r3, fp
 8006d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d48:	f7f9 fc66 	bl	8000618 <__aeabi_dmul>
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	1b1c      	subs	r4, r3, r4
 8006d50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006d54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d58:	e78d      	b.n	8006c76 <_strtod_l+0x3c6>
 8006d5a:	f113 0f16 	cmn.w	r3, #22
 8006d5e:	dba5      	blt.n	8006cac <_strtod_l+0x3fc>
 8006d60:	4a37      	ldr	r2, [pc, #220]	; (8006e40 <_strtod_l+0x590>)
 8006d62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006d66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	f7f9 fd7d 	bl	800086c <__aeabi_ddiv>
 8006d72:	e782      	b.n	8006c7a <_strtod_l+0x3ca>
 8006d74:	2300      	movs	r3, #0
 8006d76:	4e33      	ldr	r6, [pc, #204]	; (8006e44 <_strtod_l+0x594>)
 8006d78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006d7c:	4650      	mov	r0, sl
 8006d7e:	4659      	mov	r1, fp
 8006d80:	461d      	mov	r5, r3
 8006d82:	f1b8 0f01 	cmp.w	r8, #1
 8006d86:	dc21      	bgt.n	8006dcc <_strtod_l+0x51c>
 8006d88:	b10b      	cbz	r3, 8006d8e <_strtod_l+0x4de>
 8006d8a:	4682      	mov	sl, r0
 8006d8c:	468b      	mov	fp, r1
 8006d8e:	4b2d      	ldr	r3, [pc, #180]	; (8006e44 <_strtod_l+0x594>)
 8006d90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006d94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d98:	4652      	mov	r2, sl
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006da0:	f7f9 fc3a 	bl	8000618 <__aeabi_dmul>
 8006da4:	4b28      	ldr	r3, [pc, #160]	; (8006e48 <_strtod_l+0x598>)
 8006da6:	460a      	mov	r2, r1
 8006da8:	400b      	ands	r3, r1
 8006daa:	4928      	ldr	r1, [pc, #160]	; (8006e4c <_strtod_l+0x59c>)
 8006dac:	428b      	cmp	r3, r1
 8006dae:	4682      	mov	sl, r0
 8006db0:	d898      	bhi.n	8006ce4 <_strtod_l+0x434>
 8006db2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006db6:	428b      	cmp	r3, r1
 8006db8:	bf86      	itte	hi
 8006dba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006e54 <_strtod_l+0x5a4>
 8006dbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8006dc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	e077      	b.n	8006ebc <_strtod_l+0x60c>
 8006dcc:	f018 0f01 	tst.w	r8, #1
 8006dd0:	d006      	beq.n	8006de0 <_strtod_l+0x530>
 8006dd2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	f7f9 fc1d 	bl	8000618 <__aeabi_dmul>
 8006dde:	2301      	movs	r3, #1
 8006de0:	3501      	adds	r5, #1
 8006de2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006de6:	e7cc      	b.n	8006d82 <_strtod_l+0x4d2>
 8006de8:	d0ed      	beq.n	8006dc6 <_strtod_l+0x516>
 8006dea:	f1c8 0800 	rsb	r8, r8, #0
 8006dee:	f018 020f 	ands.w	r2, r8, #15
 8006df2:	d00a      	beq.n	8006e0a <_strtod_l+0x55a>
 8006df4:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <_strtod_l+0x590>)
 8006df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	4659      	mov	r1, fp
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fd33 	bl	800086c <__aeabi_ddiv>
 8006e06:	4682      	mov	sl, r0
 8006e08:	468b      	mov	fp, r1
 8006e0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e0e:	d0da      	beq.n	8006dc6 <_strtod_l+0x516>
 8006e10:	f1b8 0f1f 	cmp.w	r8, #31
 8006e14:	dd20      	ble.n	8006e58 <_strtod_l+0x5a8>
 8006e16:	2400      	movs	r4, #0
 8006e18:	46a0      	mov	r8, r4
 8006e1a:	9407      	str	r4, [sp, #28]
 8006e1c:	9405      	str	r4, [sp, #20]
 8006e1e:	2322      	movs	r3, #34	; 0x22
 8006e20:	f04f 0a00 	mov.w	sl, #0
 8006e24:	f04f 0b00 	mov.w	fp, #0
 8006e28:	f8c9 3000 	str.w	r3, [r9]
 8006e2c:	e765      	b.n	8006cfa <_strtod_l+0x44a>
 8006e2e:	bf00      	nop
 8006e30:	0800a4b5 	.word	0x0800a4b5
 8006e34:	0800a543 	.word	0x0800a543
 8006e38:	0800a4bd 	.word	0x0800a4bd
 8006e3c:	0800a500 	.word	0x0800a500
 8006e40:	0800a580 	.word	0x0800a580
 8006e44:	0800a558 	.word	0x0800a558
 8006e48:	7ff00000 	.word	0x7ff00000
 8006e4c:	7ca00000 	.word	0x7ca00000
 8006e50:	fff80000 	.word	0xfff80000
 8006e54:	7fefffff 	.word	0x7fefffff
 8006e58:	f018 0310 	ands.w	r3, r8, #16
 8006e5c:	bf18      	it	ne
 8006e5e:	236a      	movne	r3, #106	; 0x6a
 8006e60:	4da0      	ldr	r5, [pc, #640]	; (80070e4 <_strtod_l+0x834>)
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	4650      	mov	r0, sl
 8006e66:	4659      	mov	r1, fp
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f1b8 0f00 	cmp.w	r8, #0
 8006e6e:	f300 810a 	bgt.w	8007086 <_strtod_l+0x7d6>
 8006e72:	b10b      	cbz	r3, 8006e78 <_strtod_l+0x5c8>
 8006e74:	4682      	mov	sl, r0
 8006e76:	468b      	mov	fp, r1
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	b1bb      	cbz	r3, 8006eac <_strtod_l+0x5fc>
 8006e7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006e80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	4659      	mov	r1, fp
 8006e88:	dd10      	ble.n	8006eac <_strtod_l+0x5fc>
 8006e8a:	2b1f      	cmp	r3, #31
 8006e8c:	f340 8107 	ble.w	800709e <_strtod_l+0x7ee>
 8006e90:	2b34      	cmp	r3, #52	; 0x34
 8006e92:	bfde      	ittt	le
 8006e94:	3b20      	suble	r3, #32
 8006e96:	f04f 32ff 	movle.w	r2, #4294967295
 8006e9a:	fa02 f303 	lslle.w	r3, r2, r3
 8006e9e:	f04f 0a00 	mov.w	sl, #0
 8006ea2:	bfcc      	ite	gt
 8006ea4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006ea8:	ea03 0b01 	andle.w	fp, r3, r1
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	4659      	mov	r1, fp
 8006eb4:	f7f9 fe18 	bl	8000ae8 <__aeabi_dcmpeq>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d1ac      	bne.n	8006e16 <_strtod_l+0x566>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	9a05      	ldr	r2, [sp, #20]
 8006ec2:	9908      	ldr	r1, [sp, #32]
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	f001 fdd7 	bl	8008a7a <__s2b>
 8006ecc:	9007      	str	r0, [sp, #28]
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f43f af08 	beq.w	8006ce4 <_strtod_l+0x434>
 8006ed4:	9a06      	ldr	r2, [sp, #24]
 8006ed6:	9b06      	ldr	r3, [sp, #24]
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	f1c3 0300 	rsb	r3, r3, #0
 8006ede:	bfa8      	it	ge
 8006ee0:	2300      	movge	r3, #0
 8006ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ee4:	2400      	movs	r4, #0
 8006ee6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006eea:	9316      	str	r3, [sp, #88]	; 0x58
 8006eec:	46a0      	mov	r8, r4
 8006eee:	9b07      	ldr	r3, [sp, #28]
 8006ef0:	4648      	mov	r0, r9
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	f001 fd3b 	bl	800896e <_Balloc>
 8006ef8:	9005      	str	r0, [sp, #20]
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f43f aef6 	beq.w	8006cec <_strtod_l+0x43c>
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	3202      	adds	r2, #2
 8006f06:	f103 010c 	add.w	r1, r3, #12
 8006f0a:	0092      	lsls	r2, r2, #2
 8006f0c:	300c      	adds	r0, #12
 8006f0e:	f001 fd23 	bl	8008958 <memcpy>
 8006f12:	aa1e      	add	r2, sp, #120	; 0x78
 8006f14:	a91d      	add	r1, sp, #116	; 0x74
 8006f16:	ec4b ab10 	vmov	d0, sl, fp
 8006f1a:	4648      	mov	r0, r9
 8006f1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006f20:	f002 f866 	bl	8008ff0 <__d2b>
 8006f24:	901c      	str	r0, [sp, #112]	; 0x70
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f43f aee0 	beq.w	8006cec <_strtod_l+0x43c>
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	4648      	mov	r0, r9
 8006f30:	f001 fe2f 	bl	8008b92 <__i2b>
 8006f34:	4680      	mov	r8, r0
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f43f aed8 	beq.w	8006cec <_strtod_l+0x43c>
 8006f3c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006f3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006f40:	2e00      	cmp	r6, #0
 8006f42:	bfab      	itete	ge
 8006f44:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006f46:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006f48:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006f4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006f4c:	bfac      	ite	ge
 8006f4e:	18f7      	addge	r7, r6, r3
 8006f50:	1b9d      	sublt	r5, r3, r6
 8006f52:	9b04      	ldr	r3, [sp, #16]
 8006f54:	1af6      	subs	r6, r6, r3
 8006f56:	4416      	add	r6, r2
 8006f58:	4b63      	ldr	r3, [pc, #396]	; (80070e8 <_strtod_l+0x838>)
 8006f5a:	3e01      	subs	r6, #1
 8006f5c:	429e      	cmp	r6, r3
 8006f5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f62:	f280 80af 	bge.w	80070c4 <_strtod_l+0x814>
 8006f66:	1b9b      	subs	r3, r3, r6
 8006f68:	2b1f      	cmp	r3, #31
 8006f6a:	eba2 0203 	sub.w	r2, r2, r3
 8006f6e:	f04f 0101 	mov.w	r1, #1
 8006f72:	f300 809b 	bgt.w	80070ac <_strtod_l+0x7fc>
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f80:	18be      	adds	r6, r7, r2
 8006f82:	9b04      	ldr	r3, [sp, #16]
 8006f84:	42b7      	cmp	r7, r6
 8006f86:	4415      	add	r5, r2
 8006f88:	441d      	add	r5, r3
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	bfa8      	it	ge
 8006f8e:	4633      	movge	r3, r6
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	bfa8      	it	ge
 8006f94:	462b      	movge	r3, r5
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfc2      	ittt	gt
 8006f9a:	1af6      	subgt	r6, r6, r3
 8006f9c:	1aed      	subgt	r5, r5, r3
 8006f9e:	1aff      	subgt	r7, r7, r3
 8006fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fa2:	b1bb      	cbz	r3, 8006fd4 <_strtod_l+0x724>
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4648      	mov	r0, r9
 8006faa:	f001 fe91 	bl	8008cd0 <__pow5mult>
 8006fae:	4680      	mov	r8, r0
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f43f ae9b 	beq.w	8006cec <_strtod_l+0x43c>
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006fba:	4648      	mov	r0, r9
 8006fbc:	f001 fdf2 	bl	8008ba4 <__multiply>
 8006fc0:	900c      	str	r0, [sp, #48]	; 0x30
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	f43f ae92 	beq.w	8006cec <_strtod_l+0x43c>
 8006fc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fca:	4648      	mov	r0, r9
 8006fcc:	f001 fd03 	bl	80089d6 <_Bfree>
 8006fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fd2:	931c      	str	r3, [sp, #112]	; 0x70
 8006fd4:	2e00      	cmp	r6, #0
 8006fd6:	dc7a      	bgt.n	80070ce <_strtod_l+0x81e>
 8006fd8:	9b06      	ldr	r3, [sp, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	dd08      	ble.n	8006ff0 <_strtod_l+0x740>
 8006fde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fe0:	9905      	ldr	r1, [sp, #20]
 8006fe2:	4648      	mov	r0, r9
 8006fe4:	f001 fe74 	bl	8008cd0 <__pow5mult>
 8006fe8:	9005      	str	r0, [sp, #20]
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f43f ae7e 	beq.w	8006cec <_strtod_l+0x43c>
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	dd08      	ble.n	8007006 <_strtod_l+0x756>
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	9905      	ldr	r1, [sp, #20]
 8006ff8:	4648      	mov	r0, r9
 8006ffa:	f001 feb7 	bl	8008d6c <__lshift>
 8006ffe:	9005      	str	r0, [sp, #20]
 8007000:	2800      	cmp	r0, #0
 8007002:	f43f ae73 	beq.w	8006cec <_strtod_l+0x43c>
 8007006:	2f00      	cmp	r7, #0
 8007008:	dd08      	ble.n	800701c <_strtod_l+0x76c>
 800700a:	4641      	mov	r1, r8
 800700c:	463a      	mov	r2, r7
 800700e:	4648      	mov	r0, r9
 8007010:	f001 feac 	bl	8008d6c <__lshift>
 8007014:	4680      	mov	r8, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	f43f ae68 	beq.w	8006cec <_strtod_l+0x43c>
 800701c:	9a05      	ldr	r2, [sp, #20]
 800701e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007020:	4648      	mov	r0, r9
 8007022:	f001 ff11 	bl	8008e48 <__mdiff>
 8007026:	4604      	mov	r4, r0
 8007028:	2800      	cmp	r0, #0
 800702a:	f43f ae5f 	beq.w	8006cec <_strtod_l+0x43c>
 800702e:	68c3      	ldr	r3, [r0, #12]
 8007030:	930c      	str	r3, [sp, #48]	; 0x30
 8007032:	2300      	movs	r3, #0
 8007034:	60c3      	str	r3, [r0, #12]
 8007036:	4641      	mov	r1, r8
 8007038:	f001 feec 	bl	8008e14 <__mcmp>
 800703c:	2800      	cmp	r0, #0
 800703e:	da55      	bge.n	80070ec <_strtod_l+0x83c>
 8007040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007042:	b9e3      	cbnz	r3, 800707e <_strtod_l+0x7ce>
 8007044:	f1ba 0f00 	cmp.w	sl, #0
 8007048:	d119      	bne.n	800707e <_strtod_l+0x7ce>
 800704a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800704e:	b9b3      	cbnz	r3, 800707e <_strtod_l+0x7ce>
 8007050:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007054:	0d1b      	lsrs	r3, r3, #20
 8007056:	051b      	lsls	r3, r3, #20
 8007058:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800705c:	d90f      	bls.n	800707e <_strtod_l+0x7ce>
 800705e:	6963      	ldr	r3, [r4, #20]
 8007060:	b913      	cbnz	r3, 8007068 <_strtod_l+0x7b8>
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	2b01      	cmp	r3, #1
 8007066:	dd0a      	ble.n	800707e <_strtod_l+0x7ce>
 8007068:	4621      	mov	r1, r4
 800706a:	2201      	movs	r2, #1
 800706c:	4648      	mov	r0, r9
 800706e:	f001 fe7d 	bl	8008d6c <__lshift>
 8007072:	4641      	mov	r1, r8
 8007074:	4604      	mov	r4, r0
 8007076:	f001 fecd 	bl	8008e14 <__mcmp>
 800707a:	2800      	cmp	r0, #0
 800707c:	dc67      	bgt.n	800714e <_strtod_l+0x89e>
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d171      	bne.n	8007168 <_strtod_l+0x8b8>
 8007084:	e63d      	b.n	8006d02 <_strtod_l+0x452>
 8007086:	f018 0f01 	tst.w	r8, #1
 800708a:	d004      	beq.n	8007096 <_strtod_l+0x7e6>
 800708c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007090:	f7f9 fac2 	bl	8000618 <__aeabi_dmul>
 8007094:	2301      	movs	r3, #1
 8007096:	ea4f 0868 	mov.w	r8, r8, asr #1
 800709a:	3508      	adds	r5, #8
 800709c:	e6e5      	b.n	8006e6a <_strtod_l+0x5ba>
 800709e:	f04f 32ff 	mov.w	r2, #4294967295
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	ea03 0a0a 	and.w	sl, r3, sl
 80070aa:	e6ff      	b.n	8006eac <_strtod_l+0x5fc>
 80070ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80070b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80070b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80070b8:	36e2      	adds	r6, #226	; 0xe2
 80070ba:	fa01 f306 	lsl.w	r3, r1, r6
 80070be:	930a      	str	r3, [sp, #40]	; 0x28
 80070c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80070c2:	e75d      	b.n	8006f80 <_strtod_l+0x6d0>
 80070c4:	2300      	movs	r3, #0
 80070c6:	930a      	str	r3, [sp, #40]	; 0x28
 80070c8:	2301      	movs	r3, #1
 80070ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80070cc:	e758      	b.n	8006f80 <_strtod_l+0x6d0>
 80070ce:	4632      	mov	r2, r6
 80070d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070d2:	4648      	mov	r0, r9
 80070d4:	f001 fe4a 	bl	8008d6c <__lshift>
 80070d8:	901c      	str	r0, [sp, #112]	; 0x70
 80070da:	2800      	cmp	r0, #0
 80070dc:	f47f af7c 	bne.w	8006fd8 <_strtod_l+0x728>
 80070e0:	e604      	b.n	8006cec <_strtod_l+0x43c>
 80070e2:	bf00      	nop
 80070e4:	0800a518 	.word	0x0800a518
 80070e8:	fffffc02 	.word	0xfffffc02
 80070ec:	465d      	mov	r5, fp
 80070ee:	f040 8086 	bne.w	80071fe <_strtod_l+0x94e>
 80070f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070f8:	b32a      	cbz	r2, 8007146 <_strtod_l+0x896>
 80070fa:	4aaf      	ldr	r2, [pc, #700]	; (80073b8 <_strtod_l+0xb08>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d153      	bne.n	80071a8 <_strtod_l+0x8f8>
 8007100:	9b04      	ldr	r3, [sp, #16]
 8007102:	4650      	mov	r0, sl
 8007104:	b1d3      	cbz	r3, 800713c <_strtod_l+0x88c>
 8007106:	4aad      	ldr	r2, [pc, #692]	; (80073bc <_strtod_l+0xb0c>)
 8007108:	402a      	ands	r2, r5
 800710a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800710e:	f04f 31ff 	mov.w	r1, #4294967295
 8007112:	d816      	bhi.n	8007142 <_strtod_l+0x892>
 8007114:	0d12      	lsrs	r2, r2, #20
 8007116:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800711a:	fa01 f303 	lsl.w	r3, r1, r3
 800711e:	4298      	cmp	r0, r3
 8007120:	d142      	bne.n	80071a8 <_strtod_l+0x8f8>
 8007122:	4ba7      	ldr	r3, [pc, #668]	; (80073c0 <_strtod_l+0xb10>)
 8007124:	429d      	cmp	r5, r3
 8007126:	d102      	bne.n	800712e <_strtod_l+0x87e>
 8007128:	3001      	adds	r0, #1
 800712a:	f43f addf 	beq.w	8006cec <_strtod_l+0x43c>
 800712e:	4ba3      	ldr	r3, [pc, #652]	; (80073bc <_strtod_l+0xb0c>)
 8007130:	402b      	ands	r3, r5
 8007132:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	e7a0      	b.n	800707e <_strtod_l+0x7ce>
 800713c:	f04f 33ff 	mov.w	r3, #4294967295
 8007140:	e7ed      	b.n	800711e <_strtod_l+0x86e>
 8007142:	460b      	mov	r3, r1
 8007144:	e7eb      	b.n	800711e <_strtod_l+0x86e>
 8007146:	bb7b      	cbnz	r3, 80071a8 <_strtod_l+0x8f8>
 8007148:	f1ba 0f00 	cmp.w	sl, #0
 800714c:	d12c      	bne.n	80071a8 <_strtod_l+0x8f8>
 800714e:	9904      	ldr	r1, [sp, #16]
 8007150:	4a9a      	ldr	r2, [pc, #616]	; (80073bc <_strtod_l+0xb0c>)
 8007152:	465b      	mov	r3, fp
 8007154:	b1f1      	cbz	r1, 8007194 <_strtod_l+0x8e4>
 8007156:	ea02 010b 	and.w	r1, r2, fp
 800715a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800715e:	dc19      	bgt.n	8007194 <_strtod_l+0x8e4>
 8007160:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007164:	f77f ae5b 	ble.w	8006e1e <_strtod_l+0x56e>
 8007168:	4a96      	ldr	r2, [pc, #600]	; (80073c4 <_strtod_l+0xb14>)
 800716a:	2300      	movs	r3, #0
 800716c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007170:	4650      	mov	r0, sl
 8007172:	4659      	mov	r1, fp
 8007174:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007178:	f7f9 fa4e 	bl	8000618 <__aeabi_dmul>
 800717c:	4682      	mov	sl, r0
 800717e:	468b      	mov	fp, r1
 8007180:	2900      	cmp	r1, #0
 8007182:	f47f adbe 	bne.w	8006d02 <_strtod_l+0x452>
 8007186:	2800      	cmp	r0, #0
 8007188:	f47f adbb 	bne.w	8006d02 <_strtod_l+0x452>
 800718c:	2322      	movs	r3, #34	; 0x22
 800718e:	f8c9 3000 	str.w	r3, [r9]
 8007192:	e5b6      	b.n	8006d02 <_strtod_l+0x452>
 8007194:	4013      	ands	r3, r2
 8007196:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800719a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800719e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80071a2:	f04f 3aff 	mov.w	sl, #4294967295
 80071a6:	e76a      	b.n	800707e <_strtod_l+0x7ce>
 80071a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071aa:	b193      	cbz	r3, 80071d2 <_strtod_l+0x922>
 80071ac:	422b      	tst	r3, r5
 80071ae:	f43f af66 	beq.w	800707e <_strtod_l+0x7ce>
 80071b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071b4:	9a04      	ldr	r2, [sp, #16]
 80071b6:	4650      	mov	r0, sl
 80071b8:	4659      	mov	r1, fp
 80071ba:	b173      	cbz	r3, 80071da <_strtod_l+0x92a>
 80071bc:	f7ff fb5b 	bl	8006876 <sulp>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071c8:	f7f9 f870 	bl	80002ac <__adddf3>
 80071cc:	4682      	mov	sl, r0
 80071ce:	468b      	mov	fp, r1
 80071d0:	e755      	b.n	800707e <_strtod_l+0x7ce>
 80071d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d4:	ea13 0f0a 	tst.w	r3, sl
 80071d8:	e7e9      	b.n	80071ae <_strtod_l+0x8fe>
 80071da:	f7ff fb4c 	bl	8006876 <sulp>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071e6:	f7f9 f85f 	bl	80002a8 <__aeabi_dsub>
 80071ea:	2200      	movs	r2, #0
 80071ec:	2300      	movs	r3, #0
 80071ee:	4682      	mov	sl, r0
 80071f0:	468b      	mov	fp, r1
 80071f2:	f7f9 fc79 	bl	8000ae8 <__aeabi_dcmpeq>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f47f ae11 	bne.w	8006e1e <_strtod_l+0x56e>
 80071fc:	e73f      	b.n	800707e <_strtod_l+0x7ce>
 80071fe:	4641      	mov	r1, r8
 8007200:	4620      	mov	r0, r4
 8007202:	f001 ff44 	bl	800908e <__ratio>
 8007206:	ec57 6b10 	vmov	r6, r7, d0
 800720a:	2200      	movs	r2, #0
 800720c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007210:	ee10 0a10 	vmov	r0, s0
 8007214:	4639      	mov	r1, r7
 8007216:	f7f9 fc7b 	bl	8000b10 <__aeabi_dcmple>
 800721a:	2800      	cmp	r0, #0
 800721c:	d077      	beq.n	800730e <_strtod_l+0xa5e>
 800721e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d04a      	beq.n	80072ba <_strtod_l+0xa0a>
 8007224:	4b68      	ldr	r3, [pc, #416]	; (80073c8 <_strtod_l+0xb18>)
 8007226:	2200      	movs	r2, #0
 8007228:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800722c:	4f66      	ldr	r7, [pc, #408]	; (80073c8 <_strtod_l+0xb18>)
 800722e:	2600      	movs	r6, #0
 8007230:	4b62      	ldr	r3, [pc, #392]	; (80073bc <_strtod_l+0xb0c>)
 8007232:	402b      	ands	r3, r5
 8007234:	930f      	str	r3, [sp, #60]	; 0x3c
 8007236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007238:	4b64      	ldr	r3, [pc, #400]	; (80073cc <_strtod_l+0xb1c>)
 800723a:	429a      	cmp	r2, r3
 800723c:	f040 80ce 	bne.w	80073dc <_strtod_l+0xb2c>
 8007240:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007244:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007248:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800724c:	ec4b ab10 	vmov	d0, sl, fp
 8007250:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007254:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007258:	f001 fe54 	bl	8008f04 <__ulp>
 800725c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007260:	ec53 2b10 	vmov	r2, r3, d0
 8007264:	f7f9 f9d8 	bl	8000618 <__aeabi_dmul>
 8007268:	4652      	mov	r2, sl
 800726a:	465b      	mov	r3, fp
 800726c:	f7f9 f81e 	bl	80002ac <__adddf3>
 8007270:	460b      	mov	r3, r1
 8007272:	4952      	ldr	r1, [pc, #328]	; (80073bc <_strtod_l+0xb0c>)
 8007274:	4a56      	ldr	r2, [pc, #344]	; (80073d0 <_strtod_l+0xb20>)
 8007276:	4019      	ands	r1, r3
 8007278:	4291      	cmp	r1, r2
 800727a:	4682      	mov	sl, r0
 800727c:	d95b      	bls.n	8007336 <_strtod_l+0xa86>
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007284:	4293      	cmp	r3, r2
 8007286:	d103      	bne.n	8007290 <_strtod_l+0x9e0>
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	3301      	adds	r3, #1
 800728c:	f43f ad2e 	beq.w	8006cec <_strtod_l+0x43c>
 8007290:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80073c0 <_strtod_l+0xb10>
 8007294:	f04f 3aff 	mov.w	sl, #4294967295
 8007298:	991c      	ldr	r1, [sp, #112]	; 0x70
 800729a:	4648      	mov	r0, r9
 800729c:	f001 fb9b 	bl	80089d6 <_Bfree>
 80072a0:	9905      	ldr	r1, [sp, #20]
 80072a2:	4648      	mov	r0, r9
 80072a4:	f001 fb97 	bl	80089d6 <_Bfree>
 80072a8:	4641      	mov	r1, r8
 80072aa:	4648      	mov	r0, r9
 80072ac:	f001 fb93 	bl	80089d6 <_Bfree>
 80072b0:	4621      	mov	r1, r4
 80072b2:	4648      	mov	r0, r9
 80072b4:	f001 fb8f 	bl	80089d6 <_Bfree>
 80072b8:	e619      	b.n	8006eee <_strtod_l+0x63e>
 80072ba:	f1ba 0f00 	cmp.w	sl, #0
 80072be:	d11a      	bne.n	80072f6 <_strtod_l+0xa46>
 80072c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072c4:	b9eb      	cbnz	r3, 8007302 <_strtod_l+0xa52>
 80072c6:	2200      	movs	r2, #0
 80072c8:	4b3f      	ldr	r3, [pc, #252]	; (80073c8 <_strtod_l+0xb18>)
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f9 fc15 	bl	8000afc <__aeabi_dcmplt>
 80072d2:	b9c8      	cbnz	r0, 8007308 <_strtod_l+0xa58>
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	2200      	movs	r2, #0
 80072da:	4b3e      	ldr	r3, [pc, #248]	; (80073d4 <_strtod_l+0xb24>)
 80072dc:	f7f9 f99c 	bl	8000618 <__aeabi_dmul>
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80072e8:	9618      	str	r6, [sp, #96]	; 0x60
 80072ea:	9319      	str	r3, [sp, #100]	; 0x64
 80072ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80072f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80072f4:	e79c      	b.n	8007230 <_strtod_l+0x980>
 80072f6:	f1ba 0f01 	cmp.w	sl, #1
 80072fa:	d102      	bne.n	8007302 <_strtod_l+0xa52>
 80072fc:	2d00      	cmp	r5, #0
 80072fe:	f43f ad8e 	beq.w	8006e1e <_strtod_l+0x56e>
 8007302:	2200      	movs	r2, #0
 8007304:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <_strtod_l+0xb28>)
 8007306:	e78f      	b.n	8007228 <_strtod_l+0x978>
 8007308:	2600      	movs	r6, #0
 800730a:	4f32      	ldr	r7, [pc, #200]	; (80073d4 <_strtod_l+0xb24>)
 800730c:	e7ea      	b.n	80072e4 <_strtod_l+0xa34>
 800730e:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <_strtod_l+0xb24>)
 8007310:	4630      	mov	r0, r6
 8007312:	4639      	mov	r1, r7
 8007314:	2200      	movs	r2, #0
 8007316:	f7f9 f97f 	bl	8000618 <__aeabi_dmul>
 800731a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	b933      	cbnz	r3, 8007330 <_strtod_l+0xa80>
 8007322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007326:	9010      	str	r0, [sp, #64]	; 0x40
 8007328:	9311      	str	r3, [sp, #68]	; 0x44
 800732a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800732e:	e7df      	b.n	80072f0 <_strtod_l+0xa40>
 8007330:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007334:	e7f9      	b.n	800732a <_strtod_l+0xa7a>
 8007336:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800733a:	9b04      	ldr	r3, [sp, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1ab      	bne.n	8007298 <_strtod_l+0x9e8>
 8007340:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007344:	0d1b      	lsrs	r3, r3, #20
 8007346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	429a      	cmp	r2, r3
 800734c:	465d      	mov	r5, fp
 800734e:	d1a3      	bne.n	8007298 <_strtod_l+0x9e8>
 8007350:	4639      	mov	r1, r7
 8007352:	4630      	mov	r0, r6
 8007354:	f7f9 fc10 	bl	8000b78 <__aeabi_d2iz>
 8007358:	f7f9 f8f4 	bl	8000544 <__aeabi_i2d>
 800735c:	460b      	mov	r3, r1
 800735e:	4602      	mov	r2, r0
 8007360:	4639      	mov	r1, r7
 8007362:	4630      	mov	r0, r6
 8007364:	f7f8 ffa0 	bl	80002a8 <__aeabi_dsub>
 8007368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800736a:	4606      	mov	r6, r0
 800736c:	460f      	mov	r7, r1
 800736e:	b933      	cbnz	r3, 800737e <_strtod_l+0xace>
 8007370:	f1ba 0f00 	cmp.w	sl, #0
 8007374:	d103      	bne.n	800737e <_strtod_l+0xace>
 8007376:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800737a:	2d00      	cmp	r5, #0
 800737c:	d06d      	beq.n	800745a <_strtod_l+0xbaa>
 800737e:	a30a      	add	r3, pc, #40	; (adr r3, 80073a8 <_strtod_l+0xaf8>)
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	f7f9 fbb8 	bl	8000afc <__aeabi_dcmplt>
 800738c:	2800      	cmp	r0, #0
 800738e:	f47f acb8 	bne.w	8006d02 <_strtod_l+0x452>
 8007392:	a307      	add	r3, pc, #28	; (adr r3, 80073b0 <_strtod_l+0xb00>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f9 fbcc 	bl	8000b38 <__aeabi_dcmpgt>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f43f af79 	beq.w	8007298 <_strtod_l+0x9e8>
 80073a6:	e4ac      	b.n	8006d02 <_strtod_l+0x452>
 80073a8:	94a03595 	.word	0x94a03595
 80073ac:	3fdfffff 	.word	0x3fdfffff
 80073b0:	35afe535 	.word	0x35afe535
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	000fffff 	.word	0x000fffff
 80073bc:	7ff00000 	.word	0x7ff00000
 80073c0:	7fefffff 	.word	0x7fefffff
 80073c4:	39500000 	.word	0x39500000
 80073c8:	3ff00000 	.word	0x3ff00000
 80073cc:	7fe00000 	.word	0x7fe00000
 80073d0:	7c9fffff 	.word	0x7c9fffff
 80073d4:	3fe00000 	.word	0x3fe00000
 80073d8:	bff00000 	.word	0xbff00000
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	b333      	cbz	r3, 800742e <_strtod_l+0xb7e>
 80073e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073e6:	d822      	bhi.n	800742e <_strtod_l+0xb7e>
 80073e8:	a327      	add	r3, pc, #156	; (adr r3, 8007488 <_strtod_l+0xbd8>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	4630      	mov	r0, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	f7f9 fb8d 	bl	8000b10 <__aeabi_dcmple>
 80073f6:	b1a0      	cbz	r0, 8007422 <_strtod_l+0xb72>
 80073f8:	4639      	mov	r1, r7
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7f9 fbe4 	bl	8000bc8 <__aeabi_d2uiz>
 8007400:	2800      	cmp	r0, #0
 8007402:	bf08      	it	eq
 8007404:	2001      	moveq	r0, #1
 8007406:	f7f9 f88d 	bl	8000524 <__aeabi_ui2d>
 800740a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	bb03      	cbnz	r3, 8007454 <_strtod_l+0xba4>
 8007412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007416:	9012      	str	r0, [sp, #72]	; 0x48
 8007418:	9313      	str	r3, [sp, #76]	; 0x4c
 800741a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800741e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007426:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	930b      	str	r3, [sp, #44]	; 0x2c
 800742e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007432:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007436:	f001 fd65 	bl	8008f04 <__ulp>
 800743a:	4650      	mov	r0, sl
 800743c:	ec53 2b10 	vmov	r2, r3, d0
 8007440:	4659      	mov	r1, fp
 8007442:	f7f9 f8e9 	bl	8000618 <__aeabi_dmul>
 8007446:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800744a:	f7f8 ff2f 	bl	80002ac <__adddf3>
 800744e:	4682      	mov	sl, r0
 8007450:	468b      	mov	fp, r1
 8007452:	e772      	b.n	800733a <_strtod_l+0xa8a>
 8007454:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007458:	e7df      	b.n	800741a <_strtod_l+0xb6a>
 800745a:	a30d      	add	r3, pc, #52	; (adr r3, 8007490 <_strtod_l+0xbe0>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f7f9 fb4c 	bl	8000afc <__aeabi_dcmplt>
 8007464:	e79c      	b.n	80073a0 <_strtod_l+0xaf0>
 8007466:	2300      	movs	r3, #0
 8007468:	930d      	str	r3, [sp, #52]	; 0x34
 800746a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800746c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	f7ff ba61 	b.w	8006936 <_strtod_l+0x86>
 8007474:	2b65      	cmp	r3, #101	; 0x65
 8007476:	f04f 0200 	mov.w	r2, #0
 800747a:	f43f ab4e 	beq.w	8006b1a <_strtod_l+0x26a>
 800747e:	2101      	movs	r1, #1
 8007480:	4614      	mov	r4, r2
 8007482:	9104      	str	r1, [sp, #16]
 8007484:	f7ff bacb 	b.w	8006a1e <_strtod_l+0x16e>
 8007488:	ffc00000 	.word	0xffc00000
 800748c:	41dfffff 	.word	0x41dfffff
 8007490:	94a03595 	.word	0x94a03595
 8007494:	3fcfffff 	.word	0x3fcfffff

08007498 <_strtod_r>:
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <_strtod_r+0x18>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	b410      	push	{r4}
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	4c04      	ldr	r4, [pc, #16]	; (80074b4 <_strtod_r+0x1c>)
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bf08      	it	eq
 80074a6:	4623      	moveq	r3, r4
 80074a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ac:	f7ff ba00 	b.w	80068b0 <_strtod_l>
 80074b0:	200000c4 	.word	0x200000c4
 80074b4:	20000128 	.word	0x20000128

080074b8 <strtod>:
 80074b8:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <strtod+0x20>)
 80074ba:	4a08      	ldr	r2, [pc, #32]	; (80074dc <strtod+0x24>)
 80074bc:	b410      	push	{r4}
 80074be:	681c      	ldr	r4, [r3, #0]
 80074c0:	6a23      	ldr	r3, [r4, #32]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	bf08      	it	eq
 80074c6:	4613      	moveq	r3, r2
 80074c8:	460a      	mov	r2, r1
 80074ca:	4601      	mov	r1, r0
 80074cc:	4620      	mov	r0, r4
 80074ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d2:	f7ff b9ed 	b.w	80068b0 <_strtod_l>
 80074d6:	bf00      	nop
 80074d8:	200000c4 	.word	0x200000c4
 80074dc:	20000128 	.word	0x20000128

080074e0 <_strtol_l.isra.0>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	4680      	mov	r8, r0
 80074e6:	4689      	mov	r9, r1
 80074e8:	4692      	mov	sl, r2
 80074ea:	461e      	mov	r6, r3
 80074ec:	460f      	mov	r7, r1
 80074ee:	463d      	mov	r5, r7
 80074f0:	9808      	ldr	r0, [sp, #32]
 80074f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074f6:	f001 fa01 	bl	80088fc <__locale_ctype_ptr_l>
 80074fa:	4420      	add	r0, r4
 80074fc:	7843      	ldrb	r3, [r0, #1]
 80074fe:	f013 0308 	ands.w	r3, r3, #8
 8007502:	d132      	bne.n	800756a <_strtol_l.isra.0+0x8a>
 8007504:	2c2d      	cmp	r4, #45	; 0x2d
 8007506:	d132      	bne.n	800756e <_strtol_l.isra.0+0x8e>
 8007508:	787c      	ldrb	r4, [r7, #1]
 800750a:	1cbd      	adds	r5, r7, #2
 800750c:	2201      	movs	r2, #1
 800750e:	2e00      	cmp	r6, #0
 8007510:	d05d      	beq.n	80075ce <_strtol_l.isra.0+0xee>
 8007512:	2e10      	cmp	r6, #16
 8007514:	d109      	bne.n	800752a <_strtol_l.isra.0+0x4a>
 8007516:	2c30      	cmp	r4, #48	; 0x30
 8007518:	d107      	bne.n	800752a <_strtol_l.isra.0+0x4a>
 800751a:	782b      	ldrb	r3, [r5, #0]
 800751c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007520:	2b58      	cmp	r3, #88	; 0x58
 8007522:	d14f      	bne.n	80075c4 <_strtol_l.isra.0+0xe4>
 8007524:	786c      	ldrb	r4, [r5, #1]
 8007526:	2610      	movs	r6, #16
 8007528:	3502      	adds	r5, #2
 800752a:	2a00      	cmp	r2, #0
 800752c:	bf14      	ite	ne
 800752e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007532:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007536:	2700      	movs	r7, #0
 8007538:	fbb1 fcf6 	udiv	ip, r1, r6
 800753c:	4638      	mov	r0, r7
 800753e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007542:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007546:	2b09      	cmp	r3, #9
 8007548:	d817      	bhi.n	800757a <_strtol_l.isra.0+0x9a>
 800754a:	461c      	mov	r4, r3
 800754c:	42a6      	cmp	r6, r4
 800754e:	dd23      	ble.n	8007598 <_strtol_l.isra.0+0xb8>
 8007550:	1c7b      	adds	r3, r7, #1
 8007552:	d007      	beq.n	8007564 <_strtol_l.isra.0+0x84>
 8007554:	4584      	cmp	ip, r0
 8007556:	d31c      	bcc.n	8007592 <_strtol_l.isra.0+0xb2>
 8007558:	d101      	bne.n	800755e <_strtol_l.isra.0+0x7e>
 800755a:	45a6      	cmp	lr, r4
 800755c:	db19      	blt.n	8007592 <_strtol_l.isra.0+0xb2>
 800755e:	fb00 4006 	mla	r0, r0, r6, r4
 8007562:	2701      	movs	r7, #1
 8007564:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007568:	e7eb      	b.n	8007542 <_strtol_l.isra.0+0x62>
 800756a:	462f      	mov	r7, r5
 800756c:	e7bf      	b.n	80074ee <_strtol_l.isra.0+0xe>
 800756e:	2c2b      	cmp	r4, #43	; 0x2b
 8007570:	bf04      	itt	eq
 8007572:	1cbd      	addeq	r5, r7, #2
 8007574:	787c      	ldrbeq	r4, [r7, #1]
 8007576:	461a      	mov	r2, r3
 8007578:	e7c9      	b.n	800750e <_strtol_l.isra.0+0x2e>
 800757a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800757e:	2b19      	cmp	r3, #25
 8007580:	d801      	bhi.n	8007586 <_strtol_l.isra.0+0xa6>
 8007582:	3c37      	subs	r4, #55	; 0x37
 8007584:	e7e2      	b.n	800754c <_strtol_l.isra.0+0x6c>
 8007586:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800758a:	2b19      	cmp	r3, #25
 800758c:	d804      	bhi.n	8007598 <_strtol_l.isra.0+0xb8>
 800758e:	3c57      	subs	r4, #87	; 0x57
 8007590:	e7dc      	b.n	800754c <_strtol_l.isra.0+0x6c>
 8007592:	f04f 37ff 	mov.w	r7, #4294967295
 8007596:	e7e5      	b.n	8007564 <_strtol_l.isra.0+0x84>
 8007598:	1c7b      	adds	r3, r7, #1
 800759a:	d108      	bne.n	80075ae <_strtol_l.isra.0+0xce>
 800759c:	2322      	movs	r3, #34	; 0x22
 800759e:	f8c8 3000 	str.w	r3, [r8]
 80075a2:	4608      	mov	r0, r1
 80075a4:	f1ba 0f00 	cmp.w	sl, #0
 80075a8:	d107      	bne.n	80075ba <_strtol_l.isra.0+0xda>
 80075aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ae:	b102      	cbz	r2, 80075b2 <_strtol_l.isra.0+0xd2>
 80075b0:	4240      	negs	r0, r0
 80075b2:	f1ba 0f00 	cmp.w	sl, #0
 80075b6:	d0f8      	beq.n	80075aa <_strtol_l.isra.0+0xca>
 80075b8:	b10f      	cbz	r7, 80075be <_strtol_l.isra.0+0xde>
 80075ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80075be:	f8ca 9000 	str.w	r9, [sl]
 80075c2:	e7f2      	b.n	80075aa <_strtol_l.isra.0+0xca>
 80075c4:	2430      	movs	r4, #48	; 0x30
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	d1af      	bne.n	800752a <_strtol_l.isra.0+0x4a>
 80075ca:	2608      	movs	r6, #8
 80075cc:	e7ad      	b.n	800752a <_strtol_l.isra.0+0x4a>
 80075ce:	2c30      	cmp	r4, #48	; 0x30
 80075d0:	d0a3      	beq.n	800751a <_strtol_l.isra.0+0x3a>
 80075d2:	260a      	movs	r6, #10
 80075d4:	e7a9      	b.n	800752a <_strtol_l.isra.0+0x4a>
	...

080075d8 <_strtol_r>:
 80075d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075da:	4c06      	ldr	r4, [pc, #24]	; (80075f4 <_strtol_r+0x1c>)
 80075dc:	4d06      	ldr	r5, [pc, #24]	; (80075f8 <_strtol_r+0x20>)
 80075de:	6824      	ldr	r4, [r4, #0]
 80075e0:	6a24      	ldr	r4, [r4, #32]
 80075e2:	2c00      	cmp	r4, #0
 80075e4:	bf08      	it	eq
 80075e6:	462c      	moveq	r4, r5
 80075e8:	9400      	str	r4, [sp, #0]
 80075ea:	f7ff ff79 	bl	80074e0 <_strtol_l.isra.0>
 80075ee:	b003      	add	sp, #12
 80075f0:	bd30      	pop	{r4, r5, pc}
 80075f2:	bf00      	nop
 80075f4:	200000c4 	.word	0x200000c4
 80075f8:	20000128 	.word	0x20000128

080075fc <strtol>:
 80075fc:	4b08      	ldr	r3, [pc, #32]	; (8007620 <strtol+0x24>)
 80075fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007600:	681c      	ldr	r4, [r3, #0]
 8007602:	4d08      	ldr	r5, [pc, #32]	; (8007624 <strtol+0x28>)
 8007604:	6a23      	ldr	r3, [r4, #32]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf08      	it	eq
 800760a:	462b      	moveq	r3, r5
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4613      	mov	r3, r2
 8007610:	460a      	mov	r2, r1
 8007612:	4601      	mov	r1, r0
 8007614:	4620      	mov	r0, r4
 8007616:	f7ff ff63 	bl	80074e0 <_strtol_l.isra.0>
 800761a:	b003      	add	sp, #12
 800761c:	bd30      	pop	{r4, r5, pc}
 800761e:	bf00      	nop
 8007620:	200000c4 	.word	0x200000c4
 8007624:	20000128 	.word	0x20000128

08007628 <quorem>:
 8007628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	6903      	ldr	r3, [r0, #16]
 800762e:	690c      	ldr	r4, [r1, #16]
 8007630:	42a3      	cmp	r3, r4
 8007632:	4680      	mov	r8, r0
 8007634:	f2c0 8082 	blt.w	800773c <quorem+0x114>
 8007638:	3c01      	subs	r4, #1
 800763a:	f101 0714 	add.w	r7, r1, #20
 800763e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007642:	f100 0614 	add.w	r6, r0, #20
 8007646:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800764a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800764e:	eb06 030c 	add.w	r3, r6, ip
 8007652:	3501      	adds	r5, #1
 8007654:	eb07 090c 	add.w	r9, r7, ip
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	fbb0 f5f5 	udiv	r5, r0, r5
 800765e:	b395      	cbz	r5, 80076c6 <quorem+0x9e>
 8007660:	f04f 0a00 	mov.w	sl, #0
 8007664:	4638      	mov	r0, r7
 8007666:	46b6      	mov	lr, r6
 8007668:	46d3      	mov	fp, sl
 800766a:	f850 2b04 	ldr.w	r2, [r0], #4
 800766e:	b293      	uxth	r3, r2
 8007670:	fb05 a303 	mla	r3, r5, r3, sl
 8007674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007678:	b29b      	uxth	r3, r3
 800767a:	ebab 0303 	sub.w	r3, fp, r3
 800767e:	0c12      	lsrs	r2, r2, #16
 8007680:	f8de b000 	ldr.w	fp, [lr]
 8007684:	fb05 a202 	mla	r2, r5, r2, sl
 8007688:	fa13 f38b 	uxtah	r3, r3, fp
 800768c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007690:	fa1f fb82 	uxth.w	fp, r2
 8007694:	f8de 2000 	ldr.w	r2, [lr]
 8007698:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800769c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076a6:	4581      	cmp	r9, r0
 80076a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80076ac:	f84e 3b04 	str.w	r3, [lr], #4
 80076b0:	d2db      	bcs.n	800766a <quorem+0x42>
 80076b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80076b6:	b933      	cbnz	r3, 80076c6 <quorem+0x9e>
 80076b8:	9b01      	ldr	r3, [sp, #4]
 80076ba:	3b04      	subs	r3, #4
 80076bc:	429e      	cmp	r6, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	d330      	bcc.n	8007724 <quorem+0xfc>
 80076c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80076c6:	4640      	mov	r0, r8
 80076c8:	f001 fba4 	bl	8008e14 <__mcmp>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	db25      	blt.n	800771c <quorem+0xf4>
 80076d0:	3501      	adds	r5, #1
 80076d2:	4630      	mov	r0, r6
 80076d4:	f04f 0c00 	mov.w	ip, #0
 80076d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80076dc:	f8d0 e000 	ldr.w	lr, [r0]
 80076e0:	b293      	uxth	r3, r2
 80076e2:	ebac 0303 	sub.w	r3, ip, r3
 80076e6:	0c12      	lsrs	r2, r2, #16
 80076e8:	fa13 f38e 	uxtah	r3, r3, lr
 80076ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076fa:	45b9      	cmp	r9, r7
 80076fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007700:	f840 3b04 	str.w	r3, [r0], #4
 8007704:	d2e8      	bcs.n	80076d8 <quorem+0xb0>
 8007706:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800770a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800770e:	b92a      	cbnz	r2, 800771c <quorem+0xf4>
 8007710:	3b04      	subs	r3, #4
 8007712:	429e      	cmp	r6, r3
 8007714:	461a      	mov	r2, r3
 8007716:	d30b      	bcc.n	8007730 <quorem+0x108>
 8007718:	f8c8 4010 	str.w	r4, [r8, #16]
 800771c:	4628      	mov	r0, r5
 800771e:	b003      	add	sp, #12
 8007720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	3b04      	subs	r3, #4
 8007728:	2a00      	cmp	r2, #0
 800772a:	d1ca      	bne.n	80076c2 <quorem+0x9a>
 800772c:	3c01      	subs	r4, #1
 800772e:	e7c5      	b.n	80076bc <quorem+0x94>
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	3b04      	subs	r3, #4
 8007734:	2a00      	cmp	r2, #0
 8007736:	d1ef      	bne.n	8007718 <quorem+0xf0>
 8007738:	3c01      	subs	r4, #1
 800773a:	e7ea      	b.n	8007712 <quorem+0xea>
 800773c:	2000      	movs	r0, #0
 800773e:	e7ee      	b.n	800771e <quorem+0xf6>

08007740 <_dtoa_r>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	ec57 6b10 	vmov	r6, r7, d0
 8007748:	b097      	sub	sp, #92	; 0x5c
 800774a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800774c:	9106      	str	r1, [sp, #24]
 800774e:	4604      	mov	r4, r0
 8007750:	920b      	str	r2, [sp, #44]	; 0x2c
 8007752:	9312      	str	r3, [sp, #72]	; 0x48
 8007754:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007758:	e9cd 6700 	strd	r6, r7, [sp]
 800775c:	b93d      	cbnz	r5, 800776e <_dtoa_r+0x2e>
 800775e:	2010      	movs	r0, #16
 8007760:	f001 f8e0 	bl	8008924 <malloc>
 8007764:	6260      	str	r0, [r4, #36]	; 0x24
 8007766:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800776a:	6005      	str	r5, [r0, #0]
 800776c:	60c5      	str	r5, [r0, #12]
 800776e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007770:	6819      	ldr	r1, [r3, #0]
 8007772:	b151      	cbz	r1, 800778a <_dtoa_r+0x4a>
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	604a      	str	r2, [r1, #4]
 8007778:	2301      	movs	r3, #1
 800777a:	4093      	lsls	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
 800777e:	4620      	mov	r0, r4
 8007780:	f001 f929 	bl	80089d6 <_Bfree>
 8007784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	1e3b      	subs	r3, r7, #0
 800778c:	bfbb      	ittet	lt
 800778e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007792:	9301      	strlt	r3, [sp, #4]
 8007794:	2300      	movge	r3, #0
 8007796:	2201      	movlt	r2, #1
 8007798:	bfac      	ite	ge
 800779a:	f8c8 3000 	strge.w	r3, [r8]
 800779e:	f8c8 2000 	strlt.w	r2, [r8]
 80077a2:	4baf      	ldr	r3, [pc, #700]	; (8007a60 <_dtoa_r+0x320>)
 80077a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077a8:	ea33 0308 	bics.w	r3, r3, r8
 80077ac:	d114      	bne.n	80077d8 <_dtoa_r+0x98>
 80077ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	b923      	cbnz	r3, 80077c4 <_dtoa_r+0x84>
 80077ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80077be:	2800      	cmp	r0, #0
 80077c0:	f000 8542 	beq.w	8008248 <_dtoa_r+0xb08>
 80077c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007a74 <_dtoa_r+0x334>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8544 	beq.w	8008258 <_dtoa_r+0xb18>
 80077d0:	f10b 0303 	add.w	r3, fp, #3
 80077d4:	f000 bd3e 	b.w	8008254 <_dtoa_r+0xb14>
 80077d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80077dc:	2200      	movs	r2, #0
 80077de:	2300      	movs	r3, #0
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	f7f9 f980 	bl	8000ae8 <__aeabi_dcmpeq>
 80077e8:	4681      	mov	r9, r0
 80077ea:	b168      	cbz	r0, 8007808 <_dtoa_r+0xc8>
 80077ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077ee:	2301      	movs	r3, #1
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8524 	beq.w	8008242 <_dtoa_r+0xb02>
 80077fa:	4b9a      	ldr	r3, [pc, #616]	; (8007a64 <_dtoa_r+0x324>)
 80077fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	f000 bd28 	b.w	8008258 <_dtoa_r+0xb18>
 8007808:	aa14      	add	r2, sp, #80	; 0x50
 800780a:	a915      	add	r1, sp, #84	; 0x54
 800780c:	ec47 6b10 	vmov	d0, r6, r7
 8007810:	4620      	mov	r0, r4
 8007812:	f001 fbed 	bl	8008ff0 <__d2b>
 8007816:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800781a:	9004      	str	r0, [sp, #16]
 800781c:	2d00      	cmp	r5, #0
 800781e:	d07c      	beq.n	800791a <_dtoa_r+0x1da>
 8007820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007824:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007828:	46b2      	mov	sl, r6
 800782a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800782e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007832:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007836:	2200      	movs	r2, #0
 8007838:	4b8b      	ldr	r3, [pc, #556]	; (8007a68 <_dtoa_r+0x328>)
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	f7f8 fd33 	bl	80002a8 <__aeabi_dsub>
 8007842:	a381      	add	r3, pc, #516	; (adr r3, 8007a48 <_dtoa_r+0x308>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f8 fee6 	bl	8000618 <__aeabi_dmul>
 800784c:	a380      	add	r3, pc, #512	; (adr r3, 8007a50 <_dtoa_r+0x310>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fd2b 	bl	80002ac <__adddf3>
 8007856:	4606      	mov	r6, r0
 8007858:	4628      	mov	r0, r5
 800785a:	460f      	mov	r7, r1
 800785c:	f7f8 fe72 	bl	8000544 <__aeabi_i2d>
 8007860:	a37d      	add	r3, pc, #500	; (adr r3, 8007a58 <_dtoa_r+0x318>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fed7 	bl	8000618 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f8 fd1b 	bl	80002ac <__adddf3>
 8007876:	4606      	mov	r6, r0
 8007878:	460f      	mov	r7, r1
 800787a:	f7f9 f97d 	bl	8000b78 <__aeabi_d2iz>
 800787e:	2200      	movs	r2, #0
 8007880:	4682      	mov	sl, r0
 8007882:	2300      	movs	r3, #0
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f9 f938 	bl	8000afc <__aeabi_dcmplt>
 800788c:	b148      	cbz	r0, 80078a2 <_dtoa_r+0x162>
 800788e:	4650      	mov	r0, sl
 8007890:	f7f8 fe58 	bl	8000544 <__aeabi_i2d>
 8007894:	4632      	mov	r2, r6
 8007896:	463b      	mov	r3, r7
 8007898:	f7f9 f926 	bl	8000ae8 <__aeabi_dcmpeq>
 800789c:	b908      	cbnz	r0, 80078a2 <_dtoa_r+0x162>
 800789e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078a2:	f1ba 0f16 	cmp.w	sl, #22
 80078a6:	d859      	bhi.n	800795c <_dtoa_r+0x21c>
 80078a8:	4970      	ldr	r1, [pc, #448]	; (8007a6c <_dtoa_r+0x32c>)
 80078aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80078ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b6:	f7f9 f93f 	bl	8000b38 <__aeabi_dcmpgt>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d050      	beq.n	8007960 <_dtoa_r+0x220>
 80078be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c2:	2300      	movs	r3, #0
 80078c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80078c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078c8:	1b5d      	subs	r5, r3, r5
 80078ca:	f1b5 0801 	subs.w	r8, r5, #1
 80078ce:	bf49      	itett	mi
 80078d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80078d4:	2300      	movpl	r3, #0
 80078d6:	9305      	strmi	r3, [sp, #20]
 80078d8:	f04f 0800 	movmi.w	r8, #0
 80078dc:	bf58      	it	pl
 80078de:	9305      	strpl	r3, [sp, #20]
 80078e0:	f1ba 0f00 	cmp.w	sl, #0
 80078e4:	db3e      	blt.n	8007964 <_dtoa_r+0x224>
 80078e6:	2300      	movs	r3, #0
 80078e8:	44d0      	add	r8, sl
 80078ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80078ee:	9307      	str	r3, [sp, #28]
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	f200 8090 	bhi.w	8007a18 <_dtoa_r+0x2d8>
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	bfc4      	itt	gt
 80078fc:	3b04      	subgt	r3, #4
 80078fe:	9306      	strgt	r3, [sp, #24]
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	f1a3 0302 	sub.w	r3, r3, #2
 8007906:	bfcc      	ite	gt
 8007908:	2500      	movgt	r5, #0
 800790a:	2501      	movle	r5, #1
 800790c:	2b03      	cmp	r3, #3
 800790e:	f200 808f 	bhi.w	8007a30 <_dtoa_r+0x2f0>
 8007912:	e8df f003 	tbb	[pc, r3]
 8007916:	7f7d      	.short	0x7f7d
 8007918:	7131      	.short	0x7131
 800791a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800791e:	441d      	add	r5, r3
 8007920:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007924:	2820      	cmp	r0, #32
 8007926:	dd13      	ble.n	8007950 <_dtoa_r+0x210>
 8007928:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	fa08 f800 	lsl.w	r8, r8, r0
 8007932:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007936:	fa23 f000 	lsr.w	r0, r3, r0
 800793a:	ea48 0000 	orr.w	r0, r8, r0
 800793e:	f7f8 fdf1 	bl	8000524 <__aeabi_ui2d>
 8007942:	2301      	movs	r3, #1
 8007944:	4682      	mov	sl, r0
 8007946:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800794a:	3d01      	subs	r5, #1
 800794c:	9313      	str	r3, [sp, #76]	; 0x4c
 800794e:	e772      	b.n	8007836 <_dtoa_r+0xf6>
 8007950:	9b00      	ldr	r3, [sp, #0]
 8007952:	f1c0 0020 	rsb	r0, r0, #32
 8007956:	fa03 f000 	lsl.w	r0, r3, r0
 800795a:	e7f0      	b.n	800793e <_dtoa_r+0x1fe>
 800795c:	2301      	movs	r3, #1
 800795e:	e7b1      	b.n	80078c4 <_dtoa_r+0x184>
 8007960:	900f      	str	r0, [sp, #60]	; 0x3c
 8007962:	e7b0      	b.n	80078c6 <_dtoa_r+0x186>
 8007964:	9b05      	ldr	r3, [sp, #20]
 8007966:	eba3 030a 	sub.w	r3, r3, sl
 800796a:	9305      	str	r3, [sp, #20]
 800796c:	f1ca 0300 	rsb	r3, sl, #0
 8007970:	9307      	str	r3, [sp, #28]
 8007972:	2300      	movs	r3, #0
 8007974:	930e      	str	r3, [sp, #56]	; 0x38
 8007976:	e7bb      	b.n	80078f0 <_dtoa_r+0x1b0>
 8007978:	2301      	movs	r3, #1
 800797a:	930a      	str	r3, [sp, #40]	; 0x28
 800797c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797e:	2b00      	cmp	r3, #0
 8007980:	dd59      	ble.n	8007a36 <_dtoa_r+0x2f6>
 8007982:	9302      	str	r3, [sp, #8]
 8007984:	4699      	mov	r9, r3
 8007986:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007988:	2200      	movs	r2, #0
 800798a:	6072      	str	r2, [r6, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	f102 0014 	add.w	r0, r2, #20
 8007992:	4298      	cmp	r0, r3
 8007994:	6871      	ldr	r1, [r6, #4]
 8007996:	d953      	bls.n	8007a40 <_dtoa_r+0x300>
 8007998:	4620      	mov	r0, r4
 800799a:	f000 ffe8 	bl	800896e <_Balloc>
 800799e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a0:	6030      	str	r0, [r6, #0]
 80079a2:	f1b9 0f0e 	cmp.w	r9, #14
 80079a6:	f8d3 b000 	ldr.w	fp, [r3]
 80079aa:	f200 80e6 	bhi.w	8007b7a <_dtoa_r+0x43a>
 80079ae:	2d00      	cmp	r5, #0
 80079b0:	f000 80e3 	beq.w	8007b7a <_dtoa_r+0x43a>
 80079b4:	ed9d 7b00 	vldr	d7, [sp]
 80079b8:	f1ba 0f00 	cmp.w	sl, #0
 80079bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80079c0:	dd74      	ble.n	8007aac <_dtoa_r+0x36c>
 80079c2:	4a2a      	ldr	r2, [pc, #168]	; (8007a6c <_dtoa_r+0x32c>)
 80079c4:	f00a 030f 	and.w	r3, sl, #15
 80079c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079cc:	ed93 7b00 	vldr	d7, [r3]
 80079d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80079d4:	06f0      	lsls	r0, r6, #27
 80079d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80079da:	d565      	bpl.n	8007aa8 <_dtoa_r+0x368>
 80079dc:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <_dtoa_r+0x330>)
 80079de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e6:	f7f8 ff41 	bl	800086c <__aeabi_ddiv>
 80079ea:	e9cd 0100 	strd	r0, r1, [sp]
 80079ee:	f006 060f 	and.w	r6, r6, #15
 80079f2:	2503      	movs	r5, #3
 80079f4:	4f1e      	ldr	r7, [pc, #120]	; (8007a70 <_dtoa_r+0x330>)
 80079f6:	e04c      	b.n	8007a92 <_dtoa_r+0x352>
 80079f8:	2301      	movs	r3, #1
 80079fa:	930a      	str	r3, [sp, #40]	; 0x28
 80079fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079fe:	4453      	add	r3, sl
 8007a00:	f103 0901 	add.w	r9, r3, #1
 8007a04:	9302      	str	r3, [sp, #8]
 8007a06:	464b      	mov	r3, r9
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	bfb8      	it	lt
 8007a0c:	2301      	movlt	r3, #1
 8007a0e:	e7ba      	b.n	8007986 <_dtoa_r+0x246>
 8007a10:	2300      	movs	r3, #0
 8007a12:	e7b2      	b.n	800797a <_dtoa_r+0x23a>
 8007a14:	2300      	movs	r3, #0
 8007a16:	e7f0      	b.n	80079fa <_dtoa_r+0x2ba>
 8007a18:	2501      	movs	r5, #1
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9306      	str	r3, [sp, #24]
 8007a1e:	950a      	str	r5, [sp, #40]	; 0x28
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	4699      	mov	r9, r3
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2312      	movs	r3, #18
 8007a2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a2e:	e7aa      	b.n	8007986 <_dtoa_r+0x246>
 8007a30:	2301      	movs	r3, #1
 8007a32:	930a      	str	r3, [sp, #40]	; 0x28
 8007a34:	e7f4      	b.n	8007a20 <_dtoa_r+0x2e0>
 8007a36:	2301      	movs	r3, #1
 8007a38:	9302      	str	r3, [sp, #8]
 8007a3a:	4699      	mov	r9, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	e7f5      	b.n	8007a2c <_dtoa_r+0x2ec>
 8007a40:	3101      	adds	r1, #1
 8007a42:	6071      	str	r1, [r6, #4]
 8007a44:	0052      	lsls	r2, r2, #1
 8007a46:	e7a2      	b.n	800798e <_dtoa_r+0x24e>
 8007a48:	636f4361 	.word	0x636f4361
 8007a4c:	3fd287a7 	.word	0x3fd287a7
 8007a50:	8b60c8b3 	.word	0x8b60c8b3
 8007a54:	3fc68a28 	.word	0x3fc68a28
 8007a58:	509f79fb 	.word	0x509f79fb
 8007a5c:	3fd34413 	.word	0x3fd34413
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	0800a4c1 	.word	0x0800a4c1
 8007a68:	3ff80000 	.word	0x3ff80000
 8007a6c:	0800a580 	.word	0x0800a580
 8007a70:	0800a558 	.word	0x0800a558
 8007a74:	0800a549 	.word	0x0800a549
 8007a78:	07f1      	lsls	r1, r6, #31
 8007a7a:	d508      	bpl.n	8007a8e <_dtoa_r+0x34e>
 8007a7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a84:	f7f8 fdc8 	bl	8000618 <__aeabi_dmul>
 8007a88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	1076      	asrs	r6, r6, #1
 8007a90:	3708      	adds	r7, #8
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d1f0      	bne.n	8007a78 <_dtoa_r+0x338>
 8007a96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a9e:	f7f8 fee5 	bl	800086c <__aeabi_ddiv>
 8007aa2:	e9cd 0100 	strd	r0, r1, [sp]
 8007aa6:	e01a      	b.n	8007ade <_dtoa_r+0x39e>
 8007aa8:	2502      	movs	r5, #2
 8007aaa:	e7a3      	b.n	80079f4 <_dtoa_r+0x2b4>
 8007aac:	f000 80a0 	beq.w	8007bf0 <_dtoa_r+0x4b0>
 8007ab0:	f1ca 0600 	rsb	r6, sl, #0
 8007ab4:	4b9f      	ldr	r3, [pc, #636]	; (8007d34 <_dtoa_r+0x5f4>)
 8007ab6:	4fa0      	ldr	r7, [pc, #640]	; (8007d38 <_dtoa_r+0x5f8>)
 8007ab8:	f006 020f 	and.w	r2, r6, #15
 8007abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ac8:	f7f8 fda6 	bl	8000618 <__aeabi_dmul>
 8007acc:	e9cd 0100 	strd	r0, r1, [sp]
 8007ad0:	1136      	asrs	r6, r6, #4
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2502      	movs	r5, #2
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d17f      	bne.n	8007bda <_dtoa_r+0x49a>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e1      	bne.n	8007aa2 <_dtoa_r+0x362>
 8007ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 8087 	beq.w	8007bf4 <_dtoa_r+0x4b4>
 8007ae6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007aea:	2200      	movs	r2, #0
 8007aec:	4b93      	ldr	r3, [pc, #588]	; (8007d3c <_dtoa_r+0x5fc>)
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f9 f803 	bl	8000afc <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d07c      	beq.n	8007bf4 <_dtoa_r+0x4b4>
 8007afa:	f1b9 0f00 	cmp.w	r9, #0
 8007afe:	d079      	beq.n	8007bf4 <_dtoa_r+0x4b4>
 8007b00:	9b02      	ldr	r3, [sp, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dd35      	ble.n	8007b72 <_dtoa_r+0x432>
 8007b06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b0a:	9308      	str	r3, [sp, #32]
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4b8b      	ldr	r3, [pc, #556]	; (8007d40 <_dtoa_r+0x600>)
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7f8 fd80 	bl	8000618 <__aeabi_dmul>
 8007b18:	e9cd 0100 	strd	r0, r1, [sp]
 8007b1c:	9f02      	ldr	r7, [sp, #8]
 8007b1e:	3501      	adds	r5, #1
 8007b20:	4628      	mov	r0, r5
 8007b22:	f7f8 fd0f 	bl	8000544 <__aeabi_i2d>
 8007b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b2a:	f7f8 fd75 	bl	8000618 <__aeabi_dmul>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	4b84      	ldr	r3, [pc, #528]	; (8007d44 <_dtoa_r+0x604>)
 8007b32:	f7f8 fbbb 	bl	80002ac <__adddf3>
 8007b36:	4605      	mov	r5, r0
 8007b38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b3c:	2f00      	cmp	r7, #0
 8007b3e:	d15d      	bne.n	8007bfc <_dtoa_r+0x4bc>
 8007b40:	2200      	movs	r2, #0
 8007b42:	4b81      	ldr	r3, [pc, #516]	; (8007d48 <_dtoa_r+0x608>)
 8007b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b48:	f7f8 fbae 	bl	80002a8 <__aeabi_dsub>
 8007b4c:	462a      	mov	r2, r5
 8007b4e:	4633      	mov	r3, r6
 8007b50:	e9cd 0100 	strd	r0, r1, [sp]
 8007b54:	f7f8 fff0 	bl	8000b38 <__aeabi_dcmpgt>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f040 8288 	bne.w	800806e <_dtoa_r+0x92e>
 8007b5e:	462a      	mov	r2, r5
 8007b60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b68:	f7f8 ffc8 	bl	8000afc <__aeabi_dcmplt>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	f040 827c 	bne.w	800806a <_dtoa_r+0x92a>
 8007b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b76:	e9cd 2300 	strd	r2, r3, [sp]
 8007b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f2c0 8150 	blt.w	8007e22 <_dtoa_r+0x6e2>
 8007b82:	f1ba 0f0e 	cmp.w	sl, #14
 8007b86:	f300 814c 	bgt.w	8007e22 <_dtoa_r+0x6e2>
 8007b8a:	4b6a      	ldr	r3, [pc, #424]	; (8007d34 <_dtoa_r+0x5f4>)
 8007b8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b90:	ed93 7b00 	vldr	d7, [r3]
 8007b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b9c:	f280 80d8 	bge.w	8007d50 <_dtoa_r+0x610>
 8007ba0:	f1b9 0f00 	cmp.w	r9, #0
 8007ba4:	f300 80d4 	bgt.w	8007d50 <_dtoa_r+0x610>
 8007ba8:	f040 825e 	bne.w	8008068 <_dtoa_r+0x928>
 8007bac:	2200      	movs	r2, #0
 8007bae:	4b66      	ldr	r3, [pc, #408]	; (8007d48 <_dtoa_r+0x608>)
 8007bb0:	ec51 0b17 	vmov	r0, r1, d7
 8007bb4:	f7f8 fd30 	bl	8000618 <__aeabi_dmul>
 8007bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bbc:	f7f8 ffb2 	bl	8000b24 <__aeabi_dcmpge>
 8007bc0:	464f      	mov	r7, r9
 8007bc2:	464e      	mov	r6, r9
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 8234 	bne.w	8008032 <_dtoa_r+0x8f2>
 8007bca:	2331      	movs	r3, #49	; 0x31
 8007bcc:	f10b 0501 	add.w	r5, fp, #1
 8007bd0:	f88b 3000 	strb.w	r3, [fp]
 8007bd4:	f10a 0a01 	add.w	sl, sl, #1
 8007bd8:	e22f      	b.n	800803a <_dtoa_r+0x8fa>
 8007bda:	07f2      	lsls	r2, r6, #31
 8007bdc:	d505      	bpl.n	8007bea <_dtoa_r+0x4aa>
 8007bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be2:	f7f8 fd19 	bl	8000618 <__aeabi_dmul>
 8007be6:	3501      	adds	r5, #1
 8007be8:	2301      	movs	r3, #1
 8007bea:	1076      	asrs	r6, r6, #1
 8007bec:	3708      	adds	r7, #8
 8007bee:	e772      	b.n	8007ad6 <_dtoa_r+0x396>
 8007bf0:	2502      	movs	r5, #2
 8007bf2:	e774      	b.n	8007ade <_dtoa_r+0x39e>
 8007bf4:	f8cd a020 	str.w	sl, [sp, #32]
 8007bf8:	464f      	mov	r7, r9
 8007bfa:	e791      	b.n	8007b20 <_dtoa_r+0x3e0>
 8007bfc:	4b4d      	ldr	r3, [pc, #308]	; (8007d34 <_dtoa_r+0x5f4>)
 8007bfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d047      	beq.n	8007c9c <_dtoa_r+0x55c>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	2000      	movs	r0, #0
 8007c12:	494e      	ldr	r1, [pc, #312]	; (8007d4c <_dtoa_r+0x60c>)
 8007c14:	f7f8 fe2a 	bl	800086c <__aeabi_ddiv>
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4633      	mov	r3, r6
 8007c1c:	f7f8 fb44 	bl	80002a8 <__aeabi_dsub>
 8007c20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c24:	465d      	mov	r5, fp
 8007c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c2a:	f7f8 ffa5 	bl	8000b78 <__aeabi_d2iz>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	f7f8 fc88 	bl	8000544 <__aeabi_i2d>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c3c:	f7f8 fb34 	bl	80002a8 <__aeabi_dsub>
 8007c40:	3630      	adds	r6, #48	; 0x30
 8007c42:	f805 6b01 	strb.w	r6, [r5], #1
 8007c46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c4e:	f7f8 ff55 	bl	8000afc <__aeabi_dcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d163      	bne.n	8007d1e <_dtoa_r+0x5de>
 8007c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	4937      	ldr	r1, [pc, #220]	; (8007d3c <_dtoa_r+0x5fc>)
 8007c5e:	f7f8 fb23 	bl	80002a8 <__aeabi_dsub>
 8007c62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c66:	f7f8 ff49 	bl	8000afc <__aeabi_dcmplt>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f040 80b7 	bne.w	8007dde <_dtoa_r+0x69e>
 8007c70:	eba5 030b 	sub.w	r3, r5, fp
 8007c74:	429f      	cmp	r7, r3
 8007c76:	f77f af7c 	ble.w	8007b72 <_dtoa_r+0x432>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4b30      	ldr	r3, [pc, #192]	; (8007d40 <_dtoa_r+0x600>)
 8007c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c82:	f7f8 fcc9 	bl	8000618 <__aeabi_dmul>
 8007c86:	2200      	movs	r2, #0
 8007c88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c8c:	4b2c      	ldr	r3, [pc, #176]	; (8007d40 <_dtoa_r+0x600>)
 8007c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c92:	f7f8 fcc1 	bl	8000618 <__aeabi_dmul>
 8007c96:	e9cd 0100 	strd	r0, r1, [sp]
 8007c9a:	e7c4      	b.n	8007c26 <_dtoa_r+0x4e6>
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4633      	mov	r3, r6
 8007ca0:	f7f8 fcba 	bl	8000618 <__aeabi_dmul>
 8007ca4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ca8:	eb0b 0507 	add.w	r5, fp, r7
 8007cac:	465e      	mov	r6, fp
 8007cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cb2:	f7f8 ff61 	bl	8000b78 <__aeabi_d2iz>
 8007cb6:	4607      	mov	r7, r0
 8007cb8:	f7f8 fc44 	bl	8000544 <__aeabi_i2d>
 8007cbc:	3730      	adds	r7, #48	; 0x30
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cc6:	f7f8 faef 	bl	80002a8 <__aeabi_dsub>
 8007cca:	f806 7b01 	strb.w	r7, [r6], #1
 8007cce:	42ae      	cmp	r6, r5
 8007cd0:	e9cd 0100 	strd	r0, r1, [sp]
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	d126      	bne.n	8007d28 <_dtoa_r+0x5e8>
 8007cda:	4b1c      	ldr	r3, [pc, #112]	; (8007d4c <_dtoa_r+0x60c>)
 8007cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ce0:	f7f8 fae4 	bl	80002ac <__adddf3>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cec:	f7f8 ff24 	bl	8000b38 <__aeabi_dcmpgt>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d174      	bne.n	8007dde <_dtoa_r+0x69e>
 8007cf4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	4914      	ldr	r1, [pc, #80]	; (8007d4c <_dtoa_r+0x60c>)
 8007cfc:	f7f8 fad4 	bl	80002a8 <__aeabi_dsub>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d08:	f7f8 fef8 	bl	8000afc <__aeabi_dcmplt>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	f43f af30 	beq.w	8007b72 <_dtoa_r+0x432>
 8007d12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d16:	2b30      	cmp	r3, #48	; 0x30
 8007d18:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d1c:	d002      	beq.n	8007d24 <_dtoa_r+0x5e4>
 8007d1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d22:	e04a      	b.n	8007dba <_dtoa_r+0x67a>
 8007d24:	4615      	mov	r5, r2
 8007d26:	e7f4      	b.n	8007d12 <_dtoa_r+0x5d2>
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <_dtoa_r+0x600>)
 8007d2a:	f7f8 fc75 	bl	8000618 <__aeabi_dmul>
 8007d2e:	e9cd 0100 	strd	r0, r1, [sp]
 8007d32:	e7bc      	b.n	8007cae <_dtoa_r+0x56e>
 8007d34:	0800a580 	.word	0x0800a580
 8007d38:	0800a558 	.word	0x0800a558
 8007d3c:	3ff00000 	.word	0x3ff00000
 8007d40:	40240000 	.word	0x40240000
 8007d44:	401c0000 	.word	0x401c0000
 8007d48:	40140000 	.word	0x40140000
 8007d4c:	3fe00000 	.word	0x3fe00000
 8007d50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d54:	465d      	mov	r5, fp
 8007d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	f7f8 fd85 	bl	800086c <__aeabi_ddiv>
 8007d62:	f7f8 ff09 	bl	8000b78 <__aeabi_d2iz>
 8007d66:	4680      	mov	r8, r0
 8007d68:	f7f8 fbec 	bl	8000544 <__aeabi_i2d>
 8007d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d70:	f7f8 fc52 	bl	8000618 <__aeabi_dmul>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007d80:	f7f8 fa92 	bl	80002a8 <__aeabi_dsub>
 8007d84:	f805 6b01 	strb.w	r6, [r5], #1
 8007d88:	eba5 060b 	sub.w	r6, r5, fp
 8007d8c:	45b1      	cmp	r9, r6
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	d139      	bne.n	8007e08 <_dtoa_r+0x6c8>
 8007d94:	f7f8 fa8a 	bl	80002ac <__adddf3>
 8007d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	460f      	mov	r7, r1
 8007da0:	f7f8 feca 	bl	8000b38 <__aeabi_dcmpgt>
 8007da4:	b9c8      	cbnz	r0, 8007dda <_dtoa_r+0x69a>
 8007da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007daa:	4630      	mov	r0, r6
 8007dac:	4639      	mov	r1, r7
 8007dae:	f7f8 fe9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007db2:	b110      	cbz	r0, 8007dba <_dtoa_r+0x67a>
 8007db4:	f018 0f01 	tst.w	r8, #1
 8007db8:	d10f      	bne.n	8007dda <_dtoa_r+0x69a>
 8007dba:	9904      	ldr	r1, [sp, #16]
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 fe0a 	bl	80089d6 <_Bfree>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dc6:	702b      	strb	r3, [r5, #0]
 8007dc8:	f10a 0301 	add.w	r3, sl, #1
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8241 	beq.w	8008258 <_dtoa_r+0xb18>
 8007dd6:	601d      	str	r5, [r3, #0]
 8007dd8:	e23e      	b.n	8008258 <_dtoa_r+0xb18>
 8007dda:	f8cd a020 	str.w	sl, [sp, #32]
 8007dde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007de2:	2a39      	cmp	r2, #57	; 0x39
 8007de4:	f105 33ff 	add.w	r3, r5, #4294967295
 8007de8:	d108      	bne.n	8007dfc <_dtoa_r+0x6bc>
 8007dea:	459b      	cmp	fp, r3
 8007dec:	d10a      	bne.n	8007e04 <_dtoa_r+0x6c4>
 8007dee:	9b08      	ldr	r3, [sp, #32]
 8007df0:	3301      	adds	r3, #1
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	2330      	movs	r3, #48	; 0x30
 8007df6:	f88b 3000 	strb.w	r3, [fp]
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	781a      	ldrb	r2, [r3, #0]
 8007dfe:	3201      	adds	r2, #1
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	e78c      	b.n	8007d1e <_dtoa_r+0x5de>
 8007e04:	461d      	mov	r5, r3
 8007e06:	e7ea      	b.n	8007dde <_dtoa_r+0x69e>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4b9b      	ldr	r3, [pc, #620]	; (8008078 <_dtoa_r+0x938>)
 8007e0c:	f7f8 fc04 	bl	8000618 <__aeabi_dmul>
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4606      	mov	r6, r0
 8007e16:	460f      	mov	r7, r1
 8007e18:	f7f8 fe66 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d09a      	beq.n	8007d56 <_dtoa_r+0x616>
 8007e20:	e7cb      	b.n	8007dba <_dtoa_r+0x67a>
 8007e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	f000 808b 	beq.w	8007f40 <_dtoa_r+0x800>
 8007e2a:	9a06      	ldr	r2, [sp, #24]
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	dc6e      	bgt.n	8007f0e <_dtoa_r+0x7ce>
 8007e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	d067      	beq.n	8007f06 <_dtoa_r+0x7c6>
 8007e36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e3a:	9f07      	ldr	r7, [sp, #28]
 8007e3c:	9d05      	ldr	r5, [sp, #20]
 8007e3e:	9a05      	ldr	r2, [sp, #20]
 8007e40:	2101      	movs	r1, #1
 8007e42:	441a      	add	r2, r3
 8007e44:	4620      	mov	r0, r4
 8007e46:	9205      	str	r2, [sp, #20]
 8007e48:	4498      	add	r8, r3
 8007e4a:	f000 fea2 	bl	8008b92 <__i2b>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	dd0c      	ble.n	8007e6e <_dtoa_r+0x72e>
 8007e54:	f1b8 0f00 	cmp.w	r8, #0
 8007e58:	dd09      	ble.n	8007e6e <_dtoa_r+0x72e>
 8007e5a:	4545      	cmp	r5, r8
 8007e5c:	9a05      	ldr	r2, [sp, #20]
 8007e5e:	462b      	mov	r3, r5
 8007e60:	bfa8      	it	ge
 8007e62:	4643      	movge	r3, r8
 8007e64:	1ad2      	subs	r2, r2, r3
 8007e66:	9205      	str	r2, [sp, #20]
 8007e68:	1aed      	subs	r5, r5, r3
 8007e6a:	eba8 0803 	sub.w	r8, r8, r3
 8007e6e:	9b07      	ldr	r3, [sp, #28]
 8007e70:	b1eb      	cbz	r3, 8007eae <_dtoa_r+0x76e>
 8007e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d067      	beq.n	8007f48 <_dtoa_r+0x808>
 8007e78:	b18f      	cbz	r7, 8007e9e <_dtoa_r+0x75e>
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	463a      	mov	r2, r7
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 ff26 	bl	8008cd0 <__pow5mult>
 8007e84:	9a04      	ldr	r2, [sp, #16]
 8007e86:	4601      	mov	r1, r0
 8007e88:	4606      	mov	r6, r0
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 fe8a 	bl	8008ba4 <__multiply>
 8007e90:	9904      	ldr	r1, [sp, #16]
 8007e92:	9008      	str	r0, [sp, #32]
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fd9e 	bl	80089d6 <_Bfree>
 8007e9a:	9b08      	ldr	r3, [sp, #32]
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	9b07      	ldr	r3, [sp, #28]
 8007ea0:	1bda      	subs	r2, r3, r7
 8007ea2:	d004      	beq.n	8007eae <_dtoa_r+0x76e>
 8007ea4:	9904      	ldr	r1, [sp, #16]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 ff12 	bl	8008cd0 <__pow5mult>
 8007eac:	9004      	str	r0, [sp, #16]
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 fe6e 	bl	8008b92 <__i2b>
 8007eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eb8:	4607      	mov	r7, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 81d0 	beq.w	8008260 <_dtoa_r+0xb20>
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 ff03 	bl	8008cd0 <__pow5mult>
 8007eca:	9b06      	ldr	r3, [sp, #24]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	4607      	mov	r7, r0
 8007ed0:	dc40      	bgt.n	8007f54 <_dtoa_r+0x814>
 8007ed2:	9b00      	ldr	r3, [sp, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d139      	bne.n	8007f4c <_dtoa_r+0x80c>
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d136      	bne.n	8007f50 <_dtoa_r+0x810>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ee8:	0d1b      	lsrs	r3, r3, #20
 8007eea:	051b      	lsls	r3, r3, #20
 8007eec:	b12b      	cbz	r3, 8007efa <_dtoa_r+0x7ba>
 8007eee:	9b05      	ldr	r3, [sp, #20]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	9305      	str	r3, [sp, #20]
 8007ef4:	f108 0801 	add.w	r8, r8, #1
 8007ef8:	2301      	movs	r3, #1
 8007efa:	9307      	str	r3, [sp, #28]
 8007efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d12a      	bne.n	8007f58 <_dtoa_r+0x818>
 8007f02:	2001      	movs	r0, #1
 8007f04:	e030      	b.n	8007f68 <_dtoa_r+0x828>
 8007f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f0c:	e795      	b.n	8007e3a <_dtoa_r+0x6fa>
 8007f0e:	9b07      	ldr	r3, [sp, #28]
 8007f10:	f109 37ff 	add.w	r7, r9, #4294967295
 8007f14:	42bb      	cmp	r3, r7
 8007f16:	bfbf      	itttt	lt
 8007f18:	9b07      	ldrlt	r3, [sp, #28]
 8007f1a:	9707      	strlt	r7, [sp, #28]
 8007f1c:	1afa      	sublt	r2, r7, r3
 8007f1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f20:	bfbb      	ittet	lt
 8007f22:	189b      	addlt	r3, r3, r2
 8007f24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f26:	1bdf      	subge	r7, r3, r7
 8007f28:	2700      	movlt	r7, #0
 8007f2a:	f1b9 0f00 	cmp.w	r9, #0
 8007f2e:	bfb5      	itete	lt
 8007f30:	9b05      	ldrlt	r3, [sp, #20]
 8007f32:	9d05      	ldrge	r5, [sp, #20]
 8007f34:	eba3 0509 	sublt.w	r5, r3, r9
 8007f38:	464b      	movge	r3, r9
 8007f3a:	bfb8      	it	lt
 8007f3c:	2300      	movlt	r3, #0
 8007f3e:	e77e      	b.n	8007e3e <_dtoa_r+0x6fe>
 8007f40:	9f07      	ldr	r7, [sp, #28]
 8007f42:	9d05      	ldr	r5, [sp, #20]
 8007f44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f46:	e783      	b.n	8007e50 <_dtoa_r+0x710>
 8007f48:	9a07      	ldr	r2, [sp, #28]
 8007f4a:	e7ab      	b.n	8007ea4 <_dtoa_r+0x764>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e7d4      	b.n	8007efa <_dtoa_r+0x7ba>
 8007f50:	9b00      	ldr	r3, [sp, #0]
 8007f52:	e7d2      	b.n	8007efa <_dtoa_r+0x7ba>
 8007f54:	2300      	movs	r3, #0
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007f5e:	6918      	ldr	r0, [r3, #16]
 8007f60:	f000 fdc9 	bl	8008af6 <__hi0bits>
 8007f64:	f1c0 0020 	rsb	r0, r0, #32
 8007f68:	4440      	add	r0, r8
 8007f6a:	f010 001f 	ands.w	r0, r0, #31
 8007f6e:	d047      	beq.n	8008000 <_dtoa_r+0x8c0>
 8007f70:	f1c0 0320 	rsb	r3, r0, #32
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	dd3b      	ble.n	8007ff0 <_dtoa_r+0x8b0>
 8007f78:	9b05      	ldr	r3, [sp, #20]
 8007f7a:	f1c0 001c 	rsb	r0, r0, #28
 8007f7e:	4403      	add	r3, r0
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	4405      	add	r5, r0
 8007f84:	4480      	add	r8, r0
 8007f86:	9b05      	ldr	r3, [sp, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dd05      	ble.n	8007f98 <_dtoa_r+0x858>
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	9904      	ldr	r1, [sp, #16]
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 feeb 	bl	8008d6c <__lshift>
 8007f96:	9004      	str	r0, [sp, #16]
 8007f98:	f1b8 0f00 	cmp.w	r8, #0
 8007f9c:	dd05      	ble.n	8007faa <_dtoa_r+0x86a>
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fee2 	bl	8008d6c <__lshift>
 8007fa8:	4607      	mov	r7, r0
 8007faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fac:	b353      	cbz	r3, 8008004 <_dtoa_r+0x8c4>
 8007fae:	4639      	mov	r1, r7
 8007fb0:	9804      	ldr	r0, [sp, #16]
 8007fb2:	f000 ff2f 	bl	8008e14 <__mcmp>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	da24      	bge.n	8008004 <_dtoa_r+0x8c4>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	9904      	ldr	r1, [sp, #16]
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 fd1f 	bl	8008a04 <__multadd>
 8007fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc8:	9004      	str	r0, [sp, #16]
 8007fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 814d 	beq.w	800826e <_dtoa_r+0xb2e>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fd12 	bl	8008a04 <__multadd>
 8007fe0:	9b02      	ldr	r3, [sp, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	dc4f      	bgt.n	8008088 <_dtoa_r+0x948>
 8007fe8:	9b06      	ldr	r3, [sp, #24]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	dd4c      	ble.n	8008088 <_dtoa_r+0x948>
 8007fee:	e011      	b.n	8008014 <_dtoa_r+0x8d4>
 8007ff0:	d0c9      	beq.n	8007f86 <_dtoa_r+0x846>
 8007ff2:	9a05      	ldr	r2, [sp, #20]
 8007ff4:	331c      	adds	r3, #28
 8007ff6:	441a      	add	r2, r3
 8007ff8:	9205      	str	r2, [sp, #20]
 8007ffa:	441d      	add	r5, r3
 8007ffc:	4498      	add	r8, r3
 8007ffe:	e7c2      	b.n	8007f86 <_dtoa_r+0x846>
 8008000:	4603      	mov	r3, r0
 8008002:	e7f6      	b.n	8007ff2 <_dtoa_r+0x8b2>
 8008004:	f1b9 0f00 	cmp.w	r9, #0
 8008008:	dc38      	bgt.n	800807c <_dtoa_r+0x93c>
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	2b02      	cmp	r3, #2
 800800e:	dd35      	ble.n	800807c <_dtoa_r+0x93c>
 8008010:	f8cd 9008 	str.w	r9, [sp, #8]
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	b963      	cbnz	r3, 8008032 <_dtoa_r+0x8f2>
 8008018:	4639      	mov	r1, r7
 800801a:	2205      	movs	r2, #5
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fcf1 	bl	8008a04 <__multadd>
 8008022:	4601      	mov	r1, r0
 8008024:	4607      	mov	r7, r0
 8008026:	9804      	ldr	r0, [sp, #16]
 8008028:	f000 fef4 	bl	8008e14 <__mcmp>
 800802c:	2800      	cmp	r0, #0
 800802e:	f73f adcc 	bgt.w	8007bca <_dtoa_r+0x48a>
 8008032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008034:	465d      	mov	r5, fp
 8008036:	ea6f 0a03 	mvn.w	sl, r3
 800803a:	f04f 0900 	mov.w	r9, #0
 800803e:	4639      	mov	r1, r7
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fcc8 	bl	80089d6 <_Bfree>
 8008046:	2e00      	cmp	r6, #0
 8008048:	f43f aeb7 	beq.w	8007dba <_dtoa_r+0x67a>
 800804c:	f1b9 0f00 	cmp.w	r9, #0
 8008050:	d005      	beq.n	800805e <_dtoa_r+0x91e>
 8008052:	45b1      	cmp	r9, r6
 8008054:	d003      	beq.n	800805e <_dtoa_r+0x91e>
 8008056:	4649      	mov	r1, r9
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fcbc 	bl	80089d6 <_Bfree>
 800805e:	4631      	mov	r1, r6
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fcb8 	bl	80089d6 <_Bfree>
 8008066:	e6a8      	b.n	8007dba <_dtoa_r+0x67a>
 8008068:	2700      	movs	r7, #0
 800806a:	463e      	mov	r6, r7
 800806c:	e7e1      	b.n	8008032 <_dtoa_r+0x8f2>
 800806e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008072:	463e      	mov	r6, r7
 8008074:	e5a9      	b.n	8007bca <_dtoa_r+0x48a>
 8008076:	bf00      	nop
 8008078:	40240000 	.word	0x40240000
 800807c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80fa 	beq.w	800827c <_dtoa_r+0xb3c>
 8008088:	2d00      	cmp	r5, #0
 800808a:	dd05      	ble.n	8008098 <_dtoa_r+0x958>
 800808c:	4631      	mov	r1, r6
 800808e:	462a      	mov	r2, r5
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fe6b 	bl	8008d6c <__lshift>
 8008096:	4606      	mov	r6, r0
 8008098:	9b07      	ldr	r3, [sp, #28]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d04c      	beq.n	8008138 <_dtoa_r+0x9f8>
 800809e:	6871      	ldr	r1, [r6, #4]
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fc64 	bl	800896e <_Balloc>
 80080a6:	6932      	ldr	r2, [r6, #16]
 80080a8:	3202      	adds	r2, #2
 80080aa:	4605      	mov	r5, r0
 80080ac:	0092      	lsls	r2, r2, #2
 80080ae:	f106 010c 	add.w	r1, r6, #12
 80080b2:	300c      	adds	r0, #12
 80080b4:	f000 fc50 	bl	8008958 <memcpy>
 80080b8:	2201      	movs	r2, #1
 80080ba:	4629      	mov	r1, r5
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fe55 	bl	8008d6c <__lshift>
 80080c2:	9b00      	ldr	r3, [sp, #0]
 80080c4:	f8cd b014 	str.w	fp, [sp, #20]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	46b1      	mov	r9, r6
 80080ce:	9307      	str	r3, [sp, #28]
 80080d0:	4606      	mov	r6, r0
 80080d2:	4639      	mov	r1, r7
 80080d4:	9804      	ldr	r0, [sp, #16]
 80080d6:	f7ff faa7 	bl	8007628 <quorem>
 80080da:	4649      	mov	r1, r9
 80080dc:	4605      	mov	r5, r0
 80080de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80080e2:	9804      	ldr	r0, [sp, #16]
 80080e4:	f000 fe96 	bl	8008e14 <__mcmp>
 80080e8:	4632      	mov	r2, r6
 80080ea:	9000      	str	r0, [sp, #0]
 80080ec:	4639      	mov	r1, r7
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 feaa 	bl	8008e48 <__mdiff>
 80080f4:	68c3      	ldr	r3, [r0, #12]
 80080f6:	4602      	mov	r2, r0
 80080f8:	bb03      	cbnz	r3, 800813c <_dtoa_r+0x9fc>
 80080fa:	4601      	mov	r1, r0
 80080fc:	9008      	str	r0, [sp, #32]
 80080fe:	9804      	ldr	r0, [sp, #16]
 8008100:	f000 fe88 	bl	8008e14 <__mcmp>
 8008104:	9a08      	ldr	r2, [sp, #32]
 8008106:	4603      	mov	r3, r0
 8008108:	4611      	mov	r1, r2
 800810a:	4620      	mov	r0, r4
 800810c:	9308      	str	r3, [sp, #32]
 800810e:	f000 fc62 	bl	80089d6 <_Bfree>
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	b9a3      	cbnz	r3, 8008140 <_dtoa_r+0xa00>
 8008116:	9a06      	ldr	r2, [sp, #24]
 8008118:	b992      	cbnz	r2, 8008140 <_dtoa_r+0xa00>
 800811a:	9a07      	ldr	r2, [sp, #28]
 800811c:	b982      	cbnz	r2, 8008140 <_dtoa_r+0xa00>
 800811e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008122:	d029      	beq.n	8008178 <_dtoa_r+0xa38>
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	dd01      	ble.n	800812e <_dtoa_r+0x9ee>
 800812a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800812e:	9b05      	ldr	r3, [sp, #20]
 8008130:	1c5d      	adds	r5, r3, #1
 8008132:	f883 8000 	strb.w	r8, [r3]
 8008136:	e782      	b.n	800803e <_dtoa_r+0x8fe>
 8008138:	4630      	mov	r0, r6
 800813a:	e7c2      	b.n	80080c2 <_dtoa_r+0x982>
 800813c:	2301      	movs	r3, #1
 800813e:	e7e3      	b.n	8008108 <_dtoa_r+0x9c8>
 8008140:	9a00      	ldr	r2, [sp, #0]
 8008142:	2a00      	cmp	r2, #0
 8008144:	db04      	blt.n	8008150 <_dtoa_r+0xa10>
 8008146:	d125      	bne.n	8008194 <_dtoa_r+0xa54>
 8008148:	9a06      	ldr	r2, [sp, #24]
 800814a:	bb1a      	cbnz	r2, 8008194 <_dtoa_r+0xa54>
 800814c:	9a07      	ldr	r2, [sp, #28]
 800814e:	bb0a      	cbnz	r2, 8008194 <_dtoa_r+0xa54>
 8008150:	2b00      	cmp	r3, #0
 8008152:	ddec      	ble.n	800812e <_dtoa_r+0x9ee>
 8008154:	2201      	movs	r2, #1
 8008156:	9904      	ldr	r1, [sp, #16]
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fe07 	bl	8008d6c <__lshift>
 800815e:	4639      	mov	r1, r7
 8008160:	9004      	str	r0, [sp, #16]
 8008162:	f000 fe57 	bl	8008e14 <__mcmp>
 8008166:	2800      	cmp	r0, #0
 8008168:	dc03      	bgt.n	8008172 <_dtoa_r+0xa32>
 800816a:	d1e0      	bne.n	800812e <_dtoa_r+0x9ee>
 800816c:	f018 0f01 	tst.w	r8, #1
 8008170:	d0dd      	beq.n	800812e <_dtoa_r+0x9ee>
 8008172:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008176:	d1d8      	bne.n	800812a <_dtoa_r+0x9ea>
 8008178:	9b05      	ldr	r3, [sp, #20]
 800817a:	9a05      	ldr	r2, [sp, #20]
 800817c:	1c5d      	adds	r5, r3, #1
 800817e:	2339      	movs	r3, #57	; 0x39
 8008180:	7013      	strb	r3, [r2, #0]
 8008182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008186:	2b39      	cmp	r3, #57	; 0x39
 8008188:	f105 32ff 	add.w	r2, r5, #4294967295
 800818c:	d04f      	beq.n	800822e <_dtoa_r+0xaee>
 800818e:	3301      	adds	r3, #1
 8008190:	7013      	strb	r3, [r2, #0]
 8008192:	e754      	b.n	800803e <_dtoa_r+0x8fe>
 8008194:	9a05      	ldr	r2, [sp, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f102 0501 	add.w	r5, r2, #1
 800819c:	dd06      	ble.n	80081ac <_dtoa_r+0xa6c>
 800819e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081a2:	d0e9      	beq.n	8008178 <_dtoa_r+0xa38>
 80081a4:	f108 0801 	add.w	r8, r8, #1
 80081a8:	9b05      	ldr	r3, [sp, #20]
 80081aa:	e7c2      	b.n	8008132 <_dtoa_r+0x9f2>
 80081ac:	9a02      	ldr	r2, [sp, #8]
 80081ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80081b2:	eba5 030b 	sub.w	r3, r5, fp
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d021      	beq.n	80081fe <_dtoa_r+0xabe>
 80081ba:	2300      	movs	r3, #0
 80081bc:	220a      	movs	r2, #10
 80081be:	9904      	ldr	r1, [sp, #16]
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fc1f 	bl	8008a04 <__multadd>
 80081c6:	45b1      	cmp	r9, r6
 80081c8:	9004      	str	r0, [sp, #16]
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	f04f 020a 	mov.w	r2, #10
 80081d2:	4649      	mov	r1, r9
 80081d4:	4620      	mov	r0, r4
 80081d6:	d105      	bne.n	80081e4 <_dtoa_r+0xaa4>
 80081d8:	f000 fc14 	bl	8008a04 <__multadd>
 80081dc:	4681      	mov	r9, r0
 80081de:	4606      	mov	r6, r0
 80081e0:	9505      	str	r5, [sp, #20]
 80081e2:	e776      	b.n	80080d2 <_dtoa_r+0x992>
 80081e4:	f000 fc0e 	bl	8008a04 <__multadd>
 80081e8:	4631      	mov	r1, r6
 80081ea:	4681      	mov	r9, r0
 80081ec:	2300      	movs	r3, #0
 80081ee:	220a      	movs	r2, #10
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fc07 	bl	8008a04 <__multadd>
 80081f6:	4606      	mov	r6, r0
 80081f8:	e7f2      	b.n	80081e0 <_dtoa_r+0xaa0>
 80081fa:	f04f 0900 	mov.w	r9, #0
 80081fe:	2201      	movs	r2, #1
 8008200:	9904      	ldr	r1, [sp, #16]
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fdb2 	bl	8008d6c <__lshift>
 8008208:	4639      	mov	r1, r7
 800820a:	9004      	str	r0, [sp, #16]
 800820c:	f000 fe02 	bl	8008e14 <__mcmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	dcb6      	bgt.n	8008182 <_dtoa_r+0xa42>
 8008214:	d102      	bne.n	800821c <_dtoa_r+0xadc>
 8008216:	f018 0f01 	tst.w	r8, #1
 800821a:	d1b2      	bne.n	8008182 <_dtoa_r+0xa42>
 800821c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008220:	2b30      	cmp	r3, #48	; 0x30
 8008222:	f105 32ff 	add.w	r2, r5, #4294967295
 8008226:	f47f af0a 	bne.w	800803e <_dtoa_r+0x8fe>
 800822a:	4615      	mov	r5, r2
 800822c:	e7f6      	b.n	800821c <_dtoa_r+0xadc>
 800822e:	4593      	cmp	fp, r2
 8008230:	d105      	bne.n	800823e <_dtoa_r+0xafe>
 8008232:	2331      	movs	r3, #49	; 0x31
 8008234:	f10a 0a01 	add.w	sl, sl, #1
 8008238:	f88b 3000 	strb.w	r3, [fp]
 800823c:	e6ff      	b.n	800803e <_dtoa_r+0x8fe>
 800823e:	4615      	mov	r5, r2
 8008240:	e79f      	b.n	8008182 <_dtoa_r+0xa42>
 8008242:	f8df b064 	ldr.w	fp, [pc, #100]	; 80082a8 <_dtoa_r+0xb68>
 8008246:	e007      	b.n	8008258 <_dtoa_r+0xb18>
 8008248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800824a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80082ac <_dtoa_r+0xb6c>
 800824e:	b11b      	cbz	r3, 8008258 <_dtoa_r+0xb18>
 8008250:	f10b 0308 	add.w	r3, fp, #8
 8008254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	4658      	mov	r0, fp
 800825a:	b017      	add	sp, #92	; 0x5c
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	9b06      	ldr	r3, [sp, #24]
 8008262:	2b01      	cmp	r3, #1
 8008264:	f77f ae35 	ble.w	8007ed2 <_dtoa_r+0x792>
 8008268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800826a:	9307      	str	r3, [sp, #28]
 800826c:	e649      	b.n	8007f02 <_dtoa_r+0x7c2>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dc03      	bgt.n	800827c <_dtoa_r+0xb3c>
 8008274:	9b06      	ldr	r3, [sp, #24]
 8008276:	2b02      	cmp	r3, #2
 8008278:	f73f aecc 	bgt.w	8008014 <_dtoa_r+0x8d4>
 800827c:	465d      	mov	r5, fp
 800827e:	4639      	mov	r1, r7
 8008280:	9804      	ldr	r0, [sp, #16]
 8008282:	f7ff f9d1 	bl	8007628 <quorem>
 8008286:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800828a:	f805 8b01 	strb.w	r8, [r5], #1
 800828e:	9a02      	ldr	r2, [sp, #8]
 8008290:	eba5 030b 	sub.w	r3, r5, fp
 8008294:	429a      	cmp	r2, r3
 8008296:	ddb0      	ble.n	80081fa <_dtoa_r+0xaba>
 8008298:	2300      	movs	r3, #0
 800829a:	220a      	movs	r2, #10
 800829c:	9904      	ldr	r1, [sp, #16]
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 fbb0 	bl	8008a04 <__multadd>
 80082a4:	9004      	str	r0, [sp, #16]
 80082a6:	e7ea      	b.n	800827e <_dtoa_r+0xb3e>
 80082a8:	0800a4c0 	.word	0x0800a4c0
 80082ac:	0800a540 	.word	0x0800a540

080082b0 <rshift>:
 80082b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b2:	6906      	ldr	r6, [r0, #16]
 80082b4:	114b      	asrs	r3, r1, #5
 80082b6:	429e      	cmp	r6, r3
 80082b8:	f100 0414 	add.w	r4, r0, #20
 80082bc:	dd30      	ble.n	8008320 <rshift+0x70>
 80082be:	f011 011f 	ands.w	r1, r1, #31
 80082c2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80082c6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80082ca:	d108      	bne.n	80082de <rshift+0x2e>
 80082cc:	4621      	mov	r1, r4
 80082ce:	42b2      	cmp	r2, r6
 80082d0:	460b      	mov	r3, r1
 80082d2:	d211      	bcs.n	80082f8 <rshift+0x48>
 80082d4:	f852 3b04 	ldr.w	r3, [r2], #4
 80082d8:	f841 3b04 	str.w	r3, [r1], #4
 80082dc:	e7f7      	b.n	80082ce <rshift+0x1e>
 80082de:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80082e2:	f1c1 0c20 	rsb	ip, r1, #32
 80082e6:	40cd      	lsrs	r5, r1
 80082e8:	3204      	adds	r2, #4
 80082ea:	4623      	mov	r3, r4
 80082ec:	42b2      	cmp	r2, r6
 80082ee:	4617      	mov	r7, r2
 80082f0:	d30c      	bcc.n	800830c <rshift+0x5c>
 80082f2:	601d      	str	r5, [r3, #0]
 80082f4:	b105      	cbz	r5, 80082f8 <rshift+0x48>
 80082f6:	3304      	adds	r3, #4
 80082f8:	1b1a      	subs	r2, r3, r4
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008300:	bf08      	it	eq
 8008302:	2300      	moveq	r3, #0
 8008304:	6102      	str	r2, [r0, #16]
 8008306:	bf08      	it	eq
 8008308:	6143      	streq	r3, [r0, #20]
 800830a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830c:	683f      	ldr	r7, [r7, #0]
 800830e:	fa07 f70c 	lsl.w	r7, r7, ip
 8008312:	433d      	orrs	r5, r7
 8008314:	f843 5b04 	str.w	r5, [r3], #4
 8008318:	f852 5b04 	ldr.w	r5, [r2], #4
 800831c:	40cd      	lsrs	r5, r1
 800831e:	e7e5      	b.n	80082ec <rshift+0x3c>
 8008320:	4623      	mov	r3, r4
 8008322:	e7e9      	b.n	80082f8 <rshift+0x48>

08008324 <__hexdig_fun>:
 8008324:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008328:	2b09      	cmp	r3, #9
 800832a:	d802      	bhi.n	8008332 <__hexdig_fun+0xe>
 800832c:	3820      	subs	r0, #32
 800832e:	b2c0      	uxtb	r0, r0
 8008330:	4770      	bx	lr
 8008332:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008336:	2b05      	cmp	r3, #5
 8008338:	d801      	bhi.n	800833e <__hexdig_fun+0x1a>
 800833a:	3847      	subs	r0, #71	; 0x47
 800833c:	e7f7      	b.n	800832e <__hexdig_fun+0xa>
 800833e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008342:	2b05      	cmp	r3, #5
 8008344:	d801      	bhi.n	800834a <__hexdig_fun+0x26>
 8008346:	3827      	subs	r0, #39	; 0x27
 8008348:	e7f1      	b.n	800832e <__hexdig_fun+0xa>
 800834a:	2000      	movs	r0, #0
 800834c:	4770      	bx	lr

0800834e <__gethex>:
 800834e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008352:	b08b      	sub	sp, #44	; 0x2c
 8008354:	468a      	mov	sl, r1
 8008356:	9002      	str	r0, [sp, #8]
 8008358:	9816      	ldr	r0, [sp, #88]	; 0x58
 800835a:	9306      	str	r3, [sp, #24]
 800835c:	4690      	mov	r8, r2
 800835e:	f000 fad0 	bl	8008902 <__localeconv_l>
 8008362:	6803      	ldr	r3, [r0, #0]
 8008364:	9303      	str	r3, [sp, #12]
 8008366:	4618      	mov	r0, r3
 8008368:	f7f7 ff3c 	bl	80001e4 <strlen>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	9001      	str	r0, [sp, #4]
 8008370:	4403      	add	r3, r0
 8008372:	f04f 0b00 	mov.w	fp, #0
 8008376:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800837a:	9307      	str	r3, [sp, #28]
 800837c:	f8da 3000 	ldr.w	r3, [sl]
 8008380:	3302      	adds	r3, #2
 8008382:	461f      	mov	r7, r3
 8008384:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008388:	2830      	cmp	r0, #48	; 0x30
 800838a:	d06c      	beq.n	8008466 <__gethex+0x118>
 800838c:	f7ff ffca 	bl	8008324 <__hexdig_fun>
 8008390:	4604      	mov	r4, r0
 8008392:	2800      	cmp	r0, #0
 8008394:	d16a      	bne.n	800846c <__gethex+0x11e>
 8008396:	9a01      	ldr	r2, [sp, #4]
 8008398:	9903      	ldr	r1, [sp, #12]
 800839a:	4638      	mov	r0, r7
 800839c:	f001 f8fe 	bl	800959c <strncmp>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d166      	bne.n	8008472 <__gethex+0x124>
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	5cf8      	ldrb	r0, [r7, r3]
 80083a8:	18fe      	adds	r6, r7, r3
 80083aa:	f7ff ffbb 	bl	8008324 <__hexdig_fun>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d062      	beq.n	8008478 <__gethex+0x12a>
 80083b2:	4633      	mov	r3, r6
 80083b4:	7818      	ldrb	r0, [r3, #0]
 80083b6:	2830      	cmp	r0, #48	; 0x30
 80083b8:	461f      	mov	r7, r3
 80083ba:	f103 0301 	add.w	r3, r3, #1
 80083be:	d0f9      	beq.n	80083b4 <__gethex+0x66>
 80083c0:	f7ff ffb0 	bl	8008324 <__hexdig_fun>
 80083c4:	fab0 f580 	clz	r5, r0
 80083c8:	096d      	lsrs	r5, r5, #5
 80083ca:	4634      	mov	r4, r6
 80083cc:	f04f 0b01 	mov.w	fp, #1
 80083d0:	463a      	mov	r2, r7
 80083d2:	4616      	mov	r6, r2
 80083d4:	3201      	adds	r2, #1
 80083d6:	7830      	ldrb	r0, [r6, #0]
 80083d8:	f7ff ffa4 	bl	8008324 <__hexdig_fun>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d1f8      	bne.n	80083d2 <__gethex+0x84>
 80083e0:	9a01      	ldr	r2, [sp, #4]
 80083e2:	9903      	ldr	r1, [sp, #12]
 80083e4:	4630      	mov	r0, r6
 80083e6:	f001 f8d9 	bl	800959c <strncmp>
 80083ea:	b950      	cbnz	r0, 8008402 <__gethex+0xb4>
 80083ec:	b954      	cbnz	r4, 8008404 <__gethex+0xb6>
 80083ee:	9b01      	ldr	r3, [sp, #4]
 80083f0:	18f4      	adds	r4, r6, r3
 80083f2:	4622      	mov	r2, r4
 80083f4:	4616      	mov	r6, r2
 80083f6:	3201      	adds	r2, #1
 80083f8:	7830      	ldrb	r0, [r6, #0]
 80083fa:	f7ff ff93 	bl	8008324 <__hexdig_fun>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d1f8      	bne.n	80083f4 <__gethex+0xa6>
 8008402:	b10c      	cbz	r4, 8008408 <__gethex+0xba>
 8008404:	1ba4      	subs	r4, r4, r6
 8008406:	00a4      	lsls	r4, r4, #2
 8008408:	7833      	ldrb	r3, [r6, #0]
 800840a:	2b50      	cmp	r3, #80	; 0x50
 800840c:	d001      	beq.n	8008412 <__gethex+0xc4>
 800840e:	2b70      	cmp	r3, #112	; 0x70
 8008410:	d140      	bne.n	8008494 <__gethex+0x146>
 8008412:	7873      	ldrb	r3, [r6, #1]
 8008414:	2b2b      	cmp	r3, #43	; 0x2b
 8008416:	d031      	beq.n	800847c <__gethex+0x12e>
 8008418:	2b2d      	cmp	r3, #45	; 0x2d
 800841a:	d033      	beq.n	8008484 <__gethex+0x136>
 800841c:	1c71      	adds	r1, r6, #1
 800841e:	f04f 0900 	mov.w	r9, #0
 8008422:	7808      	ldrb	r0, [r1, #0]
 8008424:	f7ff ff7e 	bl	8008324 <__hexdig_fun>
 8008428:	1e43      	subs	r3, r0, #1
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b18      	cmp	r3, #24
 800842e:	d831      	bhi.n	8008494 <__gethex+0x146>
 8008430:	f1a0 0210 	sub.w	r2, r0, #16
 8008434:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008438:	f7ff ff74 	bl	8008324 <__hexdig_fun>
 800843c:	1e43      	subs	r3, r0, #1
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b18      	cmp	r3, #24
 8008442:	d922      	bls.n	800848a <__gethex+0x13c>
 8008444:	f1b9 0f00 	cmp.w	r9, #0
 8008448:	d000      	beq.n	800844c <__gethex+0xfe>
 800844a:	4252      	negs	r2, r2
 800844c:	4414      	add	r4, r2
 800844e:	f8ca 1000 	str.w	r1, [sl]
 8008452:	b30d      	cbz	r5, 8008498 <__gethex+0x14a>
 8008454:	f1bb 0f00 	cmp.w	fp, #0
 8008458:	bf0c      	ite	eq
 800845a:	2706      	moveq	r7, #6
 800845c:	2700      	movne	r7, #0
 800845e:	4638      	mov	r0, r7
 8008460:	b00b      	add	sp, #44	; 0x2c
 8008462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008466:	f10b 0b01 	add.w	fp, fp, #1
 800846a:	e78a      	b.n	8008382 <__gethex+0x34>
 800846c:	2500      	movs	r5, #0
 800846e:	462c      	mov	r4, r5
 8008470:	e7ae      	b.n	80083d0 <__gethex+0x82>
 8008472:	463e      	mov	r6, r7
 8008474:	2501      	movs	r5, #1
 8008476:	e7c7      	b.n	8008408 <__gethex+0xba>
 8008478:	4604      	mov	r4, r0
 800847a:	e7fb      	b.n	8008474 <__gethex+0x126>
 800847c:	f04f 0900 	mov.w	r9, #0
 8008480:	1cb1      	adds	r1, r6, #2
 8008482:	e7ce      	b.n	8008422 <__gethex+0xd4>
 8008484:	f04f 0901 	mov.w	r9, #1
 8008488:	e7fa      	b.n	8008480 <__gethex+0x132>
 800848a:	230a      	movs	r3, #10
 800848c:	fb03 0202 	mla	r2, r3, r2, r0
 8008490:	3a10      	subs	r2, #16
 8008492:	e7cf      	b.n	8008434 <__gethex+0xe6>
 8008494:	4631      	mov	r1, r6
 8008496:	e7da      	b.n	800844e <__gethex+0x100>
 8008498:	1bf3      	subs	r3, r6, r7
 800849a:	3b01      	subs	r3, #1
 800849c:	4629      	mov	r1, r5
 800849e:	2b07      	cmp	r3, #7
 80084a0:	dc49      	bgt.n	8008536 <__gethex+0x1e8>
 80084a2:	9802      	ldr	r0, [sp, #8]
 80084a4:	f000 fa63 	bl	800896e <_Balloc>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	f100 0914 	add.w	r9, r0, #20
 80084ae:	f04f 0b00 	mov.w	fp, #0
 80084b2:	f1c3 0301 	rsb	r3, r3, #1
 80084b6:	4605      	mov	r5, r0
 80084b8:	f8cd 9010 	str.w	r9, [sp, #16]
 80084bc:	46da      	mov	sl, fp
 80084be:	9308      	str	r3, [sp, #32]
 80084c0:	42b7      	cmp	r7, r6
 80084c2:	d33b      	bcc.n	800853c <__gethex+0x1ee>
 80084c4:	9804      	ldr	r0, [sp, #16]
 80084c6:	f840 ab04 	str.w	sl, [r0], #4
 80084ca:	eba0 0009 	sub.w	r0, r0, r9
 80084ce:	1080      	asrs	r0, r0, #2
 80084d0:	6128      	str	r0, [r5, #16]
 80084d2:	0147      	lsls	r7, r0, #5
 80084d4:	4650      	mov	r0, sl
 80084d6:	f000 fb0e 	bl	8008af6 <__hi0bits>
 80084da:	f8d8 6000 	ldr.w	r6, [r8]
 80084de:	1a3f      	subs	r7, r7, r0
 80084e0:	42b7      	cmp	r7, r6
 80084e2:	dd64      	ble.n	80085ae <__gethex+0x260>
 80084e4:	1bbf      	subs	r7, r7, r6
 80084e6:	4639      	mov	r1, r7
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 fe1d 	bl	8009128 <__any_on>
 80084ee:	4682      	mov	sl, r0
 80084f0:	b178      	cbz	r0, 8008512 <__gethex+0x1c4>
 80084f2:	1e7b      	subs	r3, r7, #1
 80084f4:	1159      	asrs	r1, r3, #5
 80084f6:	f003 021f 	and.w	r2, r3, #31
 80084fa:	f04f 0a01 	mov.w	sl, #1
 80084fe:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008502:	fa0a f202 	lsl.w	r2, sl, r2
 8008506:	420a      	tst	r2, r1
 8008508:	d003      	beq.n	8008512 <__gethex+0x1c4>
 800850a:	4553      	cmp	r3, sl
 800850c:	dc46      	bgt.n	800859c <__gethex+0x24e>
 800850e:	f04f 0a02 	mov.w	sl, #2
 8008512:	4639      	mov	r1, r7
 8008514:	4628      	mov	r0, r5
 8008516:	f7ff fecb 	bl	80082b0 <rshift>
 800851a:	443c      	add	r4, r7
 800851c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008520:	42a3      	cmp	r3, r4
 8008522:	da52      	bge.n	80085ca <__gethex+0x27c>
 8008524:	4629      	mov	r1, r5
 8008526:	9802      	ldr	r0, [sp, #8]
 8008528:	f000 fa55 	bl	80089d6 <_Bfree>
 800852c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800852e:	2300      	movs	r3, #0
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	27a3      	movs	r7, #163	; 0xa3
 8008534:	e793      	b.n	800845e <__gethex+0x110>
 8008536:	3101      	adds	r1, #1
 8008538:	105b      	asrs	r3, r3, #1
 800853a:	e7b0      	b.n	800849e <__gethex+0x150>
 800853c:	1e73      	subs	r3, r6, #1
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	9a07      	ldr	r2, [sp, #28]
 8008542:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008546:	4293      	cmp	r3, r2
 8008548:	d018      	beq.n	800857c <__gethex+0x22e>
 800854a:	f1bb 0f20 	cmp.w	fp, #32
 800854e:	d107      	bne.n	8008560 <__gethex+0x212>
 8008550:	9b04      	ldr	r3, [sp, #16]
 8008552:	f8c3 a000 	str.w	sl, [r3]
 8008556:	3304      	adds	r3, #4
 8008558:	f04f 0a00 	mov.w	sl, #0
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	46d3      	mov	fp, sl
 8008560:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008564:	f7ff fede 	bl	8008324 <__hexdig_fun>
 8008568:	f000 000f 	and.w	r0, r0, #15
 800856c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008570:	ea4a 0a00 	orr.w	sl, sl, r0
 8008574:	f10b 0b04 	add.w	fp, fp, #4
 8008578:	9b05      	ldr	r3, [sp, #20]
 800857a:	e00d      	b.n	8008598 <__gethex+0x24a>
 800857c:	9b05      	ldr	r3, [sp, #20]
 800857e:	9a08      	ldr	r2, [sp, #32]
 8008580:	4413      	add	r3, r2
 8008582:	42bb      	cmp	r3, r7
 8008584:	d3e1      	bcc.n	800854a <__gethex+0x1fc>
 8008586:	4618      	mov	r0, r3
 8008588:	9a01      	ldr	r2, [sp, #4]
 800858a:	9903      	ldr	r1, [sp, #12]
 800858c:	9309      	str	r3, [sp, #36]	; 0x24
 800858e:	f001 f805 	bl	800959c <strncmp>
 8008592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008594:	2800      	cmp	r0, #0
 8008596:	d1d8      	bne.n	800854a <__gethex+0x1fc>
 8008598:	461e      	mov	r6, r3
 800859a:	e791      	b.n	80084c0 <__gethex+0x172>
 800859c:	1eb9      	subs	r1, r7, #2
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 fdc2 	bl	8009128 <__any_on>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d0b2      	beq.n	800850e <__gethex+0x1c0>
 80085a8:	f04f 0a03 	mov.w	sl, #3
 80085ac:	e7b1      	b.n	8008512 <__gethex+0x1c4>
 80085ae:	da09      	bge.n	80085c4 <__gethex+0x276>
 80085b0:	1bf7      	subs	r7, r6, r7
 80085b2:	4629      	mov	r1, r5
 80085b4:	463a      	mov	r2, r7
 80085b6:	9802      	ldr	r0, [sp, #8]
 80085b8:	f000 fbd8 	bl	8008d6c <__lshift>
 80085bc:	1be4      	subs	r4, r4, r7
 80085be:	4605      	mov	r5, r0
 80085c0:	f100 0914 	add.w	r9, r0, #20
 80085c4:	f04f 0a00 	mov.w	sl, #0
 80085c8:	e7a8      	b.n	800851c <__gethex+0x1ce>
 80085ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085ce:	42a0      	cmp	r0, r4
 80085d0:	dd6a      	ble.n	80086a8 <__gethex+0x35a>
 80085d2:	1b04      	subs	r4, r0, r4
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	dc2e      	bgt.n	8008636 <__gethex+0x2e8>
 80085d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d022      	beq.n	8008626 <__gethex+0x2d8>
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d024      	beq.n	800862e <__gethex+0x2e0>
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d115      	bne.n	8008614 <__gethex+0x2c6>
 80085e8:	42a6      	cmp	r6, r4
 80085ea:	d113      	bne.n	8008614 <__gethex+0x2c6>
 80085ec:	2e01      	cmp	r6, #1
 80085ee:	dc0b      	bgt.n	8008608 <__gethex+0x2ba>
 80085f0:	9a06      	ldr	r2, [sp, #24]
 80085f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	2301      	movs	r3, #1
 80085fa:	612b      	str	r3, [r5, #16]
 80085fc:	f8c9 3000 	str.w	r3, [r9]
 8008600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008602:	2762      	movs	r7, #98	; 0x62
 8008604:	601d      	str	r5, [r3, #0]
 8008606:	e72a      	b.n	800845e <__gethex+0x110>
 8008608:	1e71      	subs	r1, r6, #1
 800860a:	4628      	mov	r0, r5
 800860c:	f000 fd8c 	bl	8009128 <__any_on>
 8008610:	2800      	cmp	r0, #0
 8008612:	d1ed      	bne.n	80085f0 <__gethex+0x2a2>
 8008614:	4629      	mov	r1, r5
 8008616:	9802      	ldr	r0, [sp, #8]
 8008618:	f000 f9dd 	bl	80089d6 <_Bfree>
 800861c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800861e:	2300      	movs	r3, #0
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	2750      	movs	r7, #80	; 0x50
 8008624:	e71b      	b.n	800845e <__gethex+0x110>
 8008626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0e1      	beq.n	80085f0 <__gethex+0x2a2>
 800862c:	e7f2      	b.n	8008614 <__gethex+0x2c6>
 800862e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1dd      	bne.n	80085f0 <__gethex+0x2a2>
 8008634:	e7ee      	b.n	8008614 <__gethex+0x2c6>
 8008636:	1e67      	subs	r7, r4, #1
 8008638:	f1ba 0f00 	cmp.w	sl, #0
 800863c:	d131      	bne.n	80086a2 <__gethex+0x354>
 800863e:	b127      	cbz	r7, 800864a <__gethex+0x2fc>
 8008640:	4639      	mov	r1, r7
 8008642:	4628      	mov	r0, r5
 8008644:	f000 fd70 	bl	8009128 <__any_on>
 8008648:	4682      	mov	sl, r0
 800864a:	117a      	asrs	r2, r7, #5
 800864c:	2301      	movs	r3, #1
 800864e:	f007 071f 	and.w	r7, r7, #31
 8008652:	fa03 f707 	lsl.w	r7, r3, r7
 8008656:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800865a:	4621      	mov	r1, r4
 800865c:	421f      	tst	r7, r3
 800865e:	4628      	mov	r0, r5
 8008660:	bf18      	it	ne
 8008662:	f04a 0a02 	orrne.w	sl, sl, #2
 8008666:	1b36      	subs	r6, r6, r4
 8008668:	f7ff fe22 	bl	80082b0 <rshift>
 800866c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008670:	2702      	movs	r7, #2
 8008672:	f1ba 0f00 	cmp.w	sl, #0
 8008676:	d048      	beq.n	800870a <__gethex+0x3bc>
 8008678:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d015      	beq.n	80086ac <__gethex+0x35e>
 8008680:	2b03      	cmp	r3, #3
 8008682:	d017      	beq.n	80086b4 <__gethex+0x366>
 8008684:	2b01      	cmp	r3, #1
 8008686:	d109      	bne.n	800869c <__gethex+0x34e>
 8008688:	f01a 0f02 	tst.w	sl, #2
 800868c:	d006      	beq.n	800869c <__gethex+0x34e>
 800868e:	f8d9 3000 	ldr.w	r3, [r9]
 8008692:	ea4a 0a03 	orr.w	sl, sl, r3
 8008696:	f01a 0f01 	tst.w	sl, #1
 800869a:	d10e      	bne.n	80086ba <__gethex+0x36c>
 800869c:	f047 0710 	orr.w	r7, r7, #16
 80086a0:	e033      	b.n	800870a <__gethex+0x3bc>
 80086a2:	f04f 0a01 	mov.w	sl, #1
 80086a6:	e7d0      	b.n	800864a <__gethex+0x2fc>
 80086a8:	2701      	movs	r7, #1
 80086aa:	e7e2      	b.n	8008672 <__gethex+0x324>
 80086ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ae:	f1c3 0301 	rsb	r3, r3, #1
 80086b2:	9315      	str	r3, [sp, #84]	; 0x54
 80086b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <__gethex+0x34e>
 80086ba:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80086be:	f105 0314 	add.w	r3, r5, #20
 80086c2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80086c6:	eb03 010a 	add.w	r1, r3, sl
 80086ca:	f04f 0c00 	mov.w	ip, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80086d8:	d01c      	beq.n	8008714 <__gethex+0x3c6>
 80086da:	3201      	adds	r2, #1
 80086dc:	6002      	str	r2, [r0, #0]
 80086de:	2f02      	cmp	r7, #2
 80086e0:	f105 0314 	add.w	r3, r5, #20
 80086e4:	d138      	bne.n	8008758 <__gethex+0x40a>
 80086e6:	f8d8 2000 	ldr.w	r2, [r8]
 80086ea:	3a01      	subs	r2, #1
 80086ec:	42b2      	cmp	r2, r6
 80086ee:	d10a      	bne.n	8008706 <__gethex+0x3b8>
 80086f0:	1171      	asrs	r1, r6, #5
 80086f2:	2201      	movs	r2, #1
 80086f4:	f006 061f 	and.w	r6, r6, #31
 80086f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086fc:	fa02 f606 	lsl.w	r6, r2, r6
 8008700:	421e      	tst	r6, r3
 8008702:	bf18      	it	ne
 8008704:	4617      	movne	r7, r2
 8008706:	f047 0720 	orr.w	r7, r7, #32
 800870a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800870c:	601d      	str	r5, [r3, #0]
 800870e:	9b06      	ldr	r3, [sp, #24]
 8008710:	601c      	str	r4, [r3, #0]
 8008712:	e6a4      	b.n	800845e <__gethex+0x110>
 8008714:	4299      	cmp	r1, r3
 8008716:	f843 cc04 	str.w	ip, [r3, #-4]
 800871a:	d8d8      	bhi.n	80086ce <__gethex+0x380>
 800871c:	68ab      	ldr	r3, [r5, #8]
 800871e:	4599      	cmp	r9, r3
 8008720:	db12      	blt.n	8008748 <__gethex+0x3fa>
 8008722:	6869      	ldr	r1, [r5, #4]
 8008724:	9802      	ldr	r0, [sp, #8]
 8008726:	3101      	adds	r1, #1
 8008728:	f000 f921 	bl	800896e <_Balloc>
 800872c:	692a      	ldr	r2, [r5, #16]
 800872e:	3202      	adds	r2, #2
 8008730:	f105 010c 	add.w	r1, r5, #12
 8008734:	4683      	mov	fp, r0
 8008736:	0092      	lsls	r2, r2, #2
 8008738:	300c      	adds	r0, #12
 800873a:	f000 f90d 	bl	8008958 <memcpy>
 800873e:	4629      	mov	r1, r5
 8008740:	9802      	ldr	r0, [sp, #8]
 8008742:	f000 f948 	bl	80089d6 <_Bfree>
 8008746:	465d      	mov	r5, fp
 8008748:	692b      	ldr	r3, [r5, #16]
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008750:	612a      	str	r2, [r5, #16]
 8008752:	2201      	movs	r2, #1
 8008754:	615a      	str	r2, [r3, #20]
 8008756:	e7c2      	b.n	80086de <__gethex+0x390>
 8008758:	692a      	ldr	r2, [r5, #16]
 800875a:	454a      	cmp	r2, r9
 800875c:	dd0b      	ble.n	8008776 <__gethex+0x428>
 800875e:	2101      	movs	r1, #1
 8008760:	4628      	mov	r0, r5
 8008762:	f7ff fda5 	bl	80082b0 <rshift>
 8008766:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800876a:	3401      	adds	r4, #1
 800876c:	42a3      	cmp	r3, r4
 800876e:	f6ff aed9 	blt.w	8008524 <__gethex+0x1d6>
 8008772:	2701      	movs	r7, #1
 8008774:	e7c7      	b.n	8008706 <__gethex+0x3b8>
 8008776:	f016 061f 	ands.w	r6, r6, #31
 800877a:	d0fa      	beq.n	8008772 <__gethex+0x424>
 800877c:	449a      	add	sl, r3
 800877e:	f1c6 0620 	rsb	r6, r6, #32
 8008782:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008786:	f000 f9b6 	bl	8008af6 <__hi0bits>
 800878a:	42b0      	cmp	r0, r6
 800878c:	dbe7      	blt.n	800875e <__gethex+0x410>
 800878e:	e7f0      	b.n	8008772 <__gethex+0x424>

08008790 <L_shift>:
 8008790:	f1c2 0208 	rsb	r2, r2, #8
 8008794:	0092      	lsls	r2, r2, #2
 8008796:	b570      	push	{r4, r5, r6, lr}
 8008798:	f1c2 0620 	rsb	r6, r2, #32
 800879c:	6843      	ldr	r3, [r0, #4]
 800879e:	6804      	ldr	r4, [r0, #0]
 80087a0:	fa03 f506 	lsl.w	r5, r3, r6
 80087a4:	432c      	orrs	r4, r5
 80087a6:	40d3      	lsrs	r3, r2
 80087a8:	6004      	str	r4, [r0, #0]
 80087aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80087ae:	4288      	cmp	r0, r1
 80087b0:	d3f4      	bcc.n	800879c <L_shift+0xc>
 80087b2:	bd70      	pop	{r4, r5, r6, pc}

080087b4 <__match>:
 80087b4:	b530      	push	{r4, r5, lr}
 80087b6:	6803      	ldr	r3, [r0, #0]
 80087b8:	3301      	adds	r3, #1
 80087ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087be:	b914      	cbnz	r4, 80087c6 <__match+0x12>
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	2001      	movs	r0, #1
 80087c4:	bd30      	pop	{r4, r5, pc}
 80087c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087ce:	2d19      	cmp	r5, #25
 80087d0:	bf98      	it	ls
 80087d2:	3220      	addls	r2, #32
 80087d4:	42a2      	cmp	r2, r4
 80087d6:	d0f0      	beq.n	80087ba <__match+0x6>
 80087d8:	2000      	movs	r0, #0
 80087da:	e7f3      	b.n	80087c4 <__match+0x10>

080087dc <__hexnan>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	680b      	ldr	r3, [r1, #0]
 80087e2:	6801      	ldr	r1, [r0, #0]
 80087e4:	115f      	asrs	r7, r3, #5
 80087e6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80087ea:	f013 031f 	ands.w	r3, r3, #31
 80087ee:	b087      	sub	sp, #28
 80087f0:	bf18      	it	ne
 80087f2:	3704      	addne	r7, #4
 80087f4:	2500      	movs	r5, #0
 80087f6:	1f3e      	subs	r6, r7, #4
 80087f8:	4682      	mov	sl, r0
 80087fa:	4690      	mov	r8, r2
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	f847 5c04 	str.w	r5, [r7, #-4]
 8008802:	46b1      	mov	r9, r6
 8008804:	4634      	mov	r4, r6
 8008806:	9502      	str	r5, [sp, #8]
 8008808:	46ab      	mov	fp, r5
 800880a:	784a      	ldrb	r2, [r1, #1]
 800880c:	1c4b      	adds	r3, r1, #1
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	b342      	cbz	r2, 8008864 <__hexnan+0x88>
 8008812:	4610      	mov	r0, r2
 8008814:	9105      	str	r1, [sp, #20]
 8008816:	9204      	str	r2, [sp, #16]
 8008818:	f7ff fd84 	bl	8008324 <__hexdig_fun>
 800881c:	2800      	cmp	r0, #0
 800881e:	d143      	bne.n	80088a8 <__hexnan+0xcc>
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	9905      	ldr	r1, [sp, #20]
 8008824:	2a20      	cmp	r2, #32
 8008826:	d818      	bhi.n	800885a <__hexnan+0x7e>
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	459b      	cmp	fp, r3
 800882c:	dd13      	ble.n	8008856 <__hexnan+0x7a>
 800882e:	454c      	cmp	r4, r9
 8008830:	d206      	bcs.n	8008840 <__hexnan+0x64>
 8008832:	2d07      	cmp	r5, #7
 8008834:	dc04      	bgt.n	8008840 <__hexnan+0x64>
 8008836:	462a      	mov	r2, r5
 8008838:	4649      	mov	r1, r9
 800883a:	4620      	mov	r0, r4
 800883c:	f7ff ffa8 	bl	8008790 <L_shift>
 8008840:	4544      	cmp	r4, r8
 8008842:	d944      	bls.n	80088ce <__hexnan+0xf2>
 8008844:	2300      	movs	r3, #0
 8008846:	f1a4 0904 	sub.w	r9, r4, #4
 800884a:	f844 3c04 	str.w	r3, [r4, #-4]
 800884e:	f8cd b008 	str.w	fp, [sp, #8]
 8008852:	464c      	mov	r4, r9
 8008854:	461d      	mov	r5, r3
 8008856:	9903      	ldr	r1, [sp, #12]
 8008858:	e7d7      	b.n	800880a <__hexnan+0x2e>
 800885a:	2a29      	cmp	r2, #41	; 0x29
 800885c:	d14a      	bne.n	80088f4 <__hexnan+0x118>
 800885e:	3102      	adds	r1, #2
 8008860:	f8ca 1000 	str.w	r1, [sl]
 8008864:	f1bb 0f00 	cmp.w	fp, #0
 8008868:	d044      	beq.n	80088f4 <__hexnan+0x118>
 800886a:	454c      	cmp	r4, r9
 800886c:	d206      	bcs.n	800887c <__hexnan+0xa0>
 800886e:	2d07      	cmp	r5, #7
 8008870:	dc04      	bgt.n	800887c <__hexnan+0xa0>
 8008872:	462a      	mov	r2, r5
 8008874:	4649      	mov	r1, r9
 8008876:	4620      	mov	r0, r4
 8008878:	f7ff ff8a 	bl	8008790 <L_shift>
 800887c:	4544      	cmp	r4, r8
 800887e:	d928      	bls.n	80088d2 <__hexnan+0xf6>
 8008880:	4643      	mov	r3, r8
 8008882:	f854 2b04 	ldr.w	r2, [r4], #4
 8008886:	f843 2b04 	str.w	r2, [r3], #4
 800888a:	42a6      	cmp	r6, r4
 800888c:	d2f9      	bcs.n	8008882 <__hexnan+0xa6>
 800888e:	2200      	movs	r2, #0
 8008890:	f843 2b04 	str.w	r2, [r3], #4
 8008894:	429e      	cmp	r6, r3
 8008896:	d2fb      	bcs.n	8008890 <__hexnan+0xb4>
 8008898:	6833      	ldr	r3, [r6, #0]
 800889a:	b91b      	cbnz	r3, 80088a4 <__hexnan+0xc8>
 800889c:	4546      	cmp	r6, r8
 800889e:	d127      	bne.n	80088f0 <__hexnan+0x114>
 80088a0:	2301      	movs	r3, #1
 80088a2:	6033      	str	r3, [r6, #0]
 80088a4:	2005      	movs	r0, #5
 80088a6:	e026      	b.n	80088f6 <__hexnan+0x11a>
 80088a8:	3501      	adds	r5, #1
 80088aa:	2d08      	cmp	r5, #8
 80088ac:	f10b 0b01 	add.w	fp, fp, #1
 80088b0:	dd06      	ble.n	80088c0 <__hexnan+0xe4>
 80088b2:	4544      	cmp	r4, r8
 80088b4:	d9cf      	bls.n	8008856 <__hexnan+0x7a>
 80088b6:	2300      	movs	r3, #0
 80088b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80088bc:	2501      	movs	r5, #1
 80088be:	3c04      	subs	r4, #4
 80088c0:	6822      	ldr	r2, [r4, #0]
 80088c2:	f000 000f 	and.w	r0, r0, #15
 80088c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088ca:	6020      	str	r0, [r4, #0]
 80088cc:	e7c3      	b.n	8008856 <__hexnan+0x7a>
 80088ce:	2508      	movs	r5, #8
 80088d0:	e7c1      	b.n	8008856 <__hexnan+0x7a>
 80088d2:	9b01      	ldr	r3, [sp, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0df      	beq.n	8008898 <__hexnan+0xbc>
 80088d8:	f04f 32ff 	mov.w	r2, #4294967295
 80088dc:	f1c3 0320 	rsb	r3, r3, #32
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
 80088e4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80088e8:	401a      	ands	r2, r3
 80088ea:	f847 2c04 	str.w	r2, [r7, #-4]
 80088ee:	e7d3      	b.n	8008898 <__hexnan+0xbc>
 80088f0:	3e04      	subs	r6, #4
 80088f2:	e7d1      	b.n	8008898 <__hexnan+0xbc>
 80088f4:	2004      	movs	r0, #4
 80088f6:	b007      	add	sp, #28
 80088f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088fc <__locale_ctype_ptr_l>:
 80088fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008900:	4770      	bx	lr

08008902 <__localeconv_l>:
 8008902:	30f0      	adds	r0, #240	; 0xf0
 8008904:	4770      	bx	lr
	...

08008908 <_localeconv_r>:
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <_localeconv_r+0x14>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6a18      	ldr	r0, [r3, #32]
 800890e:	4b04      	ldr	r3, [pc, #16]	; (8008920 <_localeconv_r+0x18>)
 8008910:	2800      	cmp	r0, #0
 8008912:	bf08      	it	eq
 8008914:	4618      	moveq	r0, r3
 8008916:	30f0      	adds	r0, #240	; 0xf0
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	200000c4 	.word	0x200000c4
 8008920:	20000128 	.word	0x20000128

08008924 <malloc>:
 8008924:	4b02      	ldr	r3, [pc, #8]	; (8008930 <malloc+0xc>)
 8008926:	4601      	mov	r1, r0
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	f000 bc7b 	b.w	8009224 <_malloc_r>
 800892e:	bf00      	nop
 8008930:	200000c4 	.word	0x200000c4

08008934 <__ascii_mbtowc>:
 8008934:	b082      	sub	sp, #8
 8008936:	b901      	cbnz	r1, 800893a <__ascii_mbtowc+0x6>
 8008938:	a901      	add	r1, sp, #4
 800893a:	b142      	cbz	r2, 800894e <__ascii_mbtowc+0x1a>
 800893c:	b14b      	cbz	r3, 8008952 <__ascii_mbtowc+0x1e>
 800893e:	7813      	ldrb	r3, [r2, #0]
 8008940:	600b      	str	r3, [r1, #0]
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	1c10      	adds	r0, r2, #0
 8008946:	bf18      	it	ne
 8008948:	2001      	movne	r0, #1
 800894a:	b002      	add	sp, #8
 800894c:	4770      	bx	lr
 800894e:	4610      	mov	r0, r2
 8008950:	e7fb      	b.n	800894a <__ascii_mbtowc+0x16>
 8008952:	f06f 0001 	mvn.w	r0, #1
 8008956:	e7f8      	b.n	800894a <__ascii_mbtowc+0x16>

08008958 <memcpy>:
 8008958:	b510      	push	{r4, lr}
 800895a:	1e43      	subs	r3, r0, #1
 800895c:	440a      	add	r2, r1
 800895e:	4291      	cmp	r1, r2
 8008960:	d100      	bne.n	8008964 <memcpy+0xc>
 8008962:	bd10      	pop	{r4, pc}
 8008964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896c:	e7f7      	b.n	800895e <memcpy+0x6>

0800896e <_Balloc>:
 800896e:	b570      	push	{r4, r5, r6, lr}
 8008970:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008972:	4604      	mov	r4, r0
 8008974:	460e      	mov	r6, r1
 8008976:	b93d      	cbnz	r5, 8008988 <_Balloc+0x1a>
 8008978:	2010      	movs	r0, #16
 800897a:	f7ff ffd3 	bl	8008924 <malloc>
 800897e:	6260      	str	r0, [r4, #36]	; 0x24
 8008980:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008984:	6005      	str	r5, [r0, #0]
 8008986:	60c5      	str	r5, [r0, #12]
 8008988:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800898a:	68eb      	ldr	r3, [r5, #12]
 800898c:	b183      	cbz	r3, 80089b0 <_Balloc+0x42>
 800898e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008996:	b9b8      	cbnz	r0, 80089c8 <_Balloc+0x5a>
 8008998:	2101      	movs	r1, #1
 800899a:	fa01 f506 	lsl.w	r5, r1, r6
 800899e:	1d6a      	adds	r2, r5, #5
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fbe1 	bl	800916a <_calloc_r>
 80089a8:	b160      	cbz	r0, 80089c4 <_Balloc+0x56>
 80089aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80089ae:	e00e      	b.n	80089ce <_Balloc+0x60>
 80089b0:	2221      	movs	r2, #33	; 0x21
 80089b2:	2104      	movs	r1, #4
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 fbd8 	bl	800916a <_calloc_r>
 80089ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089bc:	60e8      	str	r0, [r5, #12]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e4      	bne.n	800898e <_Balloc+0x20>
 80089c4:	2000      	movs	r0, #0
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	6802      	ldr	r2, [r0, #0]
 80089ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80089ce:	2300      	movs	r3, #0
 80089d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d4:	e7f7      	b.n	80089c6 <_Balloc+0x58>

080089d6 <_Bfree>:
 80089d6:	b570      	push	{r4, r5, r6, lr}
 80089d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089da:	4606      	mov	r6, r0
 80089dc:	460d      	mov	r5, r1
 80089de:	b93c      	cbnz	r4, 80089f0 <_Bfree+0x1a>
 80089e0:	2010      	movs	r0, #16
 80089e2:	f7ff ff9f 	bl	8008924 <malloc>
 80089e6:	6270      	str	r0, [r6, #36]	; 0x24
 80089e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089ec:	6004      	str	r4, [r0, #0]
 80089ee:	60c4      	str	r4, [r0, #12]
 80089f0:	b13d      	cbz	r5, 8008a02 <_Bfree+0x2c>
 80089f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80089f4:	686a      	ldr	r2, [r5, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089fc:	6029      	str	r1, [r5, #0]
 80089fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008a02:	bd70      	pop	{r4, r5, r6, pc}

08008a04 <__multadd>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	690d      	ldr	r5, [r1, #16]
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	f101 0c14 	add.w	ip, r1, #20
 8008a14:	2300      	movs	r3, #0
 8008a16:	f8dc 0000 	ldr.w	r0, [ip]
 8008a1a:	b281      	uxth	r1, r0
 8008a1c:	fb02 7101 	mla	r1, r2, r1, r7
 8008a20:	0c0f      	lsrs	r7, r1, #16
 8008a22:	0c00      	lsrs	r0, r0, #16
 8008a24:	fb02 7000 	mla	r0, r2, r0, r7
 8008a28:	b289      	uxth	r1, r1
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a30:	429d      	cmp	r5, r3
 8008a32:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a36:	f84c 1b04 	str.w	r1, [ip], #4
 8008a3a:	dcec      	bgt.n	8008a16 <__multadd+0x12>
 8008a3c:	b1d7      	cbz	r7, 8008a74 <__multadd+0x70>
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dc12      	bgt.n	8008a6a <__multadd+0x66>
 8008a44:	6861      	ldr	r1, [r4, #4]
 8008a46:	4630      	mov	r0, r6
 8008a48:	3101      	adds	r1, #1
 8008a4a:	f7ff ff90 	bl	800896e <_Balloc>
 8008a4e:	6922      	ldr	r2, [r4, #16]
 8008a50:	3202      	adds	r2, #2
 8008a52:	f104 010c 	add.w	r1, r4, #12
 8008a56:	4680      	mov	r8, r0
 8008a58:	0092      	lsls	r2, r2, #2
 8008a5a:	300c      	adds	r0, #12
 8008a5c:	f7ff ff7c 	bl	8008958 <memcpy>
 8008a60:	4621      	mov	r1, r4
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7ff ffb7 	bl	80089d6 <_Bfree>
 8008a68:	4644      	mov	r4, r8
 8008a6a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a6e:	3501      	adds	r5, #1
 8008a70:	615f      	str	r7, [r3, #20]
 8008a72:	6125      	str	r5, [r4, #16]
 8008a74:	4620      	mov	r0, r4
 8008a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a7a <__s2b>:
 8008a7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a7e:	460c      	mov	r4, r1
 8008a80:	4615      	mov	r5, r2
 8008a82:	461f      	mov	r7, r3
 8008a84:	2209      	movs	r2, #9
 8008a86:	3308      	adds	r3, #8
 8008a88:	4606      	mov	r6, r0
 8008a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a8e:	2100      	movs	r1, #0
 8008a90:	2201      	movs	r2, #1
 8008a92:	429a      	cmp	r2, r3
 8008a94:	db20      	blt.n	8008ad8 <__s2b+0x5e>
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff ff69 	bl	800896e <_Balloc>
 8008a9c:	9b08      	ldr	r3, [sp, #32]
 8008a9e:	6143      	str	r3, [r0, #20]
 8008aa0:	2d09      	cmp	r5, #9
 8008aa2:	f04f 0301 	mov.w	r3, #1
 8008aa6:	6103      	str	r3, [r0, #16]
 8008aa8:	dd19      	ble.n	8008ade <__s2b+0x64>
 8008aaa:	f104 0809 	add.w	r8, r4, #9
 8008aae:	46c1      	mov	r9, r8
 8008ab0:	442c      	add	r4, r5
 8008ab2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	3b30      	subs	r3, #48	; 0x30
 8008aba:	220a      	movs	r2, #10
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff ffa1 	bl	8008a04 <__multadd>
 8008ac2:	45a1      	cmp	r9, r4
 8008ac4:	d1f5      	bne.n	8008ab2 <__s2b+0x38>
 8008ac6:	eb08 0405 	add.w	r4, r8, r5
 8008aca:	3c08      	subs	r4, #8
 8008acc:	1b2d      	subs	r5, r5, r4
 8008ace:	1963      	adds	r3, r4, r5
 8008ad0:	42bb      	cmp	r3, r7
 8008ad2:	db07      	blt.n	8008ae4 <__s2b+0x6a>
 8008ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad8:	0052      	lsls	r2, r2, #1
 8008ada:	3101      	adds	r1, #1
 8008adc:	e7d9      	b.n	8008a92 <__s2b+0x18>
 8008ade:	340a      	adds	r4, #10
 8008ae0:	2509      	movs	r5, #9
 8008ae2:	e7f3      	b.n	8008acc <__s2b+0x52>
 8008ae4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ae8:	4601      	mov	r1, r0
 8008aea:	3b30      	subs	r3, #48	; 0x30
 8008aec:	220a      	movs	r2, #10
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff ff88 	bl	8008a04 <__multadd>
 8008af4:	e7eb      	b.n	8008ace <__s2b+0x54>

08008af6 <__hi0bits>:
 8008af6:	0c02      	lsrs	r2, r0, #16
 8008af8:	0412      	lsls	r2, r2, #16
 8008afa:	4603      	mov	r3, r0
 8008afc:	b9b2      	cbnz	r2, 8008b2c <__hi0bits+0x36>
 8008afe:	0403      	lsls	r3, r0, #16
 8008b00:	2010      	movs	r0, #16
 8008b02:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b06:	bf04      	itt	eq
 8008b08:	021b      	lsleq	r3, r3, #8
 8008b0a:	3008      	addeq	r0, #8
 8008b0c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b10:	bf04      	itt	eq
 8008b12:	011b      	lsleq	r3, r3, #4
 8008b14:	3004      	addeq	r0, #4
 8008b16:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b1a:	bf04      	itt	eq
 8008b1c:	009b      	lsleq	r3, r3, #2
 8008b1e:	3002      	addeq	r0, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	db06      	blt.n	8008b32 <__hi0bits+0x3c>
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	d503      	bpl.n	8008b30 <__hi0bits+0x3a>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	4770      	bx	lr
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7e8      	b.n	8008b02 <__hi0bits+0xc>
 8008b30:	2020      	movs	r0, #32
 8008b32:	4770      	bx	lr

08008b34 <__lo0bits>:
 8008b34:	6803      	ldr	r3, [r0, #0]
 8008b36:	f013 0207 	ands.w	r2, r3, #7
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	d00b      	beq.n	8008b56 <__lo0bits+0x22>
 8008b3e:	07da      	lsls	r2, r3, #31
 8008b40:	d423      	bmi.n	8008b8a <__lo0bits+0x56>
 8008b42:	0798      	lsls	r0, r3, #30
 8008b44:	bf49      	itett	mi
 8008b46:	085b      	lsrmi	r3, r3, #1
 8008b48:	089b      	lsrpl	r3, r3, #2
 8008b4a:	2001      	movmi	r0, #1
 8008b4c:	600b      	strmi	r3, [r1, #0]
 8008b4e:	bf5c      	itt	pl
 8008b50:	600b      	strpl	r3, [r1, #0]
 8008b52:	2002      	movpl	r0, #2
 8008b54:	4770      	bx	lr
 8008b56:	b298      	uxth	r0, r3
 8008b58:	b9a8      	cbnz	r0, 8008b86 <__lo0bits+0x52>
 8008b5a:	0c1b      	lsrs	r3, r3, #16
 8008b5c:	2010      	movs	r0, #16
 8008b5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b62:	bf04      	itt	eq
 8008b64:	0a1b      	lsreq	r3, r3, #8
 8008b66:	3008      	addeq	r0, #8
 8008b68:	071a      	lsls	r2, r3, #28
 8008b6a:	bf04      	itt	eq
 8008b6c:	091b      	lsreq	r3, r3, #4
 8008b6e:	3004      	addeq	r0, #4
 8008b70:	079a      	lsls	r2, r3, #30
 8008b72:	bf04      	itt	eq
 8008b74:	089b      	lsreq	r3, r3, #2
 8008b76:	3002      	addeq	r0, #2
 8008b78:	07da      	lsls	r2, r3, #31
 8008b7a:	d402      	bmi.n	8008b82 <__lo0bits+0x4e>
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	d006      	beq.n	8008b8e <__lo0bits+0x5a>
 8008b80:	3001      	adds	r0, #1
 8008b82:	600b      	str	r3, [r1, #0]
 8008b84:	4770      	bx	lr
 8008b86:	4610      	mov	r0, r2
 8008b88:	e7e9      	b.n	8008b5e <__lo0bits+0x2a>
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	4770      	bx	lr
 8008b8e:	2020      	movs	r0, #32
 8008b90:	4770      	bx	lr

08008b92 <__i2b>:
 8008b92:	b510      	push	{r4, lr}
 8008b94:	460c      	mov	r4, r1
 8008b96:	2101      	movs	r1, #1
 8008b98:	f7ff fee9 	bl	800896e <_Balloc>
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	6144      	str	r4, [r0, #20]
 8008ba0:	6102      	str	r2, [r0, #16]
 8008ba2:	bd10      	pop	{r4, pc}

08008ba4 <__multiply>:
 8008ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	4614      	mov	r4, r2
 8008baa:	690a      	ldr	r2, [r1, #16]
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	bfb8      	it	lt
 8008bb2:	460b      	movlt	r3, r1
 8008bb4:	4688      	mov	r8, r1
 8008bb6:	bfbc      	itt	lt
 8008bb8:	46a0      	movlt	r8, r4
 8008bba:	461c      	movlt	r4, r3
 8008bbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bc0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008bc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bcc:	eb07 0609 	add.w	r6, r7, r9
 8008bd0:	42b3      	cmp	r3, r6
 8008bd2:	bfb8      	it	lt
 8008bd4:	3101      	addlt	r1, #1
 8008bd6:	f7ff feca 	bl	800896e <_Balloc>
 8008bda:	f100 0514 	add.w	r5, r0, #20
 8008bde:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008be2:	462b      	mov	r3, r5
 8008be4:	2200      	movs	r2, #0
 8008be6:	4573      	cmp	r3, lr
 8008be8:	d316      	bcc.n	8008c18 <__multiply+0x74>
 8008bea:	f104 0214 	add.w	r2, r4, #20
 8008bee:	f108 0114 	add.w	r1, r8, #20
 8008bf2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008bf6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	9201      	str	r2, [sp, #4]
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d80c      	bhi.n	8008c1e <__multiply+0x7a>
 8008c04:	2e00      	cmp	r6, #0
 8008c06:	dd03      	ble.n	8008c10 <__multiply+0x6c>
 8008c08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d05d      	beq.n	8008ccc <__multiply+0x128>
 8008c10:	6106      	str	r6, [r0, #16]
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	f843 2b04 	str.w	r2, [r3], #4
 8008c1c:	e7e3      	b.n	8008be6 <__multiply+0x42>
 8008c1e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008c22:	f1bb 0f00 	cmp.w	fp, #0
 8008c26:	d023      	beq.n	8008c70 <__multiply+0xcc>
 8008c28:	4689      	mov	r9, r1
 8008c2a:	46ac      	mov	ip, r5
 8008c2c:	f04f 0800 	mov.w	r8, #0
 8008c30:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c34:	f8dc a000 	ldr.w	sl, [ip]
 8008c38:	b2a3      	uxth	r3, r4
 8008c3a:	fa1f fa8a 	uxth.w	sl, sl
 8008c3e:	fb0b a303 	mla	r3, fp, r3, sl
 8008c42:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c46:	f8dc 4000 	ldr.w	r4, [ip]
 8008c4a:	4443      	add	r3, r8
 8008c4c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c50:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c54:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c58:	46e2      	mov	sl, ip
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c60:	454f      	cmp	r7, r9
 8008c62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c66:	f84a 3b04 	str.w	r3, [sl], #4
 8008c6a:	d82b      	bhi.n	8008cc4 <__multiply+0x120>
 8008c6c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c70:	9b01      	ldr	r3, [sp, #4]
 8008c72:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008c76:	3204      	adds	r2, #4
 8008c78:	f1ba 0f00 	cmp.w	sl, #0
 8008c7c:	d020      	beq.n	8008cc0 <__multiply+0x11c>
 8008c7e:	682b      	ldr	r3, [r5, #0]
 8008c80:	4689      	mov	r9, r1
 8008c82:	46a8      	mov	r8, r5
 8008c84:	f04f 0b00 	mov.w	fp, #0
 8008c88:	f8b9 c000 	ldrh.w	ip, [r9]
 8008c8c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008c90:	fb0a 440c 	mla	r4, sl, ip, r4
 8008c94:	445c      	add	r4, fp
 8008c96:	46c4      	mov	ip, r8
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c9e:	f84c 3b04 	str.w	r3, [ip], #4
 8008ca2:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ca6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008caa:	0c1b      	lsrs	r3, r3, #16
 8008cac:	fb0a b303 	mla	r3, sl, r3, fp
 8008cb0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008cb4:	454f      	cmp	r7, r9
 8008cb6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008cba:	d805      	bhi.n	8008cc8 <__multiply+0x124>
 8008cbc:	f8c8 3004 	str.w	r3, [r8, #4]
 8008cc0:	3504      	adds	r5, #4
 8008cc2:	e79b      	b.n	8008bfc <__multiply+0x58>
 8008cc4:	46d4      	mov	ip, sl
 8008cc6:	e7b3      	b.n	8008c30 <__multiply+0x8c>
 8008cc8:	46e0      	mov	r8, ip
 8008cca:	e7dd      	b.n	8008c88 <__multiply+0xe4>
 8008ccc:	3e01      	subs	r6, #1
 8008cce:	e799      	b.n	8008c04 <__multiply+0x60>

08008cd0 <__pow5mult>:
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	f012 0203 	ands.w	r2, r2, #3
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460f      	mov	r7, r1
 8008cde:	d007      	beq.n	8008cf0 <__pow5mult+0x20>
 8008ce0:	3a01      	subs	r2, #1
 8008ce2:	4c21      	ldr	r4, [pc, #132]	; (8008d68 <__pow5mult+0x98>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cea:	f7ff fe8b 	bl	8008a04 <__multadd>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	10ad      	asrs	r5, r5, #2
 8008cf2:	d035      	beq.n	8008d60 <__pow5mult+0x90>
 8008cf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cf6:	b93c      	cbnz	r4, 8008d08 <__pow5mult+0x38>
 8008cf8:	2010      	movs	r0, #16
 8008cfa:	f7ff fe13 	bl	8008924 <malloc>
 8008cfe:	6270      	str	r0, [r6, #36]	; 0x24
 8008d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d04:	6004      	str	r4, [r0, #0]
 8008d06:	60c4      	str	r4, [r0, #12]
 8008d08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d10:	b94c      	cbnz	r4, 8008d26 <__pow5mult+0x56>
 8008d12:	f240 2171 	movw	r1, #625	; 0x271
 8008d16:	4630      	mov	r0, r6
 8008d18:	f7ff ff3b 	bl	8008b92 <__i2b>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d22:	4604      	mov	r4, r0
 8008d24:	6003      	str	r3, [r0, #0]
 8008d26:	f04f 0800 	mov.w	r8, #0
 8008d2a:	07eb      	lsls	r3, r5, #31
 8008d2c:	d50a      	bpl.n	8008d44 <__pow5mult+0x74>
 8008d2e:	4639      	mov	r1, r7
 8008d30:	4622      	mov	r2, r4
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7ff ff36 	bl	8008ba4 <__multiply>
 8008d38:	4639      	mov	r1, r7
 8008d3a:	4681      	mov	r9, r0
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7ff fe4a 	bl	80089d6 <_Bfree>
 8008d42:	464f      	mov	r7, r9
 8008d44:	106d      	asrs	r5, r5, #1
 8008d46:	d00b      	beq.n	8008d60 <__pow5mult+0x90>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	b938      	cbnz	r0, 8008d5c <__pow5mult+0x8c>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff ff27 	bl	8008ba4 <__multiply>
 8008d56:	6020      	str	r0, [r4, #0]
 8008d58:	f8c0 8000 	str.w	r8, [r0]
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e7e4      	b.n	8008d2a <__pow5mult+0x5a>
 8008d60:	4638      	mov	r0, r7
 8008d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d66:	bf00      	nop
 8008d68:	0800a648 	.word	0x0800a648

08008d6c <__lshift>:
 8008d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d76:	6923      	ldr	r3, [r4, #16]
 8008d78:	6849      	ldr	r1, [r1, #4]
 8008d7a:	eb0a 0903 	add.w	r9, sl, r3
 8008d7e:	68a3      	ldr	r3, [r4, #8]
 8008d80:	4607      	mov	r7, r0
 8008d82:	4616      	mov	r6, r2
 8008d84:	f109 0501 	add.w	r5, r9, #1
 8008d88:	42ab      	cmp	r3, r5
 8008d8a:	db32      	blt.n	8008df2 <__lshift+0x86>
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff fdee 	bl	800896e <_Balloc>
 8008d92:	2300      	movs	r3, #0
 8008d94:	4680      	mov	r8, r0
 8008d96:	f100 0114 	add.w	r1, r0, #20
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	4553      	cmp	r3, sl
 8008d9e:	db2b      	blt.n	8008df8 <__lshift+0x8c>
 8008da0:	6920      	ldr	r0, [r4, #16]
 8008da2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008da6:	f104 0314 	add.w	r3, r4, #20
 8008daa:	f016 021f 	ands.w	r2, r6, #31
 8008dae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008db2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008db6:	d025      	beq.n	8008e04 <__lshift+0x98>
 8008db8:	f1c2 0e20 	rsb	lr, r2, #32
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	681e      	ldr	r6, [r3, #0]
 8008dc0:	468a      	mov	sl, r1
 8008dc2:	4096      	lsls	r6, r2
 8008dc4:	4330      	orrs	r0, r6
 8008dc6:	f84a 0b04 	str.w	r0, [sl], #4
 8008dca:	f853 0b04 	ldr.w	r0, [r3], #4
 8008dce:	459c      	cmp	ip, r3
 8008dd0:	fa20 f00e 	lsr.w	r0, r0, lr
 8008dd4:	d814      	bhi.n	8008e00 <__lshift+0x94>
 8008dd6:	6048      	str	r0, [r1, #4]
 8008dd8:	b108      	cbz	r0, 8008dde <__lshift+0x72>
 8008dda:	f109 0502 	add.w	r5, r9, #2
 8008dde:	3d01      	subs	r5, #1
 8008de0:	4638      	mov	r0, r7
 8008de2:	f8c8 5010 	str.w	r5, [r8, #16]
 8008de6:	4621      	mov	r1, r4
 8008de8:	f7ff fdf5 	bl	80089d6 <_Bfree>
 8008dec:	4640      	mov	r0, r8
 8008dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df2:	3101      	adds	r1, #1
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	e7c7      	b.n	8008d88 <__lshift+0x1c>
 8008df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	e7cd      	b.n	8008d9c <__lshift+0x30>
 8008e00:	4651      	mov	r1, sl
 8008e02:	e7dc      	b.n	8008dbe <__lshift+0x52>
 8008e04:	3904      	subs	r1, #4
 8008e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e0e:	459c      	cmp	ip, r3
 8008e10:	d8f9      	bhi.n	8008e06 <__lshift+0x9a>
 8008e12:	e7e4      	b.n	8008dde <__lshift+0x72>

08008e14 <__mcmp>:
 8008e14:	6903      	ldr	r3, [r0, #16]
 8008e16:	690a      	ldr	r2, [r1, #16]
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	b530      	push	{r4, r5, lr}
 8008e1c:	d10c      	bne.n	8008e38 <__mcmp+0x24>
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	3014      	adds	r0, #20
 8008e22:	3114      	adds	r1, #20
 8008e24:	1884      	adds	r4, r0, r2
 8008e26:	4411      	add	r1, r2
 8008e28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e30:	4295      	cmp	r5, r2
 8008e32:	d003      	beq.n	8008e3c <__mcmp+0x28>
 8008e34:	d305      	bcc.n	8008e42 <__mcmp+0x2e>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4618      	mov	r0, r3
 8008e3a:	bd30      	pop	{r4, r5, pc}
 8008e3c:	42a0      	cmp	r0, r4
 8008e3e:	d3f3      	bcc.n	8008e28 <__mcmp+0x14>
 8008e40:	e7fa      	b.n	8008e38 <__mcmp+0x24>
 8008e42:	f04f 33ff 	mov.w	r3, #4294967295
 8008e46:	e7f7      	b.n	8008e38 <__mcmp+0x24>

08008e48 <__mdiff>:
 8008e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	4607      	mov	r7, r0
 8008e50:	4611      	mov	r1, r2
 8008e52:	4628      	mov	r0, r5
 8008e54:	4614      	mov	r4, r2
 8008e56:	f7ff ffdd 	bl	8008e14 <__mcmp>
 8008e5a:	1e06      	subs	r6, r0, #0
 8008e5c:	d108      	bne.n	8008e70 <__mdiff+0x28>
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7ff fd84 	bl	800896e <_Balloc>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e70:	bfa4      	itt	ge
 8008e72:	4623      	movge	r3, r4
 8008e74:	462c      	movge	r4, r5
 8008e76:	4638      	mov	r0, r7
 8008e78:	6861      	ldr	r1, [r4, #4]
 8008e7a:	bfa6      	itte	ge
 8008e7c:	461d      	movge	r5, r3
 8008e7e:	2600      	movge	r6, #0
 8008e80:	2601      	movlt	r6, #1
 8008e82:	f7ff fd74 	bl	800896e <_Balloc>
 8008e86:	692b      	ldr	r3, [r5, #16]
 8008e88:	60c6      	str	r6, [r0, #12]
 8008e8a:	6926      	ldr	r6, [r4, #16]
 8008e8c:	f105 0914 	add.w	r9, r5, #20
 8008e90:	f104 0214 	add.w	r2, r4, #20
 8008e94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008e98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008e9c:	f100 0514 	add.w	r5, r0, #20
 8008ea0:	f04f 0e00 	mov.w	lr, #0
 8008ea4:	f852 ab04 	ldr.w	sl, [r2], #4
 8008ea8:	f859 4b04 	ldr.w	r4, [r9], #4
 8008eac:	fa1e f18a 	uxtah	r1, lr, sl
 8008eb0:	b2a3      	uxth	r3, r4
 8008eb2:	1ac9      	subs	r1, r1, r3
 8008eb4:	0c23      	lsrs	r3, r4, #16
 8008eb6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008eba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ebe:	b289      	uxth	r1, r1
 8008ec0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008ec4:	45c8      	cmp	r8, r9
 8008ec6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008eca:	4694      	mov	ip, r2
 8008ecc:	f845 3b04 	str.w	r3, [r5], #4
 8008ed0:	d8e8      	bhi.n	8008ea4 <__mdiff+0x5c>
 8008ed2:	45bc      	cmp	ip, r7
 8008ed4:	d304      	bcc.n	8008ee0 <__mdiff+0x98>
 8008ed6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008eda:	b183      	cbz	r3, 8008efe <__mdiff+0xb6>
 8008edc:	6106      	str	r6, [r0, #16]
 8008ede:	e7c5      	b.n	8008e6c <__mdiff+0x24>
 8008ee0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ee4:	fa1e f381 	uxtah	r3, lr, r1
 8008ee8:	141a      	asrs	r2, r3, #16
 8008eea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ef4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008ef8:	f845 3b04 	str.w	r3, [r5], #4
 8008efc:	e7e9      	b.n	8008ed2 <__mdiff+0x8a>
 8008efe:	3e01      	subs	r6, #1
 8008f00:	e7e9      	b.n	8008ed6 <__mdiff+0x8e>
	...

08008f04 <__ulp>:
 8008f04:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <__ulp+0x4c>)
 8008f06:	ee10 2a90 	vmov	r2, s1
 8008f0a:	401a      	ands	r2, r3
 8008f0c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dd04      	ble.n	8008f1e <__ulp+0x1a>
 8008f14:	2000      	movs	r0, #0
 8008f16:	4619      	mov	r1, r3
 8008f18:	ec41 0b10 	vmov	d0, r0, r1
 8008f1c:	4770      	bx	lr
 8008f1e:	425b      	negs	r3, r3
 8008f20:	151b      	asrs	r3, r3, #20
 8008f22:	2b13      	cmp	r3, #19
 8008f24:	f04f 0000 	mov.w	r0, #0
 8008f28:	f04f 0100 	mov.w	r1, #0
 8008f2c:	dc04      	bgt.n	8008f38 <__ulp+0x34>
 8008f2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f32:	fa42 f103 	asr.w	r1, r2, r3
 8008f36:	e7ef      	b.n	8008f18 <__ulp+0x14>
 8008f38:	3b14      	subs	r3, #20
 8008f3a:	2b1e      	cmp	r3, #30
 8008f3c:	f04f 0201 	mov.w	r2, #1
 8008f40:	bfda      	itte	le
 8008f42:	f1c3 031f 	rsble	r3, r3, #31
 8008f46:	fa02 f303 	lslle.w	r3, r2, r3
 8008f4a:	4613      	movgt	r3, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	e7e3      	b.n	8008f18 <__ulp+0x14>
 8008f50:	7ff00000 	.word	0x7ff00000

08008f54 <__b2d>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	6905      	ldr	r5, [r0, #16]
 8008f58:	f100 0714 	add.w	r7, r0, #20
 8008f5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f60:	1f2e      	subs	r6, r5, #4
 8008f62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff fdc5 	bl	8008af6 <__hi0bits>
 8008f6c:	f1c0 0320 	rsb	r3, r0, #32
 8008f70:	280a      	cmp	r0, #10
 8008f72:	600b      	str	r3, [r1, #0]
 8008f74:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008fec <__b2d+0x98>
 8008f78:	dc14      	bgt.n	8008fa4 <__b2d+0x50>
 8008f7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008f7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008f82:	42b7      	cmp	r7, r6
 8008f84:	ea41 030c 	orr.w	r3, r1, ip
 8008f88:	bf34      	ite	cc
 8008f8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f8e:	2100      	movcs	r1, #0
 8008f90:	3015      	adds	r0, #21
 8008f92:	fa04 f000 	lsl.w	r0, r4, r0
 8008f96:	fa21 f10e 	lsr.w	r1, r1, lr
 8008f9a:	ea40 0201 	orr.w	r2, r0, r1
 8008f9e:	ec43 2b10 	vmov	d0, r2, r3
 8008fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa4:	42b7      	cmp	r7, r6
 8008fa6:	bf3a      	itte	cc
 8008fa8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008fac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fb0:	2100      	movcs	r1, #0
 8008fb2:	380b      	subs	r0, #11
 8008fb4:	d015      	beq.n	8008fe2 <__b2d+0x8e>
 8008fb6:	4084      	lsls	r4, r0
 8008fb8:	f1c0 0520 	rsb	r5, r0, #32
 8008fbc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008fc0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008fc4:	42be      	cmp	r6, r7
 8008fc6:	fa21 fc05 	lsr.w	ip, r1, r5
 8008fca:	ea44 030c 	orr.w	r3, r4, ip
 8008fce:	bf8c      	ite	hi
 8008fd0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008fd4:	2400      	movls	r4, #0
 8008fd6:	fa01 f000 	lsl.w	r0, r1, r0
 8008fda:	40ec      	lsrs	r4, r5
 8008fdc:	ea40 0204 	orr.w	r2, r0, r4
 8008fe0:	e7dd      	b.n	8008f9e <__b2d+0x4a>
 8008fe2:	ea44 030c 	orr.w	r3, r4, ip
 8008fe6:	460a      	mov	r2, r1
 8008fe8:	e7d9      	b.n	8008f9e <__b2d+0x4a>
 8008fea:	bf00      	nop
 8008fec:	3ff00000 	.word	0x3ff00000

08008ff0 <__d2b>:
 8008ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	460e      	mov	r6, r1
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	ec59 8b10 	vmov	r8, r9, d0
 8008ffc:	4615      	mov	r5, r2
 8008ffe:	f7ff fcb6 	bl	800896e <_Balloc>
 8009002:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009006:	4607      	mov	r7, r0
 8009008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800900c:	bb34      	cbnz	r4, 800905c <__d2b+0x6c>
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	f1b8 0300 	subs.w	r3, r8, #0
 8009014:	d027      	beq.n	8009066 <__d2b+0x76>
 8009016:	a802      	add	r0, sp, #8
 8009018:	f840 3d08 	str.w	r3, [r0, #-8]!
 800901c:	f7ff fd8a 	bl	8008b34 <__lo0bits>
 8009020:	9900      	ldr	r1, [sp, #0]
 8009022:	b1f0      	cbz	r0, 8009062 <__d2b+0x72>
 8009024:	9a01      	ldr	r2, [sp, #4]
 8009026:	f1c0 0320 	rsb	r3, r0, #32
 800902a:	fa02 f303 	lsl.w	r3, r2, r3
 800902e:	430b      	orrs	r3, r1
 8009030:	40c2      	lsrs	r2, r0
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	9201      	str	r2, [sp, #4]
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	2b00      	cmp	r3, #0
 800903c:	bf14      	ite	ne
 800903e:	2102      	movne	r1, #2
 8009040:	2101      	moveq	r1, #1
 8009042:	6139      	str	r1, [r7, #16]
 8009044:	b1c4      	cbz	r4, 8009078 <__d2b+0x88>
 8009046:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800904a:	4404      	add	r4, r0
 800904c:	6034      	str	r4, [r6, #0]
 800904e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009052:	6028      	str	r0, [r5, #0]
 8009054:	4638      	mov	r0, r7
 8009056:	b003      	add	sp, #12
 8009058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800905c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009060:	e7d5      	b.n	800900e <__d2b+0x1e>
 8009062:	6179      	str	r1, [r7, #20]
 8009064:	e7e7      	b.n	8009036 <__d2b+0x46>
 8009066:	a801      	add	r0, sp, #4
 8009068:	f7ff fd64 	bl	8008b34 <__lo0bits>
 800906c:	9b01      	ldr	r3, [sp, #4]
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	2101      	movs	r1, #1
 8009072:	6139      	str	r1, [r7, #16]
 8009074:	3020      	adds	r0, #32
 8009076:	e7e5      	b.n	8009044 <__d2b+0x54>
 8009078:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800907c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009080:	6030      	str	r0, [r6, #0]
 8009082:	6918      	ldr	r0, [r3, #16]
 8009084:	f7ff fd37 	bl	8008af6 <__hi0bits>
 8009088:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800908c:	e7e1      	b.n	8009052 <__d2b+0x62>

0800908e <__ratio>:
 800908e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009092:	4688      	mov	r8, r1
 8009094:	4669      	mov	r1, sp
 8009096:	4681      	mov	r9, r0
 8009098:	f7ff ff5c 	bl	8008f54 <__b2d>
 800909c:	a901      	add	r1, sp, #4
 800909e:	4640      	mov	r0, r8
 80090a0:	ec57 6b10 	vmov	r6, r7, d0
 80090a4:	f7ff ff56 	bl	8008f54 <__b2d>
 80090a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090b0:	eba3 0c02 	sub.w	ip, r3, r2
 80090b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090be:	ec5b ab10 	vmov	sl, fp, d0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bfce      	itee	gt
 80090c6:	463a      	movgt	r2, r7
 80090c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090cc:	465a      	movle	r2, fp
 80090ce:	4659      	mov	r1, fp
 80090d0:	463d      	mov	r5, r7
 80090d2:	bfd4      	ite	le
 80090d4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80090d8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80090dc:	4630      	mov	r0, r6
 80090de:	ee10 2a10 	vmov	r2, s0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7f7 fbc1 	bl	800086c <__aeabi_ddiv>
 80090ea:	ec41 0b10 	vmov	d0, r0, r1
 80090ee:	b003      	add	sp, #12
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090f4 <__copybits>:
 80090f4:	3901      	subs	r1, #1
 80090f6:	b510      	push	{r4, lr}
 80090f8:	1149      	asrs	r1, r1, #5
 80090fa:	6914      	ldr	r4, [r2, #16]
 80090fc:	3101      	adds	r1, #1
 80090fe:	f102 0314 	add.w	r3, r2, #20
 8009102:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009106:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800910a:	42a3      	cmp	r3, r4
 800910c:	4602      	mov	r2, r0
 800910e:	d303      	bcc.n	8009118 <__copybits+0x24>
 8009110:	2300      	movs	r3, #0
 8009112:	428a      	cmp	r2, r1
 8009114:	d305      	bcc.n	8009122 <__copybits+0x2e>
 8009116:	bd10      	pop	{r4, pc}
 8009118:	f853 2b04 	ldr.w	r2, [r3], #4
 800911c:	f840 2b04 	str.w	r2, [r0], #4
 8009120:	e7f3      	b.n	800910a <__copybits+0x16>
 8009122:	f842 3b04 	str.w	r3, [r2], #4
 8009126:	e7f4      	b.n	8009112 <__copybits+0x1e>

08009128 <__any_on>:
 8009128:	f100 0214 	add.w	r2, r0, #20
 800912c:	6900      	ldr	r0, [r0, #16]
 800912e:	114b      	asrs	r3, r1, #5
 8009130:	4298      	cmp	r0, r3
 8009132:	b510      	push	{r4, lr}
 8009134:	db11      	blt.n	800915a <__any_on+0x32>
 8009136:	dd0a      	ble.n	800914e <__any_on+0x26>
 8009138:	f011 011f 	ands.w	r1, r1, #31
 800913c:	d007      	beq.n	800914e <__any_on+0x26>
 800913e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009142:	fa24 f001 	lsr.w	r0, r4, r1
 8009146:	fa00 f101 	lsl.w	r1, r0, r1
 800914a:	428c      	cmp	r4, r1
 800914c:	d10b      	bne.n	8009166 <__any_on+0x3e>
 800914e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009152:	4293      	cmp	r3, r2
 8009154:	d803      	bhi.n	800915e <__any_on+0x36>
 8009156:	2000      	movs	r0, #0
 8009158:	bd10      	pop	{r4, pc}
 800915a:	4603      	mov	r3, r0
 800915c:	e7f7      	b.n	800914e <__any_on+0x26>
 800915e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009162:	2900      	cmp	r1, #0
 8009164:	d0f5      	beq.n	8009152 <__any_on+0x2a>
 8009166:	2001      	movs	r0, #1
 8009168:	e7f6      	b.n	8009158 <__any_on+0x30>

0800916a <_calloc_r>:
 800916a:	b538      	push	{r3, r4, r5, lr}
 800916c:	fb02 f401 	mul.w	r4, r2, r1
 8009170:	4621      	mov	r1, r4
 8009172:	f000 f857 	bl	8009224 <_malloc_r>
 8009176:	4605      	mov	r5, r0
 8009178:	b118      	cbz	r0, 8009182 <_calloc_r+0x18>
 800917a:	4622      	mov	r2, r4
 800917c:	2100      	movs	r1, #0
 800917e:	f7fc fd01 	bl	8005b84 <memset>
 8009182:	4628      	mov	r0, r5
 8009184:	bd38      	pop	{r3, r4, r5, pc}
	...

08009188 <_free_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4605      	mov	r5, r0
 800918c:	2900      	cmp	r1, #0
 800918e:	d045      	beq.n	800921c <_free_r+0x94>
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f0c      	subs	r4, r1, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfb8      	it	lt
 800919a:	18e4      	addlt	r4, r4, r3
 800919c:	f000 fa36 	bl	800960c <__malloc_lock>
 80091a0:	4a1f      	ldr	r2, [pc, #124]	; (8009220 <_free_r+0x98>)
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	4610      	mov	r0, r2
 80091a6:	b933      	cbnz	r3, 80091b6 <_free_r+0x2e>
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	6014      	str	r4, [r2, #0]
 80091ac:	4628      	mov	r0, r5
 80091ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b2:	f000 ba2c 	b.w	800960e <__malloc_unlock>
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	d90c      	bls.n	80091d4 <_free_r+0x4c>
 80091ba:	6821      	ldr	r1, [r4, #0]
 80091bc:	1862      	adds	r2, r4, r1
 80091be:	4293      	cmp	r3, r2
 80091c0:	bf04      	itt	eq
 80091c2:	681a      	ldreq	r2, [r3, #0]
 80091c4:	685b      	ldreq	r3, [r3, #4]
 80091c6:	6063      	str	r3, [r4, #4]
 80091c8:	bf04      	itt	eq
 80091ca:	1852      	addeq	r2, r2, r1
 80091cc:	6022      	streq	r2, [r4, #0]
 80091ce:	6004      	str	r4, [r0, #0]
 80091d0:	e7ec      	b.n	80091ac <_free_r+0x24>
 80091d2:	4613      	mov	r3, r2
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	b10a      	cbz	r2, 80091dc <_free_r+0x54>
 80091d8:	42a2      	cmp	r2, r4
 80091da:	d9fa      	bls.n	80091d2 <_free_r+0x4a>
 80091dc:	6819      	ldr	r1, [r3, #0]
 80091de:	1858      	adds	r0, r3, r1
 80091e0:	42a0      	cmp	r0, r4
 80091e2:	d10b      	bne.n	80091fc <_free_r+0x74>
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	4401      	add	r1, r0
 80091e8:	1858      	adds	r0, r3, r1
 80091ea:	4282      	cmp	r2, r0
 80091ec:	6019      	str	r1, [r3, #0]
 80091ee:	d1dd      	bne.n	80091ac <_free_r+0x24>
 80091f0:	6810      	ldr	r0, [r2, #0]
 80091f2:	6852      	ldr	r2, [r2, #4]
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	4401      	add	r1, r0
 80091f8:	6019      	str	r1, [r3, #0]
 80091fa:	e7d7      	b.n	80091ac <_free_r+0x24>
 80091fc:	d902      	bls.n	8009204 <_free_r+0x7c>
 80091fe:	230c      	movs	r3, #12
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	e7d3      	b.n	80091ac <_free_r+0x24>
 8009204:	6820      	ldr	r0, [r4, #0]
 8009206:	1821      	adds	r1, r4, r0
 8009208:	428a      	cmp	r2, r1
 800920a:	bf04      	itt	eq
 800920c:	6811      	ldreq	r1, [r2, #0]
 800920e:	6852      	ldreq	r2, [r2, #4]
 8009210:	6062      	str	r2, [r4, #4]
 8009212:	bf04      	itt	eq
 8009214:	1809      	addeq	r1, r1, r0
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	605c      	str	r4, [r3, #4]
 800921a:	e7c7      	b.n	80091ac <_free_r+0x24>
 800921c:	bd38      	pop	{r3, r4, r5, pc}
 800921e:	bf00      	nop
 8009220:	2000070c 	.word	0x2000070c

08009224 <_malloc_r>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	1ccd      	adds	r5, r1, #3
 8009228:	f025 0503 	bic.w	r5, r5, #3
 800922c:	3508      	adds	r5, #8
 800922e:	2d0c      	cmp	r5, #12
 8009230:	bf38      	it	cc
 8009232:	250c      	movcc	r5, #12
 8009234:	2d00      	cmp	r5, #0
 8009236:	4606      	mov	r6, r0
 8009238:	db01      	blt.n	800923e <_malloc_r+0x1a>
 800923a:	42a9      	cmp	r1, r5
 800923c:	d903      	bls.n	8009246 <_malloc_r+0x22>
 800923e:	230c      	movs	r3, #12
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	2000      	movs	r0, #0
 8009244:	bd70      	pop	{r4, r5, r6, pc}
 8009246:	f000 f9e1 	bl	800960c <__malloc_lock>
 800924a:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <_malloc_r+0xac>)
 800924c:	6814      	ldr	r4, [r2, #0]
 800924e:	4621      	mov	r1, r4
 8009250:	b991      	cbnz	r1, 8009278 <_malloc_r+0x54>
 8009252:	4c20      	ldr	r4, [pc, #128]	; (80092d4 <_malloc_r+0xb0>)
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	b91b      	cbnz	r3, 8009260 <_malloc_r+0x3c>
 8009258:	4630      	mov	r0, r6
 800925a:	f000 f98f 	bl	800957c <_sbrk_r>
 800925e:	6020      	str	r0, [r4, #0]
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f000 f98a 	bl	800957c <_sbrk_r>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d124      	bne.n	80092b6 <_malloc_r+0x92>
 800926c:	230c      	movs	r3, #12
 800926e:	6033      	str	r3, [r6, #0]
 8009270:	4630      	mov	r0, r6
 8009272:	f000 f9cc 	bl	800960e <__malloc_unlock>
 8009276:	e7e4      	b.n	8009242 <_malloc_r+0x1e>
 8009278:	680b      	ldr	r3, [r1, #0]
 800927a:	1b5b      	subs	r3, r3, r5
 800927c:	d418      	bmi.n	80092b0 <_malloc_r+0x8c>
 800927e:	2b0b      	cmp	r3, #11
 8009280:	d90f      	bls.n	80092a2 <_malloc_r+0x7e>
 8009282:	600b      	str	r3, [r1, #0]
 8009284:	50cd      	str	r5, [r1, r3]
 8009286:	18cc      	adds	r4, r1, r3
 8009288:	4630      	mov	r0, r6
 800928a:	f000 f9c0 	bl	800960e <__malloc_unlock>
 800928e:	f104 000b 	add.w	r0, r4, #11
 8009292:	1d23      	adds	r3, r4, #4
 8009294:	f020 0007 	bic.w	r0, r0, #7
 8009298:	1ac3      	subs	r3, r0, r3
 800929a:	d0d3      	beq.n	8009244 <_malloc_r+0x20>
 800929c:	425a      	negs	r2, r3
 800929e:	50e2      	str	r2, [r4, r3]
 80092a0:	e7d0      	b.n	8009244 <_malloc_r+0x20>
 80092a2:	428c      	cmp	r4, r1
 80092a4:	684b      	ldr	r3, [r1, #4]
 80092a6:	bf16      	itet	ne
 80092a8:	6063      	strne	r3, [r4, #4]
 80092aa:	6013      	streq	r3, [r2, #0]
 80092ac:	460c      	movne	r4, r1
 80092ae:	e7eb      	b.n	8009288 <_malloc_r+0x64>
 80092b0:	460c      	mov	r4, r1
 80092b2:	6849      	ldr	r1, [r1, #4]
 80092b4:	e7cc      	b.n	8009250 <_malloc_r+0x2c>
 80092b6:	1cc4      	adds	r4, r0, #3
 80092b8:	f024 0403 	bic.w	r4, r4, #3
 80092bc:	42a0      	cmp	r0, r4
 80092be:	d005      	beq.n	80092cc <_malloc_r+0xa8>
 80092c0:	1a21      	subs	r1, r4, r0
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 f95a 	bl	800957c <_sbrk_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d0cf      	beq.n	800926c <_malloc_r+0x48>
 80092cc:	6025      	str	r5, [r4, #0]
 80092ce:	e7db      	b.n	8009288 <_malloc_r+0x64>
 80092d0:	2000070c 	.word	0x2000070c
 80092d4:	20000710 	.word	0x20000710

080092d8 <__ssputs_r>:
 80092d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	688e      	ldr	r6, [r1, #8]
 80092de:	429e      	cmp	r6, r3
 80092e0:	4682      	mov	sl, r0
 80092e2:	460c      	mov	r4, r1
 80092e4:	4690      	mov	r8, r2
 80092e6:	4699      	mov	r9, r3
 80092e8:	d837      	bhi.n	800935a <__ssputs_r+0x82>
 80092ea:	898a      	ldrh	r2, [r1, #12]
 80092ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092f0:	d031      	beq.n	8009356 <__ssputs_r+0x7e>
 80092f2:	6825      	ldr	r5, [r4, #0]
 80092f4:	6909      	ldr	r1, [r1, #16]
 80092f6:	1a6f      	subs	r7, r5, r1
 80092f8:	6965      	ldr	r5, [r4, #20]
 80092fa:	2302      	movs	r3, #2
 80092fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009300:	fb95 f5f3 	sdiv	r5, r5, r3
 8009304:	f109 0301 	add.w	r3, r9, #1
 8009308:	443b      	add	r3, r7
 800930a:	429d      	cmp	r5, r3
 800930c:	bf38      	it	cc
 800930e:	461d      	movcc	r5, r3
 8009310:	0553      	lsls	r3, r2, #21
 8009312:	d530      	bpl.n	8009376 <__ssputs_r+0x9e>
 8009314:	4629      	mov	r1, r5
 8009316:	f7ff ff85 	bl	8009224 <_malloc_r>
 800931a:	4606      	mov	r6, r0
 800931c:	b950      	cbnz	r0, 8009334 <__ssputs_r+0x5c>
 800931e:	230c      	movs	r3, #12
 8009320:	f8ca 3000 	str.w	r3, [sl]
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009334:	463a      	mov	r2, r7
 8009336:	6921      	ldr	r1, [r4, #16]
 8009338:	f7ff fb0e 	bl	8008958 <memcpy>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	6126      	str	r6, [r4, #16]
 800934a:	6165      	str	r5, [r4, #20]
 800934c:	443e      	add	r6, r7
 800934e:	1bed      	subs	r5, r5, r7
 8009350:	6026      	str	r6, [r4, #0]
 8009352:	60a5      	str	r5, [r4, #8]
 8009354:	464e      	mov	r6, r9
 8009356:	454e      	cmp	r6, r9
 8009358:	d900      	bls.n	800935c <__ssputs_r+0x84>
 800935a:	464e      	mov	r6, r9
 800935c:	4632      	mov	r2, r6
 800935e:	4641      	mov	r1, r8
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	f000 f93a 	bl	80095da <memmove>
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	1b9b      	subs	r3, r3, r6
 800936a:	60a3      	str	r3, [r4, #8]
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	441e      	add	r6, r3
 8009370:	6026      	str	r6, [r4, #0]
 8009372:	2000      	movs	r0, #0
 8009374:	e7dc      	b.n	8009330 <__ssputs_r+0x58>
 8009376:	462a      	mov	r2, r5
 8009378:	f000 f94a 	bl	8009610 <_realloc_r>
 800937c:	4606      	mov	r6, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	d1e2      	bne.n	8009348 <__ssputs_r+0x70>
 8009382:	6921      	ldr	r1, [r4, #16]
 8009384:	4650      	mov	r0, sl
 8009386:	f7ff feff 	bl	8009188 <_free_r>
 800938a:	e7c8      	b.n	800931e <__ssputs_r+0x46>

0800938c <_svfiprintf_r>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	461d      	mov	r5, r3
 8009392:	898b      	ldrh	r3, [r1, #12]
 8009394:	061f      	lsls	r7, r3, #24
 8009396:	b09d      	sub	sp, #116	; 0x74
 8009398:	4680      	mov	r8, r0
 800939a:	460c      	mov	r4, r1
 800939c:	4616      	mov	r6, r2
 800939e:	d50f      	bpl.n	80093c0 <_svfiprintf_r+0x34>
 80093a0:	690b      	ldr	r3, [r1, #16]
 80093a2:	b96b      	cbnz	r3, 80093c0 <_svfiprintf_r+0x34>
 80093a4:	2140      	movs	r1, #64	; 0x40
 80093a6:	f7ff ff3d 	bl	8009224 <_malloc_r>
 80093aa:	6020      	str	r0, [r4, #0]
 80093ac:	6120      	str	r0, [r4, #16]
 80093ae:	b928      	cbnz	r0, 80093bc <_svfiprintf_r+0x30>
 80093b0:	230c      	movs	r3, #12
 80093b2:	f8c8 3000 	str.w	r3, [r8]
 80093b6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ba:	e0c8      	b.n	800954e <_svfiprintf_r+0x1c2>
 80093bc:	2340      	movs	r3, #64	; 0x40
 80093be:	6163      	str	r3, [r4, #20]
 80093c0:	2300      	movs	r3, #0
 80093c2:	9309      	str	r3, [sp, #36]	; 0x24
 80093c4:	2320      	movs	r3, #32
 80093c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ca:	2330      	movs	r3, #48	; 0x30
 80093cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093d0:	9503      	str	r5, [sp, #12]
 80093d2:	f04f 0b01 	mov.w	fp, #1
 80093d6:	4637      	mov	r7, r6
 80093d8:	463d      	mov	r5, r7
 80093da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093de:	b10b      	cbz	r3, 80093e4 <_svfiprintf_r+0x58>
 80093e0:	2b25      	cmp	r3, #37	; 0x25
 80093e2:	d13e      	bne.n	8009462 <_svfiprintf_r+0xd6>
 80093e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80093e8:	d00b      	beq.n	8009402 <_svfiprintf_r+0x76>
 80093ea:	4653      	mov	r3, sl
 80093ec:	4632      	mov	r2, r6
 80093ee:	4621      	mov	r1, r4
 80093f0:	4640      	mov	r0, r8
 80093f2:	f7ff ff71 	bl	80092d8 <__ssputs_r>
 80093f6:	3001      	adds	r0, #1
 80093f8:	f000 80a4 	beq.w	8009544 <_svfiprintf_r+0x1b8>
 80093fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fe:	4453      	add	r3, sl
 8009400:	9309      	str	r3, [sp, #36]	; 0x24
 8009402:	783b      	ldrb	r3, [r7, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 809d 	beq.w	8009544 <_svfiprintf_r+0x1b8>
 800940a:	2300      	movs	r3, #0
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009414:	9304      	str	r3, [sp, #16]
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800941c:	931a      	str	r3, [sp, #104]	; 0x68
 800941e:	462f      	mov	r7, r5
 8009420:	2205      	movs	r2, #5
 8009422:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009426:	4850      	ldr	r0, [pc, #320]	; (8009568 <_svfiprintf_r+0x1dc>)
 8009428:	f7f6 feea 	bl	8000200 <memchr>
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	b9d0      	cbnz	r0, 8009466 <_svfiprintf_r+0xda>
 8009430:	06d9      	lsls	r1, r3, #27
 8009432:	bf44      	itt	mi
 8009434:	2220      	movmi	r2, #32
 8009436:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800943a:	071a      	lsls	r2, r3, #28
 800943c:	bf44      	itt	mi
 800943e:	222b      	movmi	r2, #43	; 0x2b
 8009440:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009444:	782a      	ldrb	r2, [r5, #0]
 8009446:	2a2a      	cmp	r2, #42	; 0x2a
 8009448:	d015      	beq.n	8009476 <_svfiprintf_r+0xea>
 800944a:	9a07      	ldr	r2, [sp, #28]
 800944c:	462f      	mov	r7, r5
 800944e:	2000      	movs	r0, #0
 8009450:	250a      	movs	r5, #10
 8009452:	4639      	mov	r1, r7
 8009454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009458:	3b30      	subs	r3, #48	; 0x30
 800945a:	2b09      	cmp	r3, #9
 800945c:	d94d      	bls.n	80094fa <_svfiprintf_r+0x16e>
 800945e:	b1b8      	cbz	r0, 8009490 <_svfiprintf_r+0x104>
 8009460:	e00f      	b.n	8009482 <_svfiprintf_r+0xf6>
 8009462:	462f      	mov	r7, r5
 8009464:	e7b8      	b.n	80093d8 <_svfiprintf_r+0x4c>
 8009466:	4a40      	ldr	r2, [pc, #256]	; (8009568 <_svfiprintf_r+0x1dc>)
 8009468:	1a80      	subs	r0, r0, r2
 800946a:	fa0b f000 	lsl.w	r0, fp, r0
 800946e:	4318      	orrs	r0, r3
 8009470:	9004      	str	r0, [sp, #16]
 8009472:	463d      	mov	r5, r7
 8009474:	e7d3      	b.n	800941e <_svfiprintf_r+0x92>
 8009476:	9a03      	ldr	r2, [sp, #12]
 8009478:	1d11      	adds	r1, r2, #4
 800947a:	6812      	ldr	r2, [r2, #0]
 800947c:	9103      	str	r1, [sp, #12]
 800947e:	2a00      	cmp	r2, #0
 8009480:	db01      	blt.n	8009486 <_svfiprintf_r+0xfa>
 8009482:	9207      	str	r2, [sp, #28]
 8009484:	e004      	b.n	8009490 <_svfiprintf_r+0x104>
 8009486:	4252      	negs	r2, r2
 8009488:	f043 0302 	orr.w	r3, r3, #2
 800948c:	9207      	str	r2, [sp, #28]
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	783b      	ldrb	r3, [r7, #0]
 8009492:	2b2e      	cmp	r3, #46	; 0x2e
 8009494:	d10c      	bne.n	80094b0 <_svfiprintf_r+0x124>
 8009496:	787b      	ldrb	r3, [r7, #1]
 8009498:	2b2a      	cmp	r3, #42	; 0x2a
 800949a:	d133      	bne.n	8009504 <_svfiprintf_r+0x178>
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	1d1a      	adds	r2, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	9203      	str	r2, [sp, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bfb8      	it	lt
 80094a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80094ac:	3702      	adds	r7, #2
 80094ae:	9305      	str	r3, [sp, #20]
 80094b0:	4d2e      	ldr	r5, [pc, #184]	; (800956c <_svfiprintf_r+0x1e0>)
 80094b2:	7839      	ldrb	r1, [r7, #0]
 80094b4:	2203      	movs	r2, #3
 80094b6:	4628      	mov	r0, r5
 80094b8:	f7f6 fea2 	bl	8000200 <memchr>
 80094bc:	b138      	cbz	r0, 80094ce <_svfiprintf_r+0x142>
 80094be:	2340      	movs	r3, #64	; 0x40
 80094c0:	1b40      	subs	r0, r0, r5
 80094c2:	fa03 f000 	lsl.w	r0, r3, r0
 80094c6:	9b04      	ldr	r3, [sp, #16]
 80094c8:	4303      	orrs	r3, r0
 80094ca:	3701      	adds	r7, #1
 80094cc:	9304      	str	r3, [sp, #16]
 80094ce:	7839      	ldrb	r1, [r7, #0]
 80094d0:	4827      	ldr	r0, [pc, #156]	; (8009570 <_svfiprintf_r+0x1e4>)
 80094d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094d6:	2206      	movs	r2, #6
 80094d8:	1c7e      	adds	r6, r7, #1
 80094da:	f7f6 fe91 	bl	8000200 <memchr>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d038      	beq.n	8009554 <_svfiprintf_r+0x1c8>
 80094e2:	4b24      	ldr	r3, [pc, #144]	; (8009574 <_svfiprintf_r+0x1e8>)
 80094e4:	bb13      	cbnz	r3, 800952c <_svfiprintf_r+0x1a0>
 80094e6:	9b03      	ldr	r3, [sp, #12]
 80094e8:	3307      	adds	r3, #7
 80094ea:	f023 0307 	bic.w	r3, r3, #7
 80094ee:	3308      	adds	r3, #8
 80094f0:	9303      	str	r3, [sp, #12]
 80094f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f4:	444b      	add	r3, r9
 80094f6:	9309      	str	r3, [sp, #36]	; 0x24
 80094f8:	e76d      	b.n	80093d6 <_svfiprintf_r+0x4a>
 80094fa:	fb05 3202 	mla	r2, r5, r2, r3
 80094fe:	2001      	movs	r0, #1
 8009500:	460f      	mov	r7, r1
 8009502:	e7a6      	b.n	8009452 <_svfiprintf_r+0xc6>
 8009504:	2300      	movs	r3, #0
 8009506:	3701      	adds	r7, #1
 8009508:	9305      	str	r3, [sp, #20]
 800950a:	4619      	mov	r1, r3
 800950c:	250a      	movs	r5, #10
 800950e:	4638      	mov	r0, r7
 8009510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009514:	3a30      	subs	r2, #48	; 0x30
 8009516:	2a09      	cmp	r2, #9
 8009518:	d903      	bls.n	8009522 <_svfiprintf_r+0x196>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0c8      	beq.n	80094b0 <_svfiprintf_r+0x124>
 800951e:	9105      	str	r1, [sp, #20]
 8009520:	e7c6      	b.n	80094b0 <_svfiprintf_r+0x124>
 8009522:	fb05 2101 	mla	r1, r5, r1, r2
 8009526:	2301      	movs	r3, #1
 8009528:	4607      	mov	r7, r0
 800952a:	e7f0      	b.n	800950e <_svfiprintf_r+0x182>
 800952c:	ab03      	add	r3, sp, #12
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4622      	mov	r2, r4
 8009532:	4b11      	ldr	r3, [pc, #68]	; (8009578 <_svfiprintf_r+0x1ec>)
 8009534:	a904      	add	r1, sp, #16
 8009536:	4640      	mov	r0, r8
 8009538:	f7fc fbc0 	bl	8005cbc <_printf_float>
 800953c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009540:	4681      	mov	r9, r0
 8009542:	d1d6      	bne.n	80094f2 <_svfiprintf_r+0x166>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	065b      	lsls	r3, r3, #25
 8009548:	f53f af35 	bmi.w	80093b6 <_svfiprintf_r+0x2a>
 800954c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800954e:	b01d      	add	sp, #116	; 0x74
 8009550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009554:	ab03      	add	r3, sp, #12
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	4622      	mov	r2, r4
 800955a:	4b07      	ldr	r3, [pc, #28]	; (8009578 <_svfiprintf_r+0x1ec>)
 800955c:	a904      	add	r1, sp, #16
 800955e:	4640      	mov	r0, r8
 8009560:	f7fc fe62 	bl	8006228 <_printf_i>
 8009564:	e7ea      	b.n	800953c <_svfiprintf_r+0x1b0>
 8009566:	bf00      	nop
 8009568:	0800a654 	.word	0x0800a654
 800956c:	0800a65a 	.word	0x0800a65a
 8009570:	0800a65e 	.word	0x0800a65e
 8009574:	08005cbd 	.word	0x08005cbd
 8009578:	080092d9 	.word	0x080092d9

0800957c <_sbrk_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4c06      	ldr	r4, [pc, #24]	; (8009598 <_sbrk_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4605      	mov	r5, r0
 8009584:	4608      	mov	r0, r1
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	f7f8 fe46 	bl	8002218 <_sbrk>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_sbrk_r+0x1a>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	b103      	cbz	r3, 8009596 <_sbrk_r+0x1a>
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000acc 	.word	0x20000acc

0800959c <strncmp>:
 800959c:	b510      	push	{r4, lr}
 800959e:	b16a      	cbz	r2, 80095bc <strncmp+0x20>
 80095a0:	3901      	subs	r1, #1
 80095a2:	1884      	adds	r4, r0, r2
 80095a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d103      	bne.n	80095b8 <strncmp+0x1c>
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d001      	beq.n	80095b8 <strncmp+0x1c>
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1f5      	bne.n	80095a4 <strncmp+0x8>
 80095b8:	1a98      	subs	r0, r3, r2
 80095ba:	bd10      	pop	{r4, pc}
 80095bc:	4610      	mov	r0, r2
 80095be:	e7fc      	b.n	80095ba <strncmp+0x1e>

080095c0 <__ascii_wctomb>:
 80095c0:	b149      	cbz	r1, 80095d6 <__ascii_wctomb+0x16>
 80095c2:	2aff      	cmp	r2, #255	; 0xff
 80095c4:	bf85      	ittet	hi
 80095c6:	238a      	movhi	r3, #138	; 0x8a
 80095c8:	6003      	strhi	r3, [r0, #0]
 80095ca:	700a      	strbls	r2, [r1, #0]
 80095cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80095d0:	bf98      	it	ls
 80095d2:	2001      	movls	r0, #1
 80095d4:	4770      	bx	lr
 80095d6:	4608      	mov	r0, r1
 80095d8:	4770      	bx	lr

080095da <memmove>:
 80095da:	4288      	cmp	r0, r1
 80095dc:	b510      	push	{r4, lr}
 80095de:	eb01 0302 	add.w	r3, r1, r2
 80095e2:	d807      	bhi.n	80095f4 <memmove+0x1a>
 80095e4:	1e42      	subs	r2, r0, #1
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d00a      	beq.n	8009600 <memmove+0x26>
 80095ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095f2:	e7f8      	b.n	80095e6 <memmove+0xc>
 80095f4:	4283      	cmp	r3, r0
 80095f6:	d9f5      	bls.n	80095e4 <memmove+0xa>
 80095f8:	1881      	adds	r1, r0, r2
 80095fa:	1ad2      	subs	r2, r2, r3
 80095fc:	42d3      	cmn	r3, r2
 80095fe:	d100      	bne.n	8009602 <memmove+0x28>
 8009600:	bd10      	pop	{r4, pc}
 8009602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009606:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800960a:	e7f7      	b.n	80095fc <memmove+0x22>

0800960c <__malloc_lock>:
 800960c:	4770      	bx	lr

0800960e <__malloc_unlock>:
 800960e:	4770      	bx	lr

08009610 <_realloc_r>:
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	4607      	mov	r7, r0
 8009614:	4614      	mov	r4, r2
 8009616:	460e      	mov	r6, r1
 8009618:	b921      	cbnz	r1, 8009624 <_realloc_r+0x14>
 800961a:	4611      	mov	r1, r2
 800961c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009620:	f7ff be00 	b.w	8009224 <_malloc_r>
 8009624:	b922      	cbnz	r2, 8009630 <_realloc_r+0x20>
 8009626:	f7ff fdaf 	bl	8009188 <_free_r>
 800962a:	4625      	mov	r5, r4
 800962c:	4628      	mov	r0, r5
 800962e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009630:	f000 f814 	bl	800965c <_malloc_usable_size_r>
 8009634:	42a0      	cmp	r0, r4
 8009636:	d20f      	bcs.n	8009658 <_realloc_r+0x48>
 8009638:	4621      	mov	r1, r4
 800963a:	4638      	mov	r0, r7
 800963c:	f7ff fdf2 	bl	8009224 <_malloc_r>
 8009640:	4605      	mov	r5, r0
 8009642:	2800      	cmp	r0, #0
 8009644:	d0f2      	beq.n	800962c <_realloc_r+0x1c>
 8009646:	4631      	mov	r1, r6
 8009648:	4622      	mov	r2, r4
 800964a:	f7ff f985 	bl	8008958 <memcpy>
 800964e:	4631      	mov	r1, r6
 8009650:	4638      	mov	r0, r7
 8009652:	f7ff fd99 	bl	8009188 <_free_r>
 8009656:	e7e9      	b.n	800962c <_realloc_r+0x1c>
 8009658:	4635      	mov	r5, r6
 800965a:	e7e7      	b.n	800962c <_realloc_r+0x1c>

0800965c <_malloc_usable_size_r>:
 800965c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009660:	1f18      	subs	r0, r3, #4
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfbc      	itt	lt
 8009666:	580b      	ldrlt	r3, [r1, r0]
 8009668:	18c0      	addlt	r0, r0, r3
 800966a:	4770      	bx	lr

0800966c <_init>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr

08009678 <_fini>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	bf00      	nop
 800967c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967e:	bc08      	pop	{r3}
 8009680:	469e      	mov	lr, r3
 8009682:	4770      	bx	lr
